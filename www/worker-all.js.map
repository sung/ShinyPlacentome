{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/bam.js","js/bigwig.js","js/bin.js","js/color.js","js/das.js","js/encode.js","js/fetchworker.js","js/lh3utils.js","js/sha1.js","js/spans.js","js/utils.js","node_modules/es6-promise/dist/es6-promise.js","node_modules/jszlib/js/inflate.js","node_modules/process/browser.js"],"names":[],"mappings":"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AACH;;AAED;AACA;AACA;;AAEA,IAAI,EAAE,UAAU,OAAO,SAAnB,CAAJ,EAAmC;AAC/B,WAAO,SAAP,CAAiB,IAAjB,GAAwB,YAAW;AAC/B,eAAO,KAAK,OAAL,CAAa,MAAb,EAAqB,EAArB,EAAyB,OAAzB,CAAiC,MAAjC,EAAyC,EAAzC,CAAP;AACH,KAFD;AAGH;;AAED,IAAI,OAAO,MAAP,KAAmB,WAAvB,EAAoC;AAChC,WAAO,OAAP,GAAiB;AACb,iBAAS,OADI;AAEb,qBAAa,WAFA;AAGb,0BAAkB,gBAHL;AAIb,qBAAa,WAJA;AAKb,eAAO,KALM;AAMb,iBAAS,OANI;AAOb,kBAAU,QAPG;AAQb,sBAAc,YARD;AASb,qBAAa,WATA;AAUb,cAAM,IAVO;;AAYb,qBAAa,WAZA;AAab,uBAAe,aAbF;AAcb,wBAAgB,cAdH;;AAgBb,qBAAa,WAhBA;;AAkBb,kBAAU,QAlBG;AAmBb,iBAAS,OAnBI;;AAqBb,gCAAwB;AArBX,KAAjB;AAuBH;;;;ACzfvlnEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"worker-all.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// bam.js: indexed binary alignments\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var spans = require('./spans');\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var bin = require('./bin');\n    var readInt = bin.readInt;\n    var readShort = bin.readShort;\n    var readByte = bin.readByte;\n    var readInt64 = bin.readInt64;\n    var readFloat = bin.readFloat;\n\n    var lh3utils = require('./lh3utils');\n    var readVob = lh3utils.readVob;\n    var unbgzf = lh3utils.unbgzf;\n    var reg2bins = lh3utils.reg2bins;\n    var Chunk = lh3utils.Chunk;\n}\n\n\nvar BAM_MAGIC = 0x14d4142;\nvar BAI_MAGIC = 0x1494142;\n\nvar BamFlags = {\n    MULTIPLE_SEGMENTS:       0x1,\n    ALL_SEGMENTS_ALIGN:      0x2,\n    SEGMENT_UNMAPPED:        0x4,\n    NEXT_SEGMENT_UNMAPPED:   0x8,\n    REVERSE_COMPLEMENT:      0x10,\n    NEXT_REVERSE_COMPLEMENT: 0x20,\n    FIRST_SEGMENT:           0x40,\n    LAST_SEGMENT:            0x80,\n    SECONDARY_ALIGNMENT:     0x100,\n    QC_FAIL:                 0x200,\n    DUPLICATE:               0x400,\n    SUPPLEMENTARY:           0x800\n};\n\nfunction BamFile() {\n}\n\n\n// Calculate the length (in bytes) of the BAI ref starting at offset.\n// Returns {nbin, length, minBlockIndex}\nfunction _getBaiRefLength(uncba, offset) {\n    var p = offset;\n    var nbin = readInt(uncba, p); p += 4;\n    for (var b = 0; b < nbin; ++b) {\n        var bin = readInt(uncba, p);\n        var nchnk = readInt(uncba, p+4);\n        p += 8 + (nchnk * 16);\n    }\n    var nintv = readInt(uncba, p); p += 4;\n\n    var minBlockIndex = 1000000000;\n    var q = p;\n    for (var i = 0; i < nintv; ++i) {\n        var v = readVob(uncba, q); q += 8;\n        if (v) {\n            var bi = v.block;\n            if (v.offset > 0)\n                bi += 65536;\n\n            if (bi < minBlockIndex)\n                minBlockIndex = bi;\n            break;\n        }\n    }\n    p += (nintv * 8);\n\n    return {\n        minBlockIndex: minBlockIndex,\n        nbin: nbin,\n        length: p - offset\n    };\n}\n\n\nfunction makeBam(data, bai, indexChunks, callback, attempted) {\n    // Do an initial probe on the BAM file to catch any mixed-content errors.\n    data.slice(0, 10).fetch(function(header) {\n        if (header) {\n            return makeBam2(data, bai, indexChunks, callback, attempted);\n        } else {\n            return callback(null, \"Couldn't access BAM.\");\n        }\n    }, {timeout: 5000});\n}\n\nfunction makeBam2(data, bai, indexChunks, callback, attempted) {\n    var bam = new BamFile();\n    bam.data = data;\n    bam.bai = bai;\n    bam.indexChunks = indexChunks;\n\n    var minBlockIndex = bam.indexChunks ? bam.indexChunks.minBlockIndex : 1000000000;\n\n    // Fills out bam.chrToIndex and bam.indexToChr based on the first few bytes of the BAM.\n    function parseBamHeader(r) {\n        if (!r) {\n            return callback(null, \"Couldn't access BAM\");\n        }\n\n        var unc = unbgzf(r, r.byteLength);\n        var uncba = new Uint8Array(unc);\n\n        var magic = readInt(uncba, 0);\n        if (magic != BAM_MAGIC) {\n            return callback(null, \"Not a BAM file, magic=0x\" + magic.toString(16));\n        }\n        var headLen = readInt(uncba, 4);\n        var header = '';\n        for (var i = 0; i < headLen; ++i) {\n            header += String.fromCharCode(uncba[i + 8]);\n        }\n\n        var nRef = readInt(uncba, headLen + 8);\n        var p = headLen + 12;\n\n        bam.chrToIndex = {};\n        bam.indexToChr = [];\n        for (var i = 0; i < nRef; ++i) {\n            var lName = readInt(uncba, p);\n            var name = '';\n            for (var j = 0; j < lName-1; ++j) {\n                name += String.fromCharCode(uncba[p + 4 + j]);\n            }\n            var lRef = readInt(uncba, p + lName + 4);\n            bam.chrToIndex[name] = i;\n            if (name.indexOf('chr') == 0) {\n                bam.chrToIndex[name.substring(3)] = i;\n            } else {\n                bam.chrToIndex['chr' + name] = i;\n            }\n            bam.indexToChr.push(name);\n\n            p = p + 8 + lName;\n        }\n\n        if (bam.indices) {\n            return callback(bam);\n        }\n    }\n\n    function parseBai(header) {\n        if (!header) {\n            return \"Couldn't access BAI\";\n        }\n\n        var uncba = new Uint8Array(header);\n        var baiMagic = readInt(uncba, 0);\n        if (baiMagic != BAI_MAGIC) {\n            return callback(null, 'Not a BAI file, magic=0x' + baiMagic.toString(16));\n        }\n\n        var nref = readInt(uncba, 4);\n\n        bam.indices = [];\n\n        var p = 8;\n        for (var ref = 0; ref < nref; ++ref) {\n            var blockStart = p;\n            var o = _getBaiRefLength(uncba, blockStart);\n            p += o.length;\n\n            minBlockIndex = Math.min(o.minBlockIndex, minBlockIndex);\n\n            var nbin = o.nbin;\n\n            if (nbin > 0) {\n                bam.indices[ref] = new Uint8Array(header, blockStart, p - blockStart);\n            }\n        }\n\n        return true;\n    }\n\n    if (!bam.indexChunks) {\n        bam.bai.fetch(function(header) {   // Do we really need to fetch the whole thing? :-(\n            var result = parseBai(header);\n            if (result !== true) {\n                if (bam.bai.url && typeof(attempted) === \"undefined\") {\n                    // Already attempted x.bam.bai not there so now trying x.bai\n                    bam.bai.url = bam.data.url.replace(new RegExp('.bam$'), '.bai');\n                    \n                     // True lets us know we are making a second attempt\n                    makeBam2(data, bam.bai, indexChunks, callback, true);\n                }\n                else {\n                    // We've attempted x.bam.bai & x.bai and nothing worked\n                    callback(null, result);\n                }\n            } else {\n              bam.data.slice(0, minBlockIndex).fetch(parseBamHeader);\n            }\n        });   // Timeout on first request to catch Chrome mixed-content error.\n    } else {\n        var chunks = bam.indexChunks.chunks;\n        bam.indices = []\n        for (var i = 0; i < chunks.length; i++) {\n           bam.indices[i] = null;  // To be filled out lazily as needed\n        }\n        bam.data.slice(0, minBlockIndex).fetch(parseBamHeader);\n    }\n}\n\n\n\nBamFile.prototype.blocksForRange = function(refId, min, max) {\n    var index = this.indices[refId];\n    if (!index) {\n        return [];\n    }\n\n    var intBinsL = reg2bins(min, max);\n    var intBins = [];\n    for (var i = 0; i < intBinsL.length; ++i) {\n        intBins[intBinsL[i]] = true;\n    }\n    var leafChunks = [], otherChunks = [];\n\n    var nbin = readInt(index, 0);\n    var p = 4;\n    for (var b = 0; b < nbin; ++b) {\n        var bin = readInt(index, p);\n        var nchnk = readInt(index, p+4);\n//        dlog('bin=' + bin + '; nchnk=' + nchnk);\n        p += 8;\n        if (intBins[bin]) {\n            for (var c = 0; c < nchnk; ++c) {\n                var cs = readVob(index, p);\n                var ce = readVob(index, p + 8);\n                (bin < 4681 ? otherChunks : leafChunks).push(new Chunk(cs, ce));\n                p += 16;\n            }\n        } else {\n            p +=  (nchnk * 16);\n        }\n    }\n    // console.log('leafChunks = ' + JSON.stringify(leafChunks));\n    // console.log('otherChunks = ' + JSON.stringify(otherChunks));\n\n    var nintv = readInt(index, p);\n    // console.log('nintv=' + nintv);\n    var lowest = null;\n    var minLin = Math.min(min>>14, nintv - 1), maxLin = Math.min(max>>14, nintv - 1);\n    for (var i = minLin; i <= maxLin; ++i) {\n        var lb =  readVob(index, p + 4 + (i * 8));\n        if (!lb) {\n            continue;\n        }\n        if (!lowest || lb.block < lowest.block || (lb.block == lowest.block && lb.offset < lowest.offset)) {\n            lowest = lb;\n        }\n    }\n    // console.log('Lowest LB = ' + lowest);\n\n    var prunedOtherChunks = [];\n    if (lowest != null) {\n        for (var i = 0; i < otherChunks.length; ++i) {\n            var chnk = otherChunks[i];\n            if (chnk.maxv.block > lowest.block || (chnk.maxv.block == lowest.block && chnk.maxv.offset >= lowest.offset)) {\n                prunedOtherChunks.push(chnk);\n            }\n        }\n    }\n    // console.log('prunedOtherChunks = ' + JSON.stringify(prunedOtherChunks));\n    otherChunks = prunedOtherChunks;\n\n    var intChunks = [];\n    for (var i = 0; i < otherChunks.length; ++i) {\n        intChunks.push(otherChunks[i]);\n    }\n    for (var i = 0; i < leafChunks.length; ++i) {\n        intChunks.push(leafChunks[i]);\n    }\n\n    intChunks.sort(function(c0, c1) {\n        var dif = c0.minv.block - c1.minv.block;\n        if (dif != 0) {\n            return dif;\n        } else {\n            return c0.minv.offset - c1.minv.offset;\n        }\n    });\n    var mergedChunks = [];\n    if (intChunks.length > 0) {\n        var cur = intChunks[0];\n        for (var i = 1; i < intChunks.length; ++i) {\n            var nc = intChunks[i];\n            if (nc.minv.block == cur.maxv.block /* && nc.minv.offset == cur.maxv.offset */) { // no point splitting mid-block\n                cur = new Chunk(cur.minv, nc.maxv);\n            } else {\n                mergedChunks.push(cur);\n                cur = nc;\n            }\n        }\n        mergedChunks.push(cur);\n    }\n    // console.log('mergedChunks = ' + JSON.stringify(mergedChunks));\n\n    return mergedChunks;\n}\n\nBamFile.prototype.fetch = function(chr, min, max, callback, opts) {\n    var thisB = this;\n    opts = opts || {};\n\n    var chrId = this.chrToIndex[chr];\n    var chunks;\n    if (chrId === undefined) {\n        chunks = [];\n    } else {\n        // Fetch this portion of the BAI if it hasn't been loaded yet.\n        if (this.indices[chrId] === null && this.indexChunks.chunks[chrId]) {\n            var start_stop = this.indexChunks.chunks[chrId];\n            return this.bai.slice(start_stop[0], start_stop[1]).fetch(function(data) {\n                var buffer = new Uint8Array(data);\n                this.indices[chrId] = buffer;\n                return this.fetch(chr, min, max, callback, opts);\n            }.bind(this));\n        }\n\n        chunks = this.blocksForRange(chrId, min, max);\n        if (!chunks) {\n            callback(null, 'Error in index fetch');\n        }\n    }\n    \n    var records = [];\n    var index = 0;\n    var data;\n\n    function tramp() {\n        if (index >= chunks.length) {\n            return callback(records);\n        } else if (!data) {\n            var c = chunks[index];\n            var fetchMin = c.minv.block;\n            var fetchMax = c.maxv.block + (1<<16); // *sigh*\n            // console.log('fetching ' + fetchMin + ':' + fetchMax);\n            thisB.data.slice(fetchMin, fetchMax - fetchMin).fetch(function(r) {\n                data = unbgzf(r, c.maxv.block - c.minv.block + 1);\n                return tramp();\n            });\n        } else {\n            var ba = new Uint8Array(data);\n            var finished = thisB.readBamRecords(ba, chunks[index].minv.offset, records, min, max, chrId, opts);\n            data = null;\n            ++index;\n            if (finished)\n                return callback(records);\n            else\n                return tramp();\n        }\n    }\n    tramp();\n}\n\nvar SEQRET_DECODER = ['=', 'A', 'C', 'x', 'G', 'x', 'x', 'x', 'T', 'x', 'x', 'x', 'x', 'x', 'x', 'N'];\nvar CIGAR_DECODER = ['M', 'I', 'D', 'N', 'S', 'H', 'P', '=', 'X', '?', '?', '?', '?', '?', '?', '?'];\n\nfunction BamRecord() {\n}\n\nBamFile.prototype.readBamRecords = function(ba, offset, sink, min, max, chrId, opts) {\n    while (true) {\n        var blockSize = readInt(ba, offset);\n        var blockEnd = offset + blockSize + 4;\n        if (blockEnd > ba.length) {\n            return false;\n        }\n\n        var record = new BamRecord();\n\n        var refID = readInt(ba, offset + 4);\n        var pos = readInt(ba, offset + 8);\n        \n        var bmn = readInt(ba, offset + 12);\n        var bin = (bmn & 0xffff0000) >> 16;\n        var mq = (bmn & 0xff00) >> 8;\n        var nl = bmn & 0xff;\n\n        var flag_nc = readInt(ba, offset + 16);\n        var flag = (flag_nc & 0xffff0000) >> 16;\n        var nc = flag_nc & 0xffff;\n    \n        var lseq = readInt(ba, offset + 20);\n        \n        var nextRef  = readInt(ba, offset + 24);\n        var nextPos = readInt(ba, offset + 28);\n        \n        var tlen = readInt(ba, offset + 32);\n    \n        record.segment = this.indexToChr[refID];\n        record.flag = flag;\n        record.pos = pos;\n        record.mq = mq;\n        if (opts.light)\n            record.seqLength = lseq;\n\n        if (!opts.light || opts.includeName) {\n            var readName = '';\n            for (var j = 0; j < nl-1; ++j) {\n                readName += String.fromCharCode(ba[offset + 36 + j]);\n            }\n            record.readName = readName;\n        }\n        \n        if (!opts.light) {\n            if (nextRef >= 0) {\n                record.nextSegment = this.indexToChr[nextRef];\n                record.nextPos = nextPos;\n            }\n        \n            var p = offset + 36 + nl;\n\n            var cigar = '';\n            for (var c = 0; c < nc; ++c) {\n                var cigop = readInt(ba, p);\n                cigar = cigar + (cigop>>4) + CIGAR_DECODER[cigop & 0xf];\n                p += 4;\n            }\n            record.cigar = cigar;\n        \n            var seq = '';\n            var seqBytes = (lseq + 1) >> 1;\n            for (var j = 0; j < seqBytes; ++j) {\n                var sb = ba[p + j];\n                seq += SEQRET_DECODER[(sb & 0xf0) >> 4];\n                if (seq.length < lseq)\n                    seq += SEQRET_DECODER[(sb & 0x0f)];\n            }\n            p += seqBytes;\n            record.seq = seq;\n\n            var qseq = '';\n            for (var j = 0; j < lseq; ++j) {\n                qseq += String.fromCharCode(ba[p + j] + 33);\n            }\n            p += lseq;\n            record.quals = qseq;\n\n            while (p < blockEnd) {\n                var tag = String.fromCharCode(ba[p], ba[p + 1]);\n                var type = String.fromCharCode(ba[p + 2]);\n                var value;\n\n                if (type == 'A') {\n                    value = String.fromCharCode(ba[p + 3]);\n                    p += 4;\n                } else if (type == 'i' || type == 'I') {\n                    value = readInt(ba, p + 3);\n                    p += 7;\n                } else if (type == 'c' || type == 'C') {\n                    value = ba[p + 3];\n                    p += 4;\n                } else if (type == 's' || type == 'S') {\n                    value = readShort(ba, p + 3);\n                    p += 5;\n                } else if (type == 'f') {\n                    value = readFloat(ba, p + 3);\n                    p += 7;\n                } else if (type == 'Z' || type == 'H') {\n                    p += 3;\n                    value = '';\n                    for (;;) {\n                        var cc = ba[p++];\n                        if (cc == 0) {\n                            break;\n                        } else {\n                            value += String.fromCharCode(cc);\n                        }\n                    }\n                } else if (type == 'B') {\n                    var atype = String.fromCharCode(ba[p + 3]);\n                    var alen = readInt(ba, p + 4);\n                    var elen;\n                    var reader;\n                    if (atype == 'i' || atype == 'I' || atype == 'f') {\n                        elen = 4;\n                        if (atype == 'f')\n                            reader = readFloat;\n                        else\n                            reader = readInt;\n                    } else if (atype == 's' || atype == 'S') {\n                        elen = 2;\n                        reader = readShort;\n                    } else if (atype == 'c' || atype == 'C') {\n                        elen = 1;\n                        reader = readByte;\n                    } else {\n                        throw 'Unknown array type ' + atype;\n                    }\n\n                    p += 8;\n                    value = [];\n                    for (var i = 0; i < alen; ++i) {\n                        value.push(reader(ba, p));\n                        p += elen;\n                    }\n                } else {\n                    throw 'Unknown type '+ type;\n                }\n                record[tag] = value;\n            }\n        }\n\n        if (!min || record.pos <= max && record.pos + lseq >= min) {\n            if (chrId === undefined || refID == chrId) {\n                sink.push(record);\n            }\n        }\n        if (record.pos > max) {\n            return true;\n        }\n        offset = blockEnd;\n    }\n\n    // Exits via top of loop.\n};\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        makeBam: makeBam,\n        BAM_MAGIC: BAM_MAGIC,\n        BAI_MAGIC: BAI_MAGIC,\n        BamFlags: BamFlags\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// bigwig.js: indexed binary WIG (and BED) files\n//\n\n\"use strict\";\n\n\nif (typeof(require) !== 'undefined') {\n    var spans = require('./spans');\n    var Range = spans.Range;\n    var union = spans.union;\n    var intersection = spans.intersection;\n\n    var das = require('./das');\n    var DASFeature = das.DASFeature;\n    var DASGroup = das.DASGroup;\n\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n\n    var bin = require('./bin');\n    var readInt = bin.readInt;\n\n    var jszlib = require('jszlib');\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n}\n\nvar BIG_WIG_MAGIC = 0x888FFC26;\nvar BIG_WIG_MAGIC_BE = 0x26FC8F88;\nvar BIG_BED_MAGIC = 0x8789F2EB;\nvar BIG_BED_MAGIC_BE = 0xEBF28987;\n\n\nvar BIG_WIG_TYPE_GRAPH = 1;\nvar BIG_WIG_TYPE_VSTEP = 2;\nvar BIG_WIG_TYPE_FSTEP = 3;\n  \nvar M1 = 256;\nvar M2 = 256*256;\nvar M3 = 256*256*256;\nvar M4 = 256*256*256*256;\n\nvar BED_COLOR_REGEXP = new RegExp(\"^[0-9]+,[0-9]+,[0-9]+\");\n\nfunction bwg_readOffset(ba, o) {\n    var offset = ba[o] + ba[o+1]*M1 + ba[o+2]*M2 + ba[o+3]*M3 + ba[o+4]*M4;\n    return offset;\n}\n\nfunction BigWig() {\n}\n\nBigWig.prototype.readChromTree = function(callback) {\n    var thisB = this;\n    this.chromsToIDs = {};\n    this.idsToChroms = {};\n    this.maxID = 0;\n\n    var udo = this.unzoomedDataOffset;\n    var eb = (udo - this.chromTreeOffset) & 3;\n    udo = udo + 4 - eb;\n\n    this.data.slice(this.chromTreeOffset, udo - this.chromTreeOffset).fetch(function(bpt) {\n        var ba = new Uint8Array(bpt);\n        var sa = new Int16Array(bpt);\n        var la = new Int32Array(bpt);\n        var bptMagic = la[0];\n        var blockSize = la[1];\n        var keySize = la[2];\n        var valSize = la[3];\n        var itemCount = bwg_readOffset(ba, 16);\n        var rootNodeOffset = 32;\n\n        var bptReadNode = function(offset) {\n            var nodeType = ba[offset];\n            var cnt = sa[(offset/2) + 1];\n            offset += 4;\n            for (var n = 0; n < cnt; ++n) {\n                if (nodeType == 0) {\n                    offset += keySize;\n                    var childOffset = bwg_readOffset(ba, offset);\n                    offset += 8;\n                    childOffset -= thisB.chromTreeOffset;\n                    bptReadNode(childOffset);\n                } else {\n                    var key = '';\n                    for (var ki = 0; ki < keySize; ++ki) {\n                        var charCode = ba[offset++];\n                        if (charCode != 0) {\n                            key += String.fromCharCode(charCode);\n                        }\n                    }\n                    var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n                    var chromSize = (ba[offset + 7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n                    offset += 8;\n\n                    thisB.chromsToIDs[key] = chromId;\n                    if (key.indexOf('chr') == 0) {\n                        thisB.chromsToIDs[key.substr(3)] = chromId;\n                    }\n                    thisB.idsToChroms[chromId] = key;\n                    thisB.maxID = Math.max(thisB.maxID, chromId);\n                }\n            }\n        };\n        bptReadNode(rootNodeOffset);\n\n        callback(thisB);\n    });\n}\n\nfunction BigWigView(bwg, cirTreeOffset, cirTreeLength, isSummary) {\n    this.bwg = bwg;\n    this.cirTreeOffset = cirTreeOffset;\n    this.cirTreeLength = cirTreeLength;\n    this.isSummary = isSummary;\n}\n\n\n\nBigWigView.prototype.readWigData = function(chrName, min, max, callback) {\n    var chr = this.bwg.chromsToIDs[chrName];\n    if (chr === undefined) {\n        // Not an error because some .bwgs won't have data for all chromosomes.\n        return callback([]);\n    } else {\n        this.readWigDataById(chr, min, max, callback);\n    }\n}\n\nBigWigView.prototype.readWigDataById = function(chr, min, max, callback) {\n    var thisB = this;\n    if (!this.cirHeader) {\n        this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {\n            thisB.cirHeader = result;\n            var la = new Int32Array(thisB.cirHeader);\n            thisB.cirBlockSize = la[1];\n            thisB.readWigDataById(chr, min, max, callback);\n        });\n        return;\n    }\n\n    var blocksToFetch = [];\n    var outstanding = 0;\n\n    var beforeBWG = Date.now();\n\n    var filter = function(chromId, fmin, fmax, toks) {\n        return ((chr < 0 || chromId == chr) && fmin <= max && fmax >= min);\n    }\n\n    var cirFobRecur = function(offset, level) {\n        if (thisB.bwg.instrument)\n            console.log('level=' + level + '; offset=' + offset + '; time=' + (Date.now()|0));\n\n        outstanding += offset.length;\n\n        if (offset.length == 1 && offset[0] - thisB.cirTreeOffset == 48 && thisB.cachedCirRoot) {\n            cirFobRecur2(thisB.cachedCirRoot, 0, level);\n            --outstanding;\n            if (outstanding == 0) {\n                thisB.fetchFeatures(filter, blocksToFetch, callback);\n            }\n            return;\n        }\n\n        var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n        var spans;\n        for (var i = 0; i < offset.length; ++i) {\n            var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n            spans = spans ? union(spans, blockSpan) : blockSpan;\n        }\n        \n        var fetchRanges = spans.ranges();\n        for (var r = 0; r < fetchRanges.length; ++r) {\n            var fr = fetchRanges[r];\n            cirFobStartFetch(offset, fr, level);\n        }\n    }\n\n    var cirFobStartFetch = function(offset, fr, level, attempts) {\n        var length = fr.max() - fr.min();\n        thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {\n            for (var i = 0; i < offset.length; ++i) {\n                if (fr.contains(offset[i])) {\n                    cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n\n                    if (offset[i] - thisB.cirTreeOffset == 48 && offset[i] - fr.min() == 0)\n                        thisB.cachedCirRoot = resultBuffer;\n\n                    --outstanding;\n                    if (outstanding == 0) {\n                        thisB.fetchFeatures(filter, blocksToFetch, callback);\n                    }\n                }\n            }\n        });\n    }\n\n    var cirFobRecur2 = function(cirBlockData, offset, level) {\n        var ba = new Uint8Array(cirBlockData);\n        var sa = new Int16Array(cirBlockData, 0, cirBlockData.byteLength >> 1);\n        var la = new Int32Array(cirBlockData, 0, cirBlockData.byteLength >> 2);\n\n        var isLeaf = ba[offset];\n        var cnt = sa[offset/2 + 1];\n        offset += 4;\n\n        if (isLeaf != 0) {\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = bwg_readOffset(ba, offset+16);\n                var blockSize = bwg_readOffset(ba, offset+24);\n                if (((chr < 0 || startChrom < chr) || (startChrom == chr && startBase <= max)) &&\n                    ((chr < 0 || endChrom   > chr) || (endChrom == chr && endBase >= min)))\n                {\n                    blocksToFetch.push({offset: blockOffset, size: blockSize});\n                }\n                offset += 32;\n            }\n        } else {\n            var recurOffsets = [];\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = bwg_readOffset(ba, offset+16);\n                if ((chr < 0 || startChrom < chr || (startChrom == chr && startBase <= max)) &&\n                    (chr < 0 || endChrom   > chr || (endChrom == chr && endBase >= min)))\n                {\n                    recurOffsets.push(blockOffset);\n                }\n                offset += 24;\n            }\n            if (recurOffsets.length > 0) {\n                cirFobRecur(recurOffsets, level + 1);\n            }\n        }\n    };\n\n    cirFobRecur([thisB.cirTreeOffset + 48], 1);\n}\n\n\nBigWigView.prototype.fetchFeatures = function(filter, blocksToFetch, callback) {\n    var thisB = this;\n\n    blocksToFetch.sort(function(b0, b1) {\n        return (b0.offset|0) - (b1.offset|0);\n    });\n\n    if (blocksToFetch.length == 0) {\n        callback([]);\n    } else {\n        var features = [];\n        var createFeature = function(chr, fmin, fmax, opts) {\n            if (!opts) {\n                opts = {};\n            }\n        \n            var f = new DASFeature();\n            f._chromId = chr;\n            f.segment = thisB.bwg.idsToChroms[chr];\n            f.min = fmin;\n            f.max = fmax;\n            f.type = thisB.bwg.type;\n            \n            for (var k in opts) {\n                f[k] = opts[k];\n            }\n            \n            features.push(f);\n        };\n\n        var tramp = function() {\n            if (blocksToFetch.length == 0) {\n                var afterBWG = Date.now();\n                // dlog('BWG fetch took ' + (afterBWG - beforeBWG) + 'ms');\n                callback(features);\n                return;  // just in case...\n            } else {\n                var block = blocksToFetch[0];\n                if (block.data) {\n                    thisB.parseFeatures(block.data, createFeature, filter);\n                    blocksToFetch.splice(0, 1);\n                    tramp();\n                } else {\n                    var fetchStart = block.offset;\n                    var fetchSize = block.size;\n                    var bi = 1;\n                    while (bi < blocksToFetch.length && blocksToFetch[bi].offset == (fetchStart + fetchSize)) {\n                        fetchSize += blocksToFetch[bi].size;\n                        ++bi;\n                    }\n\n                    thisB.bwg.data.slice(fetchStart, fetchSize).fetch(function(result) {\n                        var offset = 0;\n                        var bi = 0;\n                        while (offset < fetchSize) {\n                            var fb = blocksToFetch[bi];\n                        \n                            var data;\n                            if (thisB.bwg.uncompressBufSize > 0) {\n                                data = jszlib_inflate_buffer(result, offset + 2, fb.size - 2);\n                            } else {\n                                var tmp = new Uint8Array(fb.size);    // FIXME is this really the best we can do?\n                                arrayCopy(new Uint8Array(result, offset, fb.size), 0, tmp, 0, fb.size);\n                                data = tmp.buffer;\n                            }\n                            fb.data = data;\n                            \n                            offset += fb.size;\n                            ++bi;\n                        }\n                        tramp();\n                    });\n                }\n            }\n        }\n        tramp();\n    }\n}\n\nBigWigView.prototype.parseFeatures = function(data, createFeature, filter) {\n    var ba = new Uint8Array(data);\n\n    if (this.isSummary) {\n        var sa = new Int16Array(data);\n        var la = new Int32Array(data);\n        var fa = new Float32Array(data);\n\n        var itemCount = data.byteLength/32;\n        for (var i = 0; i < itemCount; ++i) {\n            var chromId =   la[(i*8)];\n            var start =     la[(i*8)+1];\n            var end =       la[(i*8)+2];\n            var validCnt =  la[(i*8)+3];\n            var minVal    = fa[(i*8)+4];\n            var maxVal    = fa[(i*8)+5];\n            var sumData   = fa[(i*8)+6];\n            var sumSqData = fa[(i*8)+7];\n            \n            if (filter(chromId, start + 1, end)) {\n                var summaryOpts = {type: 'bigwig', score: sumData/validCnt, maxScore: maxVal};\n                if (this.bwg.type == 'bigbed') {\n                    summaryOpts.type = 'density';\n                }\n                createFeature(chromId, start + 1, end, summaryOpts);\n            }\n        }\n    } else if (this.bwg.type == 'bigwig') {\n        var sa = new Int16Array(data);\n        var la = new Int32Array(data);\n        var fa = new Float32Array(data);\n\n        var chromId = la[0];\n        var blockStart = la[1];\n        var blockEnd = la[2];\n        var itemStep = la[3];\n        var itemSpan = la[4];\n        var blockType = ba[20];\n        var itemCount = sa[11];\n        \n        if (blockType == BIG_WIG_TYPE_FSTEP) {\n            for (var i = 0; i < itemCount; ++i) {\n                var score = fa[i + 6];\n                var fmin = blockStart + (i*itemStep) + 1, fmax = blockStart + (i*itemStep) + itemSpan;\n                if (filter(chromId, fmin, fmax))\n                    createFeature(chromId, fmin, fmax, {score: score});\n            }\n        } else if (blockType == BIG_WIG_TYPE_VSTEP) {\n            for (var i = 0; i < itemCount; ++i) {\n                var start = la[(i*2) + 6] + 1;\n                var end = start + itemSpan - 1;\n                var score = fa[(i*2) + 7];\n                if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n            }\n        } else if (blockType == BIG_WIG_TYPE_GRAPH) {\n            for (var i = 0; i < itemCount; ++i) {\n                var start = la[(i*3) + 6] + 1;\n                var end   = la[(i*3) + 7];\n                var score = fa[(i*3) + 8];\n                if (start > end) {\n                    start = end;\n                }\n                if (filter(chromId, start, end))\n                    createFeature(chromId, start, end, {score: score});\n            }\n        } else {\n            console.log('Currently not handling bwgType=' + blockType);\n        }\n    } else if (this.bwg.type == 'bigbed') {\n        var offset = 0;\n        var dfc = this.bwg.definedFieldCount;\n        var schema = this.bwg.schema;\n\n        while (offset < ba.length) {\n            var chromId = (ba[offset+3]<<24) | (ba[offset+2]<<16) | (ba[offset+1]<<8) | (ba[offset+0]);\n            var start = (ba[offset+7]<<24) | (ba[offset+6]<<16) | (ba[offset+5]<<8) | (ba[offset+4]);\n            var end = (ba[offset+11]<<24) | (ba[offset+10]<<16) | (ba[offset+9]<<8) | (ba[offset+8]);\n            offset += 12;\n            var rest = '';\n            while (true) {\n                var ch = ba[offset++];\n                if (ch != 0) {\n                    rest += String.fromCharCode(ch);\n                } else {\n                    break;\n                }\n            }\n\n            var featureOpts = {};\n            \n            var bedColumns;\n            if (rest.length > 0) {\n                bedColumns = rest.split('\\t');\n            } else {\n                bedColumns = [];\n            }\n            if (bedColumns.length > 0 && dfc > 3) {\n                featureOpts.label = bedColumns[0];\n            }\n            if (bedColumns.length > 1 && dfc > 4) {\n                var score = parseInt(bedColumns[1]);\n                if (!isNaN(score))\n                    featureOpts.score = score;\n            }\n            if (bedColumns.length > 2 && dfc > 5) {\n                featureOpts.orientation = bedColumns[2];\n            }\n            if (bedColumns.length > 5 && dfc > 8) {\n                var color = bedColumns[5];\n                if (BED_COLOR_REGEXP.test(color)) {\n                    featureOpts.itemRgb = 'rgb(' + color + ')';\n                }\n            }\n\n            if (bedColumns.length > dfc-3 && schema) {\n                for (var col = dfc - 3; col < bedColumns.length; ++col) {\n                    featureOpts[schema.fields[col+3].name] = bedColumns[col];\n                }\n            }\n\n            if (filter(chromId, start + 1, end, bedColumns)) {\n                if (dfc < 12) {\n                    createFeature(chromId, start + 1, end, featureOpts);\n                } else {\n                    var thickStart = bedColumns[3]|0;\n                    var thickEnd   = bedColumns[4]|0;\n                    var blockCount = bedColumns[6]|0;\n                    var blockSizes = bedColumns[7].split(',');\n                    var blockStarts = bedColumns[8].split(',');\n\n                    if (featureOpts.exonFrames) {\n                        var exonFrames = featureOpts.exonFrames.split(',');\n                        featureOpts.exonFrames = undefined;\n                    }\n                    \n                    featureOpts.type = 'transcript'\n                    var grp = new DASGroup();\n                    for (var k in featureOpts) {\n                        grp[k] = featureOpts[k];\n                    }\n                    grp.id = bedColumns[0];\n                    grp.segment = this.bwg.idsToChroms[chromId];\n                    grp.min = start + 1;\n                    grp.max = end;\n                    grp.notes = [];\n                    featureOpts.groups = [grp];\n\n                    // Moving towards using bigGenePred model, but will\n                    // still support old Dalliance-style BED12+gene-name for the\n                    // foreseeable future.\n                    if (bedColumns.length > 9) {\n                        var geneId = featureOpts.geneName || bedColumns[9];\n                        var geneName = geneId;\n                        if (bedColumns.length > 10) {\n                            geneName = bedColumns[10];\n                        }\n                        if (featureOpts.geneName2)\n                            geneName = featureOpts.geneName2;\n\n                        var gg = shallowCopy(grp);\n                        gg.id = geneId;\n                        gg.label = geneName;\n                        gg.type = 'gene';\n                        featureOpts.groups.push(gg);\n                    }\n\n                    var spanList = [];\n                    for (var b = 0; b < blockCount; ++b) {\n                        var bmin = (blockStarts[b]|0) + start;\n                        var bmax = bmin + (blockSizes[b]|0);\n                        var span = new Range(bmin, bmax);\n                        spanList.push(span);\n                    }\n                    var spans = union(spanList);\n                    \n                    var tsList = spans.ranges();\n                    for (var s = 0; s < tsList.length; ++s) {\n                        var ts = tsList[s];\n                        createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                    }\n\n                    if (thickEnd > thickStart) {\n                        var codingRegion = (featureOpts.orientation == '+') ?\n                            new Range(thickStart, thickEnd + 3) :\n                            new Range(thickStart - 3, thickEnd);\n                            // +/- 3 to account for stop codon\n\n                        var tl = intersection(spans, codingRegion);\n                        if (tl) {\n                            featureOpts.type = 'translation';\n                            var tlList = tl.ranges();\n                            var readingFrame = 0;\n\n                            var tlOffset = 0;\n                            while (tlList[0].min() > tsList[tlOffset].max())\n                                tlOffset++;\n\n                            for (var s = 0; s < tlList.length; ++s) {\n                                // Record reading frame for every exon\n                                var index = s;\n                                if (featureOpts.orientation == '-')\n                                    index = tlList.length - s - 1;\n                                var ts = tlList[index];\n                                featureOpts.readframe = readingFrame;\n                                if (exonFrames) {\n                                    var brf = parseInt(exonFrames[index + tlOffset]);\n                                    if (typeof(brf) === 'number' && brf >= 0 && brf <= 2) {\n                                        featureOpts.readframe = brf;\n                                        featureOpts.readframeExplicit = true;\n                                    }\n                                }\n                                var length = ts.max() - ts.min();\n                                readingFrame = (readingFrame + length) % 3;\n                                createFeature(chromId, ts.min() + 1, ts.max(), featureOpts);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    } else {\n        throw Error(\"Don't know what to do with \" + this.bwg.type);\n    }\n}\n\n//\n// nasty cut/paste, should roll back in!\n//\n\nBigWigView.prototype.getFirstAdjacent = function(chrName, pos, dir, callback) {\n    var chr = this.bwg.chromsToIDs[chrName];\n    if (chr === undefined) {\n        // Not an error because some .bwgs won't have data for all chromosomes.\n        return callback([]);\n    } else {\n        this.getFirstAdjacentById(chr, pos, dir, callback);\n    }\n}\n\nBigWigView.prototype.getFirstAdjacentById = function(chr, pos, dir, callback) {\n    var thisB = this;\n    if (!this.cirHeader) {\n        this.bwg.data.slice(this.cirTreeOffset, 48).fetch(function(result) {\n            thisB.cirHeader = result;\n            var la = new Int32Array(thisB.cirHeader);\n            thisB.cirBlockSize = la[1];\n            thisB.getFirstAdjacentById(chr, pos, dir, callback);\n        });\n        return;\n    }\n\n    var blockToFetch = null;\n    var bestBlockChr = -1;\n    var bestBlockOffset = -1;\n\n    var outstanding = 0;\n\n    var beforeBWG = Date.now();\n\n    var cirFobRecur = function(offset, level) {\n        outstanding += offset.length;\n\n        var maxCirBlockSpan = 4 +  (thisB.cirBlockSize * 32);   // Upper bound on size, based on a completely full leaf node.\n        var spans;\n        for (var i = 0; i < offset.length; ++i) {\n            var blockSpan = new Range(offset[i], offset[i] + maxCirBlockSpan);\n            spans = spans ? union(spans, blockSpan) : blockSpan;\n        }\n        \n        var fetchRanges = spans.ranges();\n        for (var r = 0; r < fetchRanges.length; ++r) {\n            var fr = fetchRanges[r];\n            cirFobStartFetch(offset, fr, level);\n        }\n    }\n\n    var cirFobStartFetch = function(offset, fr, level, attempts) {\n        var length = fr.max() - fr.min();\n        thisB.bwg.data.slice(fr.min(), fr.max() - fr.min()).fetch(function(resultBuffer) {\n            for (var i = 0; i < offset.length; ++i) {\n                if (fr.contains(offset[i])) {\n                    cirFobRecur2(resultBuffer, offset[i] - fr.min(), level);\n                    --outstanding;\n                    if (outstanding == 0) {\n                        if (!blockToFetch) {\n                            if (dir > 0 && (chr != 0 || pos > 0)) {\n                                return thisB.getFirstAdjacentById(0, 0, dir, callback);\n                            } else if (dir < 0 && (chr != thisB.bwg.maxID || pos < 1000000000)) {\n                                return thisB.getFirstAdjacentById(thisB.bwg.maxID, 1000000000, dir, callback);\n                            }\n                            return callback([]);\n                        }\n\n                        thisB.fetchFeatures(function(chrx, fmin, fmax, toks) {\n                            return (dir < 0 && (chrx < chr || fmax < pos)) || (dir > 0 && (chrx > chr || fmin > pos));\n                        }, [blockToFetch], function(features) {\n                            var bestFeature = null;\n                            var bestChr = -1;\n                            var bestPos = -1;\n                            for (var fi = 0; fi < features.length; ++fi) {\n                                var f = features[fi];\n                                var chrx = f._chromId, fmin = f.min, fmax = f.max;\n                                if (bestFeature == null || ((dir < 0) && (chrx > bestChr || fmax > bestPos)) || ((dir > 0) && (chrx < bestChr || fmin < bestPos))) {\n                                    bestFeature = f;\n                                    bestPos = (dir < 0) ? fmax : fmin;\n                                    bestChr = chrx;\n                                }\n                            }\n\n                            if (bestFeature != null) \n                                return callback([bestFeature]);\n                            else\n                                return callback([]);\n                        });\n                    }\n                }\n            }\n        });\n    }\n\n    var cirFobRecur2 = function(cirBlockData, offset, level) {\n        var ba = new Uint8Array(cirBlockData);\n        var sa = new Int16Array(cirBlockData);\n        var la = new Int32Array(cirBlockData);\n\n        var isLeaf = ba[offset];\n        var cnt = sa[offset/2 + 1];\n        offset += 4;\n\n        if (isLeaf != 0) {\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = bwg_readOffset(ba, offset+16);\n                var blockSize = bwg_readOffset(ba, offset+24);\n                if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)))) ||\n                    (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)))))\n                {\n                    // console.log('Got an interesting block: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                    if (/_random/.exec(thisB.bwg.idsToChroms[startChrom])) {\n                        // dlog('skipping random: ' + thisB.bwg.idsToChroms[startChrom]);\n                    } else if (blockToFetch == null || ((dir < 0) && (endChrom > bestBlockChr || (endChrom == bestBlockChr && endBase > bestBlockOffset)) ||\n                                                 (dir > 0) && (startChrom < bestBlockChr || (startChrom == bestBlockChr && startBase < bestBlockOffset))))\n                    {\n                        //                        dlog('best is: startBase=' + startChrom + ':' + startBase + '; endBase=' + endChrom + ':' + endBase + '; offset=' + blockOffset + '; size=' + blockSize);\n                        blockToFetch = {offset: blockOffset, size: blockSize};\n                        bestBlockOffset = (dir < 0) ? endBase : startBase;\n                        bestBlockChr = (dir < 0) ? endChrom : startChrom;\n                    }\n                }\n                offset += 32;\n            }\n        } else {\n            var bestRecur = -1;\n            var bestPos = -1;\n            var bestChr = -1;\n            for (var i = 0; i < cnt; ++i) {\n                var lo = offset/4;\n                var startChrom = la[lo];\n                var startBase = la[lo + 1];\n                var endChrom = la[lo + 2];\n                var endBase = la[lo + 3];\n                var blockOffset = (la[lo + 4]<<32) | (la[lo + 5]);\n                if ((dir < 0 && ((startChrom < chr || (startChrom == chr && startBase <= pos)) &&\n                                 (endChrom   >= chr))) ||\n                     (dir > 0 && ((endChrom > chr || (endChrom == chr && endBase >= pos)) &&\n                                  (startChrom <= chr))))\n                {\n                    if (bestRecur < 0 || endBase > bestPos) {\n                        bestRecur = blockOffset;\n                        bestPos = (dir < 0) ? endBase : startBase;\n                        bestChr = (dir < 0) ? endChrom : startChrom;\n                    }\n                }\n                offset += 24;\n            }\n            if (bestRecur >= 0) {\n                cirFobRecur([bestRecur], level + 1);\n            }\n        }\n    };\n    \n\n    cirFobRecur([thisB.cirTreeOffset + 48], 1);\n}\n\nBigWig.prototype.readWigData = function(chrName, min, max, callback) {\n    this.getUnzoomedView().readWigData(chrName, min, max, callback);\n}\n\nBigWig.prototype.getUnzoomedView = function() {\n    if (!this.unzoomedView) {\n        var cirLen = 4000;\n        var nzl = this.zoomLevels[0];\n        if (nzl) {\n            cirLen = this.zoomLevels[0].dataOffset - this.unzoomedIndexOffset;\n        }\n        this.unzoomedView = new BigWigView(this, this.unzoomedIndexOffset, cirLen, false);\n    }\n    return this.unzoomedView;\n}\n\nBigWig.prototype.getZoomedView = function(z) {\n    var zh = this.zoomLevels[z];\n    if (!zh.view) {\n        zh.view = new BigWigView(this, zh.indexOffset, /* this.zoomLevels[z + 1].dataOffset - zh.indexOffset */ 4000, true);\n    }\n    return zh.view;\n}\n\nfunction makeBwg(data, callback, name) {\n    var bwg = new BigWig();\n    bwg.data = data;\n    bwg.name = name;\n    bwg.data.slice(0, 512).salted().fetch(function(result) {\n        if (!result) {\n            return callback(null, \"Couldn't fetch file\");\n        }\n\n        var header = result;\n        var ba = new Uint8Array(header);\n        var sa = new Int16Array(header);\n        var la = new Int32Array(header);\n        var magic = ba[0] + (M1 * ba[1]) + (M2 * ba[2]) + (M3 * ba[3]);\n        if (magic == BIG_WIG_MAGIC) {\n            bwg.type = 'bigwig';\n        } else if (magic == BIG_BED_MAGIC) {\n            bwg.type = 'bigbed';\n        } else if (magic == BIG_WIG_MAGIC_BE || magic == BIG_BED_MAGIC_BE) {\n            return callback(null, \"Currently don't support big-endian BBI files\");\n            \n        } else {\n            return callback(null, \"Not a supported format, magic=0x\" + magic.toString(16));\n            \n        }\n\n        bwg.version = sa[2];             // 4\n        bwg.numZoomLevels = sa[3];       // 6\n        bwg.chromTreeOffset = bwg_readOffset(ba, 8);\n        bwg.unzoomedDataOffset = bwg_readOffset(ba, 16);\n        bwg.unzoomedIndexOffset = bwg_readOffset(ba, 24);\n        bwg.fieldCount = sa[16];         // 32\n        bwg.definedFieldCount = sa[17];  // 34\n        bwg.asOffset = bwg_readOffset(ba, 36);\n        bwg.totalSummaryOffset = bwg_readOffset(ba, 44);\n        bwg.uncompressBufSize = la[13];  // 52\n        bwg.extHeaderOffset = bwg_readOffset(ba, 56);\n\n        bwg.zoomLevels = [];\n        for (var zl = 0; zl < bwg.numZoomLevels; ++zl) {\n            var zlReduction = la[zl*6 + 16]\n            var zlData = bwg_readOffset(ba, zl*24 + 72);\n            var zlIndex = bwg_readOffset(ba, zl*24 + 80);\n            bwg.zoomLevels.push({reduction: zlReduction, dataOffset: zlData, indexOffset: zlIndex});\n        }\n\n        bwg.readChromTree(function() {\n            bwg.getAutoSQL(function(as) {\n                bwg.schema = as;\n                return callback(bwg);\n            });\n        });\n    }, {timeout: 5000});    // Potential timeout on first request to catch mixed-content errors on\n                            // Chromium.\n}\n\n\nBigWig.prototype._tsFetch = function(zoom, chr, min, max, callback) {\n    var bwg = this;\n    if (zoom >= this.zoomLevels.length - 1) {\n        if (!this.topLevelReductionCache) {\n            this.getZoomedView(this.zoomLevels.length - 1).readWigDataById(-1, 0, 300000000, function(feats) {\n                bwg.topLevelReductionCache = feats;\n                return bwg._tsFetch(zoom, chr, min, max, callback);\n            });\n        } else {\n            var f = [];\n            var c = this.topLevelReductionCache;\n            for (var fi = 0; fi < c.length; ++fi) {\n                if (c[fi]._chromId == chr) {\n                    f.push(c[fi]);\n                }\n            }\n            return callback(f);\n        }\n    } else {\n        var view;\n        if (zoom < 0) {\n            view = this.getUnzoomedView();\n        } else {\n            view = this.getZoomedView(zoom);\n        }\n        return view.readWigDataById(chr, min, max, callback);\n    }\n}\n\nBigWig.prototype.thresholdSearch = function(chrName, referencePoint, dir, threshold, callback) {\n    dir = (dir<0) ? -1 : 1;\n    var bwg = this;\n    var initialChr = this.chromsToIDs[chrName];\n    var candidates = [{chrOrd: 0, chr: initialChr, zoom: bwg.zoomLevels.length - 4, min: 0, max: 300000000, fromRef: true}]\n    for (var i = 1; i <= this.maxID + 1; ++i) {\n        var chrId = (initialChr + (dir*i)) % (this.maxID + 1);\n        if (chrId < 0) \n            chrId += (this.maxID + 1);\n        candidates.push({chrOrd: i, chr: chrId, zoom: bwg.zoomLevels.length - 1, min: 0, max: 300000000})\n    }\n       \n    function fbThresholdSearchRecur() {\n    \tif (candidates.length == 0) {\n    \t    return callback(null);\n    \t}\n    \tcandidates.sort(function(c1, c2) {\n    \t    var d = c1.zoom - c2.zoom;\n    \t    if (d != 0)\n    \t\t    return d;\n\n            d = c1.chrOrd - c2.chrOrd;\n            if (d != 0)\n                return d;\n    \t    else\n    \t\t    return c1.min - c2.min * dir;\n    \t});\n\n\t    var candidate = candidates.splice(0, 1)[0];\n        bwg._tsFetch(candidate.zoom, candidate.chr, candidate.min, candidate.max, function(feats) {\n            var rp = dir > 0 ? 0 : 300000000;\n            if (candidate.fromRef)\n                rp = referencePoint;\n            \n            for (var fi = 0; fi < feats.length; ++fi) {\n    \t        var f = feats[fi];\n                var score;\n                if (f.maxScore != undefined)\n                    score = f.maxScore;\n                else\n                    score = f.score;\n\n                if (dir > 0) {\n    \t            if (score > threshold) {\n        \t\t        if (candidate.zoom < 0) {\n        \t\t            if (f.min > rp)\n                                return callback(f);\n        \t\t        } else if (f.max > rp) {\n        \t\t            candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n        \t\t        }\n                    }\n                } else {\n                    if (score > threshold) {\n            \t\t    if (candidate.zoom < 0) {\n                \t        if (f.max < rp)\n                \t\t\t    return callback(f);\n                        } else if (f.min < rp) {\n                            candidates.push({chr: candidate.chr, chrOrd: candidate.chrOrd, zoom: candidate.zoom - 2, min: f.min, max: f.max, fromRef: candidate.fromRef});\n                        }\n    \t            }\n                }\n    \t    }\n            fbThresholdSearchRecur();\n        });\n    }\n    \n    fbThresholdSearchRecur();\n}\n\nBigWig.prototype.getAutoSQL = function(callback) {\n    var thisB = this;\n    if (!this.asOffset)\n        return callback(null);\n\n\n    this.data.slice(this.asOffset, 2048).fetch(function(result) {\n        var ba = new Uint8Array(result);\n        var s = '';\n        for (var i = 0; i < ba.length; ++i) {\n            if (ba[i] == 0)\n                break;\n            s += String.fromCharCode(ba[i]);\n        }\n        \n        /* \n         * Quick'n'dirty attempt to parse autoSql format.\n         * See: http://www.linuxjournal.com/files/linuxjournal.com/linuxjournal/articles/059/5949/5949l2.html\n         */\n\n        var header_re = /(\\w+)\\s+(\\w+)\\s+(\"([^\"]+)\")?\\s+\\(\\s*/;\n        var field_re = /([\\w\\[\\]]+)\\s+(\\w+)\\s*;\\s*(\"([^\"]+)\")?\\s*/g;\n\n        var headerMatch = header_re.exec(s);\n        if (headerMatch) {\n            var as = {\n                declType: headerMatch[1],\n                name: headerMatch[2],\n                comment: headerMatch[4],\n\n                fields: []\n            };\n\n            s = s.substring(headerMatch[0]);\n            for (var m = field_re.exec(s); m != null; m = field_re.exec(s)) {\n                as.fields.push({type: m[1],\n                             name: m[2],\n                             comment: m[4]});\n            }\n\n            return callback(as);\n        }\n    });\n}\n\nBigWig.prototype.getExtraIndices = function(callback) {\n    var thisB = this;\n    if (this.version < 4 || this.extHeaderOffset == 0 || this.type != 'bigbed') {\n        return callback(null);\n    } else {\n        this.data.slice(this.extHeaderOffset, 64).fetch(function(result) {\n            if (!result) {\n                return callback(null, \"Couldn't fetch extension header\");\n            }\n\n            var ba = new Uint8Array(result);\n            var sa = new Int16Array(result);\n            var la = new Int32Array(result);\n            \n            var extHeaderSize = sa[0];\n            var extraIndexCount = sa[1];\n            var extraIndexListOffset = bwg_readOffset(ba, 4);\n\n            if (extraIndexCount == 0) {\n                return callback(null);\n            }\n\n            // FIXME 20byte records only make sense for single-field indices.\n            // Right now, these seem to be the only things around, but the format\n            // is actually more general.\n            thisB.data.slice(extraIndexListOffset, extraIndexCount * 20).fetch(function(eil) {\n                if (!eil) {\n                    return callback(null, \"Couldn't fetch index info\");\n                }\n\n                var ba = new Uint8Array(eil);\n                var sa = new Int16Array(eil);\n                var la = new Int32Array(eil);\n\n                var indices = [];\n                for (var ii = 0; ii < extraIndexCount; ++ii) {\n                    var eiType = sa[ii*10];\n                    var eiFieldCount = sa[ii*10 + 1];\n                    var eiOffset = bwg_readOffset(ba, ii*20 + 4);\n                    var eiField = sa[ii*10 + 8]\n                    var index = new BBIExtraIndex(thisB, eiType, eiFieldCount, eiOffset, eiField);\n                    indices.push(index);\n                }\n                callback(indices);\n            });\n        });\n    }\n}\n\nfunction BBIExtraIndex(bbi, type, fieldCount, offset, field) {\n    this.bbi = bbi;\n    this.type = type;\n    this.fieldCount = fieldCount;\n    this.offset = offset;\n    this.field = field;\n}\n\nBBIExtraIndex.prototype.lookup = function(name, callback) {\n    var thisB = this;\n\n    this.bbi.data.slice(this.offset, 32).fetch(function(bpt) {\n        var ba = new Uint8Array(bpt);\n        var sa = new Int16Array(bpt);\n        var la = new Int32Array(bpt);\n        var bptMagic = la[0];\n        var blockSize = la[1];\n        var keySize = la[2];\n        var valSize = la[3];\n        var itemCount = bwg_readOffset(ba, 16);\n        var rootNodeOffset = 32;\n\n        function bptReadNode(nodeOffset) {\n            thisB.bbi.data.slice(nodeOffset, 4 + (blockSize * (keySize + valSize))).fetch(function(node) {\n                var ba = new Uint8Array(node);\n                var sa = new Uint16Array(node);\n                var la = new Uint32Array(node);\n\n                var nodeType = ba[0];\n                var cnt = sa[1];\n\n                var offset = 4;\n                if (nodeType == 0) {\n                    var lastChildOffset = null;\n                    for (var n = 0; n < cnt; ++n) {\n                        var key = '';\n                        for (var ki = 0; ki < keySize; ++ki) {\n                            var charCode = ba[offset++];\n                            if (charCode != 0) {\n                                key += String.fromCharCode(charCode);\n                            }\n                        }\n\n                        var childOffset = bwg_readOffset(ba, offset);\n                        offset += 8;\n                        \n                        if (name.localeCompare(key) < 0 && lastChildOffset) {\n                            bptReadNode(lastChildOffset);\n                            return;\n                        }\n                        lastChildOffset = childOffset;\n                    }\n                    bptReadNode(lastChildOffset);\n                } else {\n                    for (var n = 0; n < cnt; ++n) {\n                        var key = '';\n                        for (var ki = 0; ki < keySize; ++ki) {\n                            var charCode = ba[offset++];\n                            if (charCode != 0) {\n                                key += String.fromCharCode(charCode);\n                            }\n                        }\n                        \n                        // Specific for EI case.\n                        if (key == name) {\n                            var start = bwg_readOffset(ba, offset);\n                            var length = readInt(ba, offset + 8);\n\n                            return thisB.bbi.getUnzoomedView().fetchFeatures(\n                                function(chr, min, max, toks) {\n                                    if (toks && toks.length > thisB.field - 3)\n                                        return toks[thisB.field - 3] == name;\n                                }, \n                                [{offset: start, size: length}], \n                                callback);\n                        }\n                        offset += valSize;\n                    }\n                    return callback([]);\n                }\n            });\n        }\n\n        bptReadNode(thisB.offset + rootNodeOffset);\n    });\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        makeBwg: makeBwg,\n        BIG_BED_MAGIC: BIG_BED_MAGIC,\n        BIG_WIG_MAGIC: BIG_WIG_MAGIC\n    }\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// bin.js general binary data support\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n\n    var Promise = require('es6-promise').Promise;\n}\n\nfunction BlobFetchable(b) {\n    this.blob = b;\n}\n\nBlobFetchable.prototype.slice = function(start, length) {\n    var b;\n\n    if (this.blob.slice) {\n        if (length) {\n            b = this.blob.slice(start, start + length);\n        } else {\n            b = this.blob.slice(start);\n        }\n    } else {\n        if (length) {\n            b = this.blob.webkitSlice(start, start + length);\n        } else {\n            b = this.blob.webkitSlice(start);\n        }\n    }\n    return new BlobFetchable(b);\n}\n\nBlobFetchable.prototype.salted = function() {return this;}\n\nif (typeof(FileReader) !== 'undefined') {\n    // console.log('defining async BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function(callback) {\n        var reader = new FileReader();\n        reader.onloadend = function(ev) {\n            callback(bstringToBuffer(reader.result));\n        };\n        reader.readAsBinaryString(this.blob);\n    }\n\n} else {\n    // if (console && console.log)\n    //    console.log('defining sync BlobFetchable.fetch');\n\n    BlobFetchable.prototype.fetch = function(callback) {\n        var reader = new FileReaderSync();\n        try {\n            var res = reader.readAsArrayBuffer(this.blob);\n            callback(res);\n        } catch (e) {\n            callback(null, e);\n        }\n    }\n}\n\nfunction URLFetchable(url, start, end, opts) {\n    if (!opts) {\n        if (typeof start === 'object') {\n            opts = start;\n            start = undefined;\n        } else {\n            opts = {};\n        }\n    }\n\n    this.url = url;\n    this.start = start || 0;\n    if (end) {\n        this.end = end;\n    }\n    this.opts = opts;\n}\n\nURLFetchable.prototype.slice = function(s, l) {\n    if (s < 0) {\n        throw 'Bad slice ' + s;\n    }\n\n    var ns = this.start, ne = this.end;\n    if (ns && s) {\n        ns = ns + s;\n    } else {\n        ns = s || ns;\n    }\n    if (l && ns) {\n        ne = ns + l - 1;\n    } else {\n        ne = ne || l - 1;\n    }\n    return new URLFetchable(this.url, ns, ne, this.opts);\n}\n\nvar seed=0;\nvar isSafari = typeof(navigator) !== 'undefined' &&\n    navigator.userAgent.indexOf('Safari') >= 0 &&\n    navigator.userAgent.indexOf('Chrome') < 0 ;\n\nURLFetchable.prototype.fetchAsText = function(callback) {\n    var thisB = this;\n\n    this.getURL().then(function(url) {\n        try {\n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n            }\n            req.open('GET', url, true);\n            \n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (req.status == 200 || req.status == 206) {\n                        return callback(req.responseText);\n                    } else {\n                        return callback(null);\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send();\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null, err);\n    });\n}\n\nURLFetchable.prototype.salted = function() {\n    var o = shallowCopy(this.opts);\n    o.salt = true;\n    return new URLFetchable(this.url, this.start, this.end, o);\n}\n\nURLFetchable.prototype.getURL = function() {\n    if (this.opts.resolver) {\n        return this.opts.resolver(this.url).then(function (urlOrObj) {\n            if (typeof urlOrObj === 'string') {\n                return urlOrObj;\n            } else {\n                return urlOrObj.url;\n            }\n        });\n    } else {\n        return Promise.resolve(this.url);\n    }\n}\n\nURLFetchable.prototype.fetch = function(callback, opts) {\n    var thisB = this;\n \n    opts = opts || {};\n    var attempt = opts.attempt || 1;\n    var truncatedLength = opts.truncatedLength;\n    if (attempt > 3) {\n        return callback(null);\n    }\n\n    this.getURL().then(function(url) {\n        try {\n            var timeout;\n            if (opts.timeout && !thisB.opts.credentials) {\n                timeout = setTimeout(\n                    function() {\n                        console.log('timing out ' + url);\n                        req.abort();\n                        return callback(null, 'Timeout');\n                    },\n                    opts.timeout\n                );\n            }\n            \n            var req = new XMLHttpRequest();\n            var length;\n            if ((isSafari || thisB.opts.salt) && url.indexOf('?') < 0) {\n                url = url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++seed));\n            }\n            req.open('GET', url, true);\n            req.overrideMimeType('text/plain; charset=x-user-defined');\n            if (thisB.end) {\n                if (thisB.end - thisB.start > 100000000) {\n                    throw 'Monster fetch!';\n                }\n                req.setRequestHeader('Range', 'bytes=' + thisB.start + '-' + thisB.end);\n                length = thisB.end - thisB.start + 1;\n            }\n            req.responseType = 'arraybuffer';\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    if (timeout)\n                        clearTimeout(timeout);\n                    if (req.status == 200 || req.status == 206) {\n                        if (req.response) {\n                            var bl = req.response.byteLength;\n                            if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {\n                                return thisB.fetch(callback, {attempt: attempt + 1, truncatedLength: bl});\n                            } else {\n                                return callback(req.response);\n                            }\n                        } else if (req.mozResponseArrayBuffer) {\n                            return callback(req.mozResponseArrayBuffer);\n                        } else {\n                            var r = req.responseText;\n                            if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {\n                                return thisB.fetch(callback, {attempt: attempt + 1, truncatedLength: r.length});\n                            } else {\n                                return callback(bstringToBuffer(req.responseText));\n                            }\n                        }\n                    } else {\n                        return thisB.fetch(callback, {attempt: attempt + 1});\n                    }\n                }\n            };\n            if (thisB.opts.credentials) {\n                req.withCredentials = true;\n            }\n            req.send();\n        } catch (e) {\n            return callback(null);\n        }\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null, err);\n    });\n}\n                       \nfunction bstringToBuffer(result) {\n    if (!result) {\n        return null;\n    }\n\n    var ba = new Uint8Array(result.length);\n    for (var i = 0; i < ba.length; ++i) {\n        ba[i] = result.charCodeAt(i);\n    }\n    return ba.buffer;\n}\n\n// Read from Uint8Array\n\nvar convertBuffer = new ArrayBuffer(8);\nvar ba = new Uint8Array(convertBuffer);\nvar fa = new Float32Array(convertBuffer);\n\nfunction readFloat(buf, offset) {\n    ba[0] = buf[offset];\n    ba[1] = buf[offset+1];\n    ba[2] = buf[offset+2];\n    ba[3] = buf[offset+3];\n    return fa[0];\n}\n\nfunction readInt64(ba, offset) {\n    return (ba[offset + 7] << 24) | (ba[offset + 6] << 16) | (ba[offset + 5] << 8) | (ba[offset + 4]);\n}\n\nconst M1 = 256,\n      M2 = M1 * 256,\n      M3 = M2 * 256,\n      M4 = M3 * 256,\n      M5 = M4 * 256;\n\nfunction readInt64LE(ba, offset) {\n    return (ba[offset]) + (ba[offset + 1] * M1) + (ba[offset + 2] * M2) + (ba[offset + 3] * M3) + (ba[offset + 4] * M4) + (ba[offset + 5] * M5);\n}\n\nfunction readInt64BE(ba, offset) {\n    return (ba[offset + 7]) + (ba[offset + 6] * M1) + (ba[offset + 5] * M2) + (ba[offset + 4] * M3) + (ba[offset + 3] * M4) + (ba[offset + 2] * M5);\n}\n\nfunction readInt(ba, offset) {\n    return (ba[offset + 3] << 24) | (ba[offset + 2] << 16) | (ba[offset + 1] << 8) | (ba[offset]);\n}\n\nfunction readShort(ba, offset) {\n    return (ba[offset + 1] << 8) | (ba[offset]);\n}\n\nfunction readByte(ba, offset) {\n    return ba[offset];\n}\n\nfunction readIntBE(ba, offset) {\n    return (ba[offset] << 24) | (ba[offset + 1] << 16) | (ba[offset + 2] << 8) | (ba[offset + 3]);\n}\n\n// Exports if we are being used as a module\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        BlobFetchable: BlobFetchable,\n        URLFetchable: URLFetchable,\n\n        readInt: readInt,\n        readIntBE: readIntBE,\n        readInt64: readInt64,\n        readInt64LE: readInt64LE,\n        readInt64BE: readInt64BE,\n        readShort: readShort,\n        readByte: readByte,\n        readFloat: readFloat\n    }\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// color.js\n//\n\n\"use strict\";\n\nfunction DColour(red, green, blue, name) {\n    this.red = red|0;\n    this.green = green|0;\n    this.blue = blue|0;\n    if (name) {\n        this.name = name;\n    }\n}\n\nDColour.prototype.toSvgString = function() {\n    if (!this.name) {\n        this.name = \"rgb(\" + this.red + \",\" + this.green + \",\" + this.blue + \")\";\n    }\n\n    return this.name;\n}\n\nfunction hex2(x) {\n    var y = '00' + x.toString(16);\n    return y.substring(y.length - 2);\n}\n\nDColour.prototype.toHexString = function() {\n    return '#' + hex2(this.red) + hex2(this.green) + hex2(this.blue);\n}\n\nvar palette = {\n    red: new DColour(255, 0, 0, 'red'),\n    green: new DColour(0, 255, 0, 'green'),\n    blue: new DColour(0, 0, 255, 'blue'),\n    yellow: new DColour(255, 255, 0, 'yellow'),\n    white: new DColour(255, 255, 255, 'white'),\n    black: new DColour(0, 0, 0, 'black'),\n    gray: new DColour(180, 180, 180, 'gray'),\n    grey: new DColour(180, 180, 180, 'grey'),\n    lightskyblue: new DColour(135, 206, 250, 'lightskyblue'),\n    lightsalmon: new DColour(255, 160, 122, 'lightsalmon'),\n    hotpink: new DColour(255, 105, 180, 'hotpink')\n};\n\nvar COLOR_RE = new RegExp('^#([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})([0-9A-Fa-f]{2})$');\nvar CSS_COLOR_RE = /rgb\\(([0-9]+),([0-9]+),([0-9]+)\\)/\n\nfunction dasColourForName(name) {\n    var c = palette[name];\n    if (!c) {\n        var match = COLOR_RE.exec(name);\n        if (match) {\n            c = new DColour(('0x' + match[1])|0, ('0x' + match[2])|0, ('0x' + match[3])|0, name);\n            palette[name] = c;\n        } else {\n    \t    match = CSS_COLOR_RE.exec(name);\n    \t    if (match) {\n        \t\tc = new DColour(match[1]|0, match[2]|0, match[3]|0, name);\n        \t\tpalette[name] = c;\n\t       } else {\n\t\t      console.log(\"couldn't handle color: \" + name);\n\t\t      c = palette.black;\n\t\t      palette[name] = c;\n\t       }\n        }\n    }\n    return c;\n}\n\nfunction makeColourSteps(steps, stops, colours) {\n    var dcolours = [];\n    for (var ci = 0; ci < colours.length; ++ci) {\n        dcolours.push(dasColourForName(colours[ci]));\n    }\n\n    var grad = [];\n  STEP_LOOP:\n    for (var si = 0; si < steps; ++si) {\n        var rs = (1.0 * si) / (steps-1);\n        var score = stops[0] + (stops[stops.length -1] - stops[0]) * rs;\n        for (var i = 0; i < stops.length - 1; ++i) {\n            if (score >= stops[i] && score <= stops[i+1]) {\n                var frac = (score - stops[i]) / (stops[i+1] - stops[i]);\n                var ca = dcolours[i];\n                var cb = dcolours[i+1];\n\n                var fill = new DColour(\n                    ((ca.red * (1.0 - frac)) + (cb.red * frac))|0,\n                    ((ca.green * (1.0 - frac)) + (cb.green * frac))|0,\n                    ((ca.blue * (1.0 - frac)) + (cb.blue * frac))|0\n                ).toSvgString();\n                grad.push(fill);\n\n                continue STEP_LOOP;\n            }\n        }\n        throw 'Bad step';\n    }\n\n    return grad;\n}\n\nfunction makeGradient(steps, color1, color2, color3) {\n    if (color3) {\n        return makeColourSteps(steps, [0, 0.5, 1], [color1, color2, color3]);\n    } else {\n        return makeColourSteps(steps, [0, 1], [color1, color2]);\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        makeColourSteps: makeColourSteps,\n        makeGradient: makeGradient,\n        dasColourForName: dasColourForName\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// das.js: queries and low-level data model.\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var utils = require('./utils');\n    var shallowCopy = utils.shallowCopy;\n    var pusho = utils.pusho;\n\n    var color = require('./color');\n    var makeColourSteps = color.makeColourSteps;\n}\n\nvar dasLibErrorHandler = function(errMsg) {\n    alert(errMsg);\n}\nvar dasLibRequestQueue = new Array();\n\nfunction DASSegment(name, start, end, description) {\n    this.name = name;\n    this.start = start;\n    this.end = end;\n    this.description = description;\n}\nDASSegment.prototype.toString = function() {\n    return this.name + ':' + this.start + '..' + this.end;\n};\nDASSegment.prototype.isBounded = function() {\n    return this.start && this.end;\n}\nDASSegment.prototype.toDASQuery = function() {\n    var q = 'segment=' + this.name;\n    if (this.start && this.end) {\n        q += (':' + this.start + ',' + this.end);\n    }\n    return q;\n}\n\n\nfunction DASSource(a1, a2) {\n    var options;\n    if (typeof a1 == 'string') {\n        this.uri = a1;\n        options = a2 || {};\n    } else {\n        options = a1 || {};\n    }\n    for (var k in options) {\n        this[k] = options[k];\n    }\n\n    if (!this.coords) {\n        this.coords = [];\n    }\n    if (!this.props) {\n        this.props = {};\n    }\n\n    this.dasBaseURI = this.uri;\n    if (this.dasBaseURI && this.dasBaseURI.substr(this.uri.length - 1) != '/') {\n        this.dasBaseURI = this.dasBaseURI + '/';\n    }\n}\n\nDASSource.prototype.getURI = function(uri) {\n    if (this.resolver) {\n        return this.resolver(uri).then(function (urlOrObj) {\n            if (typeof urlOrObj === 'string') {\n                return urlOrObj;\n            } else {\n                return urlOrObj.url;\n            }\n        });\n    } else {\n        return Promise.resolve(uri);\n    }\n}\n\nfunction DASCoords() {\n}\n\nfunction coordsMatch(c1, c2) {\n    return c1.taxon == c2.taxon && c1.auth == c2.auth && c1.version == c2.version;\n}\n\n//\n// DAS 1.6 entry_points command\n//\n\nDASSource.prototype.entryPoints = function(callback) {\n    var dasURI = this.dasBaseURI + 'entry_points';\n    this.doCrossDomainRequest(dasURI, function(responseXML) {\n            if (!responseXML) {\n                return callback([]);\n            }\n\n                var entryPoints = new Array();\n                \n                var segs = responseXML.getElementsByTagName('SEGMENT');\n                for (var i = 0; i < segs.length; ++i) {\n                    var seg = segs[i];\n                    var segId = seg.getAttribute('id');\n                    \n                    var segSize = seg.getAttribute('size');\n                    var segMin, segMax;\n                    if (segSize) {\n                        segMin = 1; segMax = segSize|0;\n                    } else {\n                        segMin = seg.getAttribute('start');\n                        if (segMin) {\n                            segMin |= 0;\n                        }\n                        segMax = seg.getAttribute('stop');\n                        if (segMax) {\n                            segMax |= 0;\n                        }\n                    }\n                    var segDesc = null;\n                    if (seg.firstChild) {\n                        segDesc = seg.firstChild.nodeValue;\n                    }\n                    entryPoints.push(new DASSegment(segId, segMin, segMax, segDesc));\n                }          \n               callback(entryPoints);\n    });         \n}\n\n//\n// DAS 1.6 sequence command\n// Do we need an option to fall back to the dna command?\n//\n\nfunction DASSequence(name, start, end, alpha, seq) {\n    this.name = name;\n    this.start = start;\n    this.end = end;\n    this.alphabet = alpha;\n    this.seq = seq;\n}\n\nDASSource.prototype.sequence = function(segment, callback) {\n    var dasURI = this.dasBaseURI + 'sequence?' + segment.toDASQuery();\n    this.doCrossDomainRequest(dasURI, function(responseXML) {\n        if (!responseXML) {\n            callback([]);\n            return;\n        } else {\n                var seqs = new Array();\n                \n                var segs = responseXML.getElementsByTagName('SEQUENCE');\n                for (var i = 0; i < segs.length; ++i) {\n                    var seg = segs[i];\n                    var segId = seg.getAttribute('id');\n                    var segMin = seg.getAttribute('start');\n                    var segMax = seg.getAttribute('stop');\n                    var segAlpha = 'DNA';\n                    var segSeq = null;\n                    if (seg.firstChild) {\n                        var rawSeq = seg.firstChild.nodeValue;\n                        segSeq = '';\n                        var idx = 0;\n                        while (true) {\n                            var space = rawSeq.indexOf('\\n', idx);\n                            if (space >= 0) {\n                                segSeq += rawSeq.substring(idx, space).toUpperCase();\n                                idx = space + 1;\n                            } else {\n                                segSeq += rawSeq.substring(idx).toUpperCase();\n                                break;\n                            }\n                        }\n                    }\n                    seqs.push(new DASSequence(segId, segMin, segMax, segAlpha, segSeq));\n                }\n                \n                callback(seqs);\n        }\n    });\n}\n\n//\n// DAS 1.6 features command\n//\n\nfunction DASFeature() {\n}\n\nfunction DASGroup(id) {\n    if (id)\n        this.id = id;\n}\n\nfunction DASLink(desc, uri) {\n    this.desc = desc;\n    this.uri = uri;\n}\n\nDASSource.prototype.features = function(segment, options, callback) {\n    options = options || {};\n    var thisB = this;\n\n    var dasURI;\n    if (this.features_uri) {\n        dasURI = this.features_uri;\n    } else {\n        var filters = [];\n\n        if (segment) {\n            filters.push(segment.toDASQuery());\n        } else if (options.group) {\n            var g = options.group;\n            if (typeof g == 'string') {\n                filters.push('group_id=' + g);\n            } else {\n                for (var gi = 0; gi < g.length; ++gi) {\n                    filters.push('group_id=' + g[gi]);\n                }\n            }\n        }\n\n        if (options.adjacent) {\n            var adj = options.adjacent;\n            if (typeof adj == 'string') {\n                adj = [adj];\n            }\n            for (var ai = 0; ai < adj.length; ++ai) {\n                filters.push('adjacent=' + adj[ai]);\n            }\n        }\n\n        if (options.type) {\n            if (typeof options.type == 'string') {\n                filters.push('type=' + options.type);\n            } else {\n                for (var ti = 0; ti < options.type.length; ++ti) {\n                    filters.push('type=' + options.type[ti]);\n                }\n            }\n        }\n        \n        if (options.maxbins) {\n            filters.push('maxbins=' + options.maxbins);\n        }\n        \n        if (filters.length > 0) {\n            dasURI = this.dasBaseURI + 'features?' + filters.join(';');\n        } else {\n            callback([], 'No filters specified');\n        }\n    } \n   \n\n    this.doCrossDomainRequest(dasURI, function(responseXML, req) {\n        if (!responseXML) {\n            var msg;\n            if (req.status == 0) {\n                msg = 'server may not support CORS';\n            } else {\n                msg = 'status=' + req.status;\n            }\n            callback([], 'Failed request: ' + msg);\n            return;\n        }\n/*      if (req) {\n            var caps = req.getResponseHeader('X-DAS-Capabilties');\n            if (caps) {\n                alert(caps);\n            }\n        } */\n\n        var features = new Array();\n        var segmentMap = {};\n\n        var segs = responseXML.getElementsByTagName('SEGMENT');\n        for (var si = 0; si < segs.length; ++si) {\n            var segmentXML = segs[si];\n            var segmentID = segmentXML.getAttribute('id');\n            segmentMap[segmentID] = {\n                min: segmentXML.getAttribute('start'),\n                max: segmentXML.getAttribute('stop')\n            };\n            \n            var featureXMLs = segmentXML.getElementsByTagName('FEATURE');\n            for (var i = 0; i < featureXMLs.length; ++i) {\n                var feature = featureXMLs[i];\n                var dasFeature = new DASFeature();\n                \n                dasFeature.segment = segmentID;\n                dasFeature.id = feature.getAttribute('id');\n                dasFeature.label = feature.getAttribute('label');\n\n\n/*\n                var childNodes = feature.childNodes;\n                for (var c = 0; c < childNodes.length; ++c) {\n                    var cn = childNodes[c];\n                    if (cn.nodeType == Node.ELEMENT_NODE) {\n                        var key = cn.tagName;\n                        //var val = null;\n                        //if (cn.firstChild) {\n                        //   val = cn.firstChild.nodeValue;\n                        //}\n                        dasFeature[key] = 'x';\n                    }\n                } */\n\n\n                var spos = elementValue(feature, \"START\");\n                var epos = elementValue(feature, \"END\");\n                if ((spos|0) > (epos|0)) {\n                    dasFeature.min = epos|0;\n                    dasFeature.max = spos|0;\n                } else {\n                    dasFeature.min = spos|0;\n                    dasFeature.max = epos|0;\n                }\n                {\n                    var tec = feature.getElementsByTagName('TYPE');\n                    if (tec.length > 0) {\n                        var te = tec[0];\n                        if (te.firstChild) {\n                            dasFeature.type = te.firstChild.nodeValue;\n                        }\n                        dasFeature.typeId = te.getAttribute('id');\n                        dasFeature.typeCv = te.getAttribute('cvId');\n                    }\n                }\n                dasFeature.type = elementValue(feature, \"TYPE\");\n                if (!dasFeature.type && dasFeature.typeId) {\n                    dasFeature.type = dasFeature.typeId; // FIXME?\n                }\n                \n                dasFeature.method = elementValue(feature, \"METHOD\");\n                {\n                    var ori = elementValue(feature, \"ORIENTATION\");\n                    if (!ori) {\n                        ori = '0';\n                    }\n                    dasFeature.orientation = ori;\n                }\n                dasFeature.score = elementValue(feature, \"SCORE\");\n                dasFeature.links = dasLinksOf(feature);\n                dasFeature.notes = dasNotesOf(feature);\n                \n                var groups = feature.getElementsByTagName(\"GROUP\");\n                for (var gi  = 0; gi < groups.length; ++gi) {\n                    var groupXML = groups[gi];\n                    var dasGroup = new DASGroup();\n                    dasGroup.type = groupXML.getAttribute('type');\n                    dasGroup.id = groupXML.getAttribute('id');\n                    dasGroup.links = dasLinksOf(groupXML);\n                    dasGroup.notes = dasNotesOf(groupXML);\n                    if (!dasFeature.groups) {\n                        dasFeature.groups = new Array(dasGroup);\n                    } else {\n                        dasFeature.groups.push(dasGroup);\n                    }\n                }\n\n                // Magic notes.  Check with TAD before changing this.\n                if (dasFeature.notes) {\n                    for (var ni = 0; ni < dasFeature.notes.length; ++ni) {\n                        var n = dasFeature.notes[ni];\n                        if (n.indexOf('Genename=') == 0) {\n                            var gg = new DASGroup();\n                            gg.type='gene';\n                            gg.id = n.substring(9);\n                            if (!dasFeature.groups) {\n                                dasFeature.groups = new Array(gg);\n                            } else {\n                                dasFeature.groups.push(gg);\n                            }\n                        }\n                    }\n                }\n                \n                {\n                    var pec = feature.getElementsByTagName('PART');\n                    if (pec.length > 0) {\n                        var parts = [];\n                        for (var pi = 0; pi < pec.length; ++pi) {\n                            parts.push(pec[pi].getAttribute('id'));\n                        }\n                        dasFeature.parts = parts;\n                    }\n                }\n                {\n                    var pec = feature.getElementsByTagName('PARENT');\n                    if (pec.length > 0) {\n                        var parents = [];\n                        for (var pi = 0; pi < pec.length; ++pi) {\n                            parents.push(pec[pi].getAttribute('id'));\n                        }\n                        dasFeature.parents = parents;\n                    }\n                }\n                \n                features.push(dasFeature);\n            }\n        }\n                \n        callback(features, undefined, segmentMap);\n    },\n    function (err) {\n        callback([], err);\n    });\n}\n\nfunction DASAlignment(type) {\n    this.type = type;\n    this.objects = {};\n    this.blocks = [];\n}\n\nDASSource.prototype.alignments = function(segment, options, callback) {\n    var dasURI = this.dasBaseURI + 'alignment?query=' + segment;\n    this.doCrossDomainRequest(dasURI, function(responseXML) {\n        if (!responseXML) {\n            callback([], 'Failed request ' + dasURI);\n            return;\n        }\n\n        var alignments = [];\n        var aliXMLs = responseXML.getElementsByTagName('alignment');\n        for (var ai = 0; ai < aliXMLs.length; ++ai) {\n            var aliXML = aliXMLs[ai];\n            var ali = new DASAlignment(aliXML.getAttribute('alignType'));\n            var objXMLs = aliXML.getElementsByTagName('alignObject');\n            for (var oi = 0; oi < objXMLs.length; ++oi) {\n                var objXML = objXMLs[oi];\n                var obj = {\n                    id:          objXML.getAttribute('intObjectId'),\n                    accession:   objXML.getAttribute('dbAccessionId'),\n                    version:     objXML.getAttribute('objectVersion'),\n                    dbSource:    objXML.getAttribute('dbSource'),\n                    dbVersion:   objXML.getAttribute('dbVersion')\n                };\n                ali.objects[obj.id] = obj;\n            }\n            \n            var blockXMLs = aliXML.getElementsByTagName('block');\n            for (var bi = 0; bi < blockXMLs.length; ++bi) {\n                var blockXML = blockXMLs[bi];\n                var block = {\n                    order:      blockXML.getAttribute('blockOrder'),\n                    segments:   []\n                };\n                var segXMLs = blockXML.getElementsByTagName('segment');\n                for (var si = 0; si < segXMLs.length; ++si) {\n                    var segXML = segXMLs[si];\n                    var seg = {\n                        object:      segXML.getAttribute('intObjectId'),\n                        min:         segXML.getAttribute('start'),\n                        max:         segXML.getAttribute('end'),\n                        strand:      segXML.getAttribute('strand'),\n                        cigar:       elementValue(segXML, 'cigar')\n                    };\n                    block.segments.push(seg);\n                }\n                ali.blocks.push(block);\n            }       \n                    \n            alignments.push(ali);\n        }\n        callback(alignments);\n    });\n}\n\n\nfunction DASStylesheet() {\n    this.styles = [];\n}\n\nDASStylesheet.prototype.pushStyle = function(filters, zoom, style) {\n    if (!filters) {\n        filters = {type: 'default'};\n    }\n    var styleHolder = shallowCopy(filters);\n    if (zoom) {\n        styleHolder.zoom = zoom;\n    }\n    styleHolder.style = style;\n    this.styles.push(styleHolder);\n}\n\nfunction DASStyle() {\n}\n\nfunction parseGradient(grad) {\n    var steps = grad.getAttribute('steps');\n    if (steps) {\n        steps = steps|0;\n    } else {\n        steps = 50;\n    }\n\n    var stops = [];\n    var colors = [];\n    var se = grad.getElementsByTagName('STOP');\n    for (var si = 0; si < se.length; ++si) {\n        var stop = se[si];\n        stops.push(1.0 * stop.getAttribute('score'));\n        colors.push(stop.firstChild.nodeValue);\n    }\n\n    return makeColourSteps(steps, stops, colors);\n}\n\nDASSource.prototype.stylesheet = function(successCB, failureCB) {\n    var dasURI, creds = this.credentials;\n    if (this.stylesheet_uri) {\n        dasURI = this.stylesheet_uri;\n        creds = false;\n    } else {\n        dasURI = this.dasBaseURI + 'stylesheet';\n    }\n\n    this.getURI(dasURI).then(function(dasURI) {\n        doCrossDomainRequest(dasURI, function(responseXML) {\n            if (!responseXML) {\n                if (failureCB) {\n                    failureCB();\n                } \n                return;\n            }\n            var stylesheet = new DASStylesheet();\n            var typeXMLs = responseXML.getElementsByTagName('TYPE');\n            for (var i = 0; i < typeXMLs.length; ++i) {\n                var typeStyle = typeXMLs[i];\n            \n                var filter = {};\n                filter.type = typeStyle.getAttribute('id'); // Am I right in thinking that this makes DASSTYLE XML invalid?  Ugh.\n                filter.label = typeStyle.getAttribute('label');\n                filter.method = typeStyle.getAttribute('method');\n                var glyphXMLs = typeStyle.getElementsByTagName('GLYPH');\n                for (var gi = 0; gi < glyphXMLs.length; ++gi) {\n                    var glyphXML = glyphXMLs[gi];\n                    var zoom = glyphXML.getAttribute('zoom');\n                    var glyph = childElementOf(glyphXML);\n                    var style = new DASStyle();\n                    style.glyph = glyph.localName;\n                    var child = glyph.firstChild;\n                    \n                    while (child) {\n                        if (child.nodeType == Node.ELEMENT_NODE) {\n                            if (child.localName == 'BGGRAD') {\n                                style[child.localName] = parseGradient(child);\n                            } else {      \n                                style[child.localName] = child.firstChild.nodeValue;\n                            }\n                        }\n                        child = child.nextSibling;\n                    }\n                    stylesheet.pushStyle(filter, zoom, style);\n                }\n            }\n            successCB(stylesheet);\n        }, creds);\n    }).catch(function(err) {\n        console.log(err);\n        failureCB();\n    });\n}\n\n//\n// sources command\n// \n\nfunction DASRegistry(uri, opts)\n{\n    opts = opts || {};\n    this.uri = uri;\n    this.opts = opts;   \n}\n\nDASRegistry.prototype.sources = function(callback, failure, opts)\n{\n    if (!opts) {\n        opts = {};\n    }\n\n    var filters = [];\n    if (opts.taxon) {\n        filters.push('organism=' + opts.taxon);\n    }\n    if (opts.auth) {\n        filters.push('authority=' + opts.auth);\n    }\n    if (opts.version) {\n        filters.push('version=' + opts.version);\n    }\n    var quri = this.uri;\n    if (filters.length > 0) {\n        quri = quri + '?' + filters.join('&');   // '&' as a separator to hack around dasregistry.org bug.\n    }\n\n    doCrossDomainRequest(quri, function(responseXML) {\n        if (!responseXML && failure) {\n            failure();\n            return;\n        }\n\n        var sources = [];       \n        var sourceXMLs = responseXML.getElementsByTagName('SOURCE');\n        for (var si = 0; si < sourceXMLs.length; ++si) {\n            var sourceXML = sourceXMLs[si];\n            var versionXMLs = sourceXML.getElementsByTagName('VERSION');\n            if (versionXMLs.length < 1) {\n                continue;\n            }\n            var versionXML = versionXMLs[0];\n\n            var coordXMLs = versionXML.getElementsByTagName('COORDINATES');\n            var coords = [];\n            for (var ci = 0; ci < coordXMLs.length; ++ci) {\n                var coordXML = coordXMLs[ci];\n                var coord = new DASCoords();\n                coord.auth = coordXML.getAttribute('authority');\n                coord.taxon = coordXML.getAttribute('taxid');\n                coord.version = coordXML.getAttribute('version');\n                coords.push(coord);\n            }\n            \n            var caps = [];\n            var capXMLs = versionXML.getElementsByTagName('CAPABILITY');\n            var uri;\n            for (var ci = 0; ci < capXMLs.length; ++ci) {\n                var capXML = capXMLs[ci];\n                \n                caps.push(capXML.getAttribute('type'));\n\n                if (capXML.getAttribute('type') == 'das1:features') {\n                    var fep = capXML.getAttribute('query_uri');\n                    uri = fep.substring(0, fep.length - ('features'.length));\n                }\n            }\n\n            var props = {};\n            var propXMLs = versionXML.getElementsByTagName('PROP');\n            for (var pi = 0; pi < propXMLs.length; ++pi) {\n                pusho(props, propXMLs[pi].getAttribute('name'), propXMLs[pi].getAttribute('value'));\n            }\n            \n            if (uri) {\n                var source = new DASSource(uri, {\n                    source_uri: sourceXML.getAttribute('uri'),\n                    name:  sourceXML.getAttribute('title'),\n                    desc:  sourceXML.getAttribute('description'),\n                    coords: coords,\n                    props: props,\n                    capabilities: caps\n                });\n                sources.push(source);\n            }\n        }\n        \n        callback(sources);\n    });\n}\n\n\n//\n// Utility functions\n//\n\nfunction elementValue(element, tag)\n{\n    var children = element.getElementsByTagName(tag);\n    if (children.length > 0 && children[0].firstChild) {\n        var c = children[0];\n        if (c.childNodes.length == 1) {\n            return c.firstChild.nodeValue;\n        } else {\n            var s = '';\n            for (var ni = 0; ni < c.childNodes.length; ++ni) {\n                s += c.childNodes[ni].nodeValue;\n            }\n            return s;\n        }\n\n    } else {\n        return null;\n    }\n}\n\nfunction childElementOf(element)\n{\n    if (element.hasChildNodes()) {\n        var child = element.firstChild;\n        do {\n            if (child.nodeType == Node.ELEMENT_NODE) {\n                return child;\n            } \n            child = child.nextSibling;\n        } while (child != null);\n    }\n    return null;\n}\n\n\nfunction dasLinksOf(element)\n{\n    var links = new Array();\n    var maybeLinkChilden = element.getElementsByTagName('LINK');\n    for (var ci = 0; ci < maybeLinkChilden.length; ++ci) {\n        var linkXML = maybeLinkChilden[ci];\n        if (linkXML.parentNode == element) {\n            links.push(new DASLink(linkXML.firstChild ? linkXML.firstChild.nodeValue : 'Unknown', linkXML.getAttribute('href')));\n        }\n    }\n    \n    return links;\n}\n\nfunction dasNotesOf(element)\n{\n    var notes = [];\n    var maybeNotes = element.getElementsByTagName('NOTE');\n    for (var ni = 0; ni < maybeNotes.length; ++ni) {\n        if (maybeNotes[ni].firstChild) {\n            notes.push(maybeNotes[ni].firstChild.nodeValue);\n        }\n    }\n    return notes;\n}\n\nfunction doCrossDomainRequest(url, handler, credentials, custAuth) {\n    // TODO: explicit error handlers?\n\n    if (window.XDomainRequest) {\n        var req = new XDomainRequest();\n        req.onload = function() {\n            var dom = new ActiveXObject(\"Microsoft.XMLDOM\");\n            dom.async = false;\n            dom.loadXML(req.responseText);\n            handler(dom);\n        }\n        req.open(\"get\", url);\n        req.send();\n    } else {\n        try {\n            var req = new XMLHttpRequest();\n            var timeout = setTimeout(\n                function() {\n                    console.log('timing out '  + url);\n                    req.abort();\n                    handler(null, req);\n                },\n                5000\n            );\n\n            req.ontimeout = function() {\n                console.log('timeout on ' + url);\n            };\n\n            req.onreadystatechange = function() {\n                if (req.readyState == 4) {\n                    clearTimeout(timeout);\n                    if (req.status >= 200 || req.status == 0) {\n                        handler(req.responseXML, req);\n                    }\n                }\n            };\n            req.open(\"get\", url, true);\n            // IE10/11 fix: The timeout property may be set only in the time interval between a call to the open method\n            //              and the first call to the send method.\n            req.timeout = 5000;\n            if (credentials) {\n                req.withCredentials = true;\n            }\n            if (custAuth) {\n                req.setRequestHeader('X-DAS-Authorisation', custAuth);\n            }\n            req.overrideMimeType('text/xml');\n            req.setRequestHeader('Accept', 'application/xml,*/*');\n            req.send();\n        } catch (e) {\n            handler(null, req, e);\n        }\n    }\n}\n\nDASSource.prototype.doCrossDomainRequest = function(url, handler, errHandler) {\n    var custAuth;\n    if (this.xUser) {\n        custAuth = 'Basic ' + btoa(this.xUser + ':' + this.xPass);\n    }\n\n    try {\n        return doCrossDomainRequest(url, handler, this.credentials, custAuth);\n    } catch (err) {\n        if (errHandler) {\n            errHandler(err);\n        } else {\n            throw err;\n        }\n    }\n}\n\nfunction isDasBooleanTrue(s) {\n    s = ('' + s).toLowerCase();\n    return s==='yes' || s==='true';\n}\n\nfunction isDasBooleanNotFalse(s) {\n    if (!s)\n        return false;\n\n    s = ('' + s).toLowerCase();\n    return s!=='no' || s!=='false';\n}\n\nfunction copyStylesheet(ss) {\n    var nss = shallowCopy(ss);\n    nss.styles = [];\n    for (var si = 0; si < ss.styles.length; ++si) {\n        var sh = nss.styles[si] = shallowCopy(ss.styles[si]);\n        sh._methodRE = sh._labelRE = sh._typeRE = undefined;\n        sh.style = shallowCopy(sh.style);\n        sh.style.id = undefined;\n        sh.style._gradient = undefined;\n    }\n    return nss;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        DASGroup: DASGroup,\n        DASFeature: DASFeature,\n        DASStylesheet: DASStylesheet,\n        DASStyle: DASStyle,\n        DASSource: DASSource,\n        DASSegment: DASSegment,\n        DASRegistry: DASRegistry,\n        DASSequence: DASSequence,\n        DASLink: DASLink,\n\n        isDasBooleanTrue: isDasBooleanTrue,\n        isDasBooleanNotFalse: isDasBooleanNotFalse,\n        copyStylesheet: copyStylesheet,\n        coordsMatch: coordsMatch\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2014\n//\n// encode.js: interface for ENCODE DCC services\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var Promise = require('es6-promise').Promise;\n}\n\nfunction lookupEncodeURI(uri, json) {\n    if (uri.indexOf('?') < 0)\n        uri = uri + '?soft=true';\n\n    return new Promise(function(accept, reject) {\n        var req = new XMLHttpRequest();\n        req.onreadystatechange = function() {\n            if (req.readyState == 4) {\n                if (req.status >= 300) {\n                    reject('Error code ' + req.status);\n                } else {\n                    var resp = JSON.parse(req.response);\n                    accept(json ? resp : resp.location);\n                }\n            }\n        };\n    \n        req.open('GET', uri, true);\n        req.setRequestHeader('Accept', 'application/json');\n        req.responseType = 'text';\n        req.send();\n    });\n}\n\nfunction EncodeURLHolder(url) {\n    this.rawurl = url;\n}\n\nEncodeURLHolder.prototype.getURLPromise = function() {\n    if (this.urlPromise && this.urlPromiseValidity > Date.now()) {\n        return this.urlPromise;\n    } else {\n        this.urlPromise = lookupEncodeURI(this.rawurl, true).then(function(resp) {\n            return resp.location;\n        });\n        this.urlPromiseValidity = Date.now() + (12 * 3600 * 1000);\n        return this.urlPromise;\n    }\n}\n\nfunction EncodeFetchable(url, start, end, opts) {\n    if (!opts) {\n        if (typeof start === 'object') {\n            opts = start;\n            start = undefined;\n        } else {\n            opts = {};\n        }\n    }\n\n    this.url = (typeof url === 'string' ? new EncodeURLHolder(url) : url);\n    this.start = start || 0;\n    if (end) {\n        this.end = end;\n    }\n    this.opts = opts;\n}\n\n\n\nEncodeFetchable.prototype.slice = function(s, l) {\n    if (s < 0) {\n        throw 'Bad slice ' + s;\n    }\n\n    var ns = this.start, ne = this.end;\n    if (ns && s) {\n        ns = ns + s;\n    } else {\n        ns = s || ns;\n    }\n    if (l && ns) {\n        ne = ns + l - 1;\n    } else {\n        ne = ne || l - 1;\n    }\n    return new EncodeFetchable(this.url, ns, ne, this.opts);\n}\n\nEncodeFetchable.prototype.fetchAsText = function(callback) {\n    var self = this;\n    var req = new XMLHttpRequest();\n    var length;\n    self.url.getURLPromise().then(function(url) {\n        req.open('GET', url, true);\n\n        if (self.end) {\n            if (self.end - self.start > 100000000) {\n                throw 'Monster fetch!';\n            }\n            req.setRequestHeader('Range', 'bytes=' + self.start + '-' + self.end);\n            length = self.end - self.start + 1;\n        }\n\n        req.onreadystatechange = function() {\n            if (req.readyState == 4) {\n                if (req.status == 200 || req.status == 206) {\n                    return callback(req.responseText);\n                } else {\n                    return callback(null);\n                }\n            }\n        };\n        if (self.opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send();\n    }).catch(function(err) {\n        console.log(err);\n        return callback(null);\n    });\n}\n\nEncodeFetchable.prototype.salted = function() {\n    return this;\n}\n\nEncodeFetchable.prototype.fetch = function(callback, attempt, truncatedLength) {\n    var self = this;\n\n    attempt = attempt || 1;\n    if (attempt > 3) {\n        return callback(null);\n    }\n\n    self.url.getURLPromise().then(function (url) {\n        var req = new XMLHttpRequest();\n        var length;\n        req.open('GET', url, true);\n        req.overrideMimeType('text/plain; charset=x-user-defined');\n        if (self.end) {\n            if (self.end - self.start > 100000000) {\n                throw 'Monster fetch!';\n            }\n            req.setRequestHeader('Range', 'bytes=' + self.start + '-' + self.end);\n            length = self.end - self.start + 1;\n        }\n        req.responseType = 'arraybuffer';\n        req.onreadystatechange = function() {\n            if (req.readyState == 4) {\n                if (req.status == 200 || req.status == 206) {\n                    if (req.response) {\n                        var bl = req.response.byteLength;\n                        if (length && length != bl && (!truncatedLength || bl != truncatedLength)) {\n                            return self.fetch(callback, attempt + 1, bl);\n                        } else {\n                            return callback(req.response);\n                        }\n                    } else if (req.mozResponseArrayBuffer) {\n                        return callback(req.mozResponseArrayBuffer);\n                    } else {\n                        var r = req.responseText;\n                        if (length && length != r.length && (!truncatedLength || r.length != truncatedLength)) {\n                            return self.fetch(callback, attempt + 1, r.length);\n                        } else {\n                            return callback(bstringToBuffer(req.responseText));\n                        }\n                    }\n                } else {\n                    return self.fetch(callback, attempt + 1);\n                }\n            }\n        };\n        if (self.opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send();\n    }).catch(function(err) {\n        console.log(err);\n    });\n}\n\nfunction bstringToBuffer(result) {\n    if (!result) {\n        return null;\n    }\n\n    var ba = new Uint8Array(result.length);\n    for (var i = 0; i < ba.length; ++i) {\n        ba[i] = result.charCodeAt(i);\n    }\n    return ba.buffer;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        lookupEncodeURI: lookupEncodeURI,\n        EncodeFetchable: EncodeFetchable\n    };\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2014\n//\n// fetchworker.js\n//\n\n\"use strict\";\n\nvar bin = require('./bin');\nvar bam = require('./bam');\nvar bigwig = require('./bigwig');\nvar encode = require('./encode');\nvar utils = require('./utils');\n\nvar Promise = require('es6-promise').Promise;\n\nvar connections = {};\nvar resolveResolvers = {};\n\nvar idSeed = 0;\n\nglobal.newID = function() {\n    return 'cn' + (++idSeed);\n}\n\npostMessage({tag: 'init'});\n\nself.onmessage = function(event) {\n    var d = event.data;\n    var command = event.data.command;\n    var tag = event.data.tag;\n\n    if (!command) {\n        var rr = resolveResolvers[tag];\n        if (rr) {\n            if (d.err) {\n                rr.reject(d.err);\n            } else {\n                rr.resolve(d.url);\n            }\n                \n            delete resolveResolvers[tag];\n        }\n    } else if (command === 'connectBAM') {\n        var id = newID();\n        var resolver;\n        if (d.resolver) {\n            resolver = proxyResolver(d.resolver);\n        }\n        var bamF, baiF, indexChunks;\n        if (d.blob) {\n            bamF = new bin.BlobFetchable(d.blob);\n            baiF = new bin.BlobFetchable(d.indexBlob);\n        } else {\n            bamF = new bin.URLFetchable(d.uri, {credentials: d.credentials, resolver: resolver});\n            baiF = new bin.URLFetchable(d.indexUri, {credentials: d.credentials, resolver: resolver});\n            indexChunks = d.indexChunks;\n        }\n\n        bam.makeBam(bamF, baiF, indexChunks, function(bamObj, err) {\n            if (bamObj) {\n                connections[id] = new BAMWorkerFetcher(bamObj);\n                postMessage({tag: tag, result: id});\n            } else {\n                postMessage({tag: tag, error: err || \"Couldn't fetch BAM\"});\n            }\n        });\n    } else if (command === 'connectBBI') {\n        var id = newID();\n        var resolver;\n        if (d.resolver) {\n            resolver = proxyResolver(d.resolver);\n        }\n        var bbi;\n        if (d.blob) {\n            bbi = new bin.BlobFetchable(d.blob);\n        } else if (d.transport == 'encode') {\n            bbi = new encode.EncodeFetchable(d.uri, {credentials: d.credentials});\n        } else {\n            bbi = new bin.URLFetchable(d.uri, {credentials: d.credentials, resolver: resolver});\n        }\n\n        bigwig.makeBwg(bbi, function(bwg, err) {\n            if (bwg) {\n                connections[id] = new BBIWorkerFetcher(bwg);\n                postMessage({tag: tag, result: id});\n            } else {\n                postMessage({tag: tag, error: err || \"Couldn't fetch BBI\"});\n            }\n        }, d.uri);\n    } else if (command === 'textxhr') {\n        utils.textXHR(d.uri, function(resp, err) {\n            if (resp) {\n                postMessage({tag: tag, result: resp});\n            } else {\n                postMessage({tag: tag, err: err || \"Couldn't fetch resource\"});\n            }\n        });\n    } else if (command === 'fetch') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.fetch(d.tag, d.chr, d.min, d.max, d.zoom, d.opts);\n    } else if (command === 'leap') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.leap(d.tag, d.chr, d.pos, d.dir);\n    } else if (command === 'quantLeap') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.quantLeap(d.tag, d.chr, d.pos, d.dir, d.threshold, d.under);\n    } else if (command === 'meta') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.meta(d.tag);\n    } else if (command === 'search') {\n        var con = connections[event.data.connection];\n        if (!con) {\n            return postMessage({tag: tag, error: 'No such connection: ' + event.data.connection});\n        }\n\n        con.search(d.tag, d.query, d.index);\n    } else if (command === 'date') {\n        return postMessage({tag: tag, result: Date.now()|0});\n    } else {\n        postMessage({tag: tag, error: 'Bad command ' + command});\n    }\n}\n\nfunction BAMWorkerFetcher(bam) {\n    this.bam = bam;\n}\n\nBAMWorkerFetcher.prototype.fetch = function(tag, chr, min, max, zoom, opts) {\n    opts = opts || {};\n    this.bam.fetch(chr, min, max, function(records, err) {\n        if (records) {\n            postMessage({tag: tag, result: records, time: Date.now()|0});\n        } else {\n            postMessage({tag: tag, error: err});\n        }\n    }, opts);\n}\n\nfunction BBIWorkerFetcher(bbi) {\n    this.bbi = bbi;\n}\n\nBBIWorkerFetcher.prototype.fetch = function(tag, chr, min, max, zoom) {\n    if (typeof(zoom) !== 'number')\n        zoom = -1;\n\n    var data;\n    if (zoom < 0) {\n        data = this.bbi.getUnzoomedView();\n    } else {\n        data = this.bbi.getZoomedView(zoom);\n    }\n\n    data.readWigData(chr, min, max, function(features) {\n        postMessage({tag: tag, result: features});\n    });\n}\n\nBBIWorkerFetcher.prototype.meta = function(tag) {\n    var scales = [1];\n    for (var z = 0; z < this.bbi.zoomLevels.length; ++z) {\n        scales.push(this.bbi.zoomLevels[z].reduction);\n    }\n\n    var thisB = this;\n    var meta = {type: this.bbi.type,\n                zoomLevels: scales,\n                fieldCount: this.bbi.fieldCount,\n                definedFieldCount: this.bbi.definedFieldCount,\n                schema: this.bbi.schema};\n    if (this.bbi.type === 'bigbed') {\n        this.bbi.getExtraIndices(function(ei) {\n            if (ei) {\n                thisB.extraIndices = ei;\n                meta.extraIndices = ei.map(function(i) {return i.field});\n            }\n            postMessage({tag: tag, result: meta});\n        });\n    } else {\n        postMessage({tag: tag, result: meta});\n    }\n}\n\nBBIWorkerFetcher.prototype.leap = function(tag, chr, pos, dir) {\n    this.bbi.getUnzoomedView().getFirstAdjacent(chr, pos, dir, function(result, err) {\n        postMessage({tag: tag, result: result, error: err});\n    });\n}\n\nBBIWorkerFetcher.prototype.quantLeap = function(tag, chr, pos, dir, threshold, under) {\n    this.bbi.thresholdSearch(chr, pos, dir, threshold, function(result, err) {\n        postMessage({tag: tag, result: result, error: err});\n    });\n}\n\nBBIWorkerFetcher.prototype.search = function(tag, query, index) {\n    var is = this.extraIndices[0];\n    is.lookup(query, function(result, err) {\n        postMessage({tag: tag, result: result, error: err});\n    });\n}\n\nfunction proxyResolver(tag) {\n    return function(url) {\n        var lid = newID();\n        return new Promise(function (resolve, reject) {\n            resolveResolvers[lid] = {resolve: resolve, reject: reject};\n            postMessage({tag: lid,\n                         cmd: 'resolve',\n                         resolver: tag,\n                         url: url});\n        });\n    }\n}\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2011\n//\n// lh3utils.js: common support for lh3's file formats\n//\n\nif (typeof(require) !== 'undefined') {\n    var jszlib = require('jszlib');\n    var jszlib_inflate_buffer = jszlib.inflateBuffer;\n    var arrayCopy = jszlib.arrayCopy;\n}\n\nfunction Vob(b, o) {\n    this.block = b;\n    this.offset = o;\n}\n\nVob.prototype.toString = function() {\n    return '' + this.block + ':' + this.offset;\n}\n\nfunction readVob(ba, offset, allowZero) {\n    var block = ((ba[offset+6] & 0xff) * 0x100000000) + ((ba[offset+5] & 0xff) * 0x1000000) + ((ba[offset+4] & 0xff) * 0x10000) + ((ba[offset+3] & 0xff) * 0x100) + ((ba[offset+2] & 0xff));\n    var bint = (ba[offset+1] << 8) | (ba[offset]);\n    if (block == 0 && bint == 0 && !allowZero) {\n        return null;  // Should only happen in the linear index?\n    } else {\n        return new Vob(block, bint);\n    }\n}\n\nfunction unbgzf(data, lim) {\n    lim = Math.min(lim || 1, data.byteLength - 50);\n    var oBlockList = [];\n    var ptr = [0];\n    var totalSize = 0;\n\n    while (ptr[0] < lim) {\n        var ba = new Uint8Array(data, ptr[0], 12); // FIXME is this enough for all credible BGZF block headers?\n        var xlen = (ba[11] << 8) | (ba[10]);\n        // dlog('xlen[' + (ptr[0]) +']=' + xlen);\n        var unc = jszlib_inflate_buffer(data, 12 + xlen + ptr[0], Math.min(65536, data.byteLength - 12 - xlen - ptr[0]), ptr);\n        ptr[0] += 8;\n        totalSize += unc.byteLength;\n        oBlockList.push(unc);\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0];\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = new Uint8Array(oBlockList[i]);\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nfunction Chunk(minv, maxv) {\n    this.minv = minv; this.maxv = maxv;\n}\n\n\n//\n// Binning (transliterated from SAM1.3 spec)\n//\n\n/* calculate bin given an alignment covering [beg,end) (zero-based, half-close-half-open) */\nfunction reg2bin(beg, end)\n{\n    --end;\n    if (beg>>14 == end>>14) return ((1<<15)-1)/7 + (beg>>14);\n    if (beg>>17 == end>>17) return ((1<<12)-1)/7 + (beg>>17);\n    if (beg>>20 == end>>20) return ((1<<9)-1)/7 + (beg>>20);\n    if (beg>>23 == end>>23) return ((1<<6)-1)/7 + (beg>>23);\n    if (beg>>26 == end>>26) return ((1<<3)-1)/7 + (beg>>26);\n    return 0;\n}\n\n/* calculate the list of bins that may overlap with region [beg,end) (zero-based) */\nvar MAX_BIN = (((1<<18)-1)/7);\nfunction reg2bins(beg, end) \n{\n    var i = 0, k, list = [];\n    --end;\n    list.push(0);\n    for (k = 1 + (beg>>26); k <= 1 + (end>>26); ++k) list.push(k);\n    for (k = 9 + (beg>>23); k <= 9 + (end>>23); ++k) list.push(k);\n    for (k = 73 + (beg>>20); k <= 73 + (end>>20); ++k) list.push(k);\n    for (k = 585 + (beg>>17); k <= 585 + (end>>17); ++k) list.push(k);\n    for (k = 4681 + (beg>>14); k <= 4681 + (end>>14); ++k) list.push(k);\n    return list;\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        unbgzf: unbgzf,\n        readVob: readVob,\n        reg2bin: reg2bin,\n        reg2bins: reg2bins,\n        Chunk: Chunk\n    };\n}\n","/*\r\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\r\n * in FIPS 180-1\r\n * Version 2.2 Copyright Paul Johnston 2000 - 2009.\r\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\r\n * Distributed under the BSD License\r\n * See http://pajhome.org.uk/crypt/md5 for details.\r\n */\r\n\r\n \"use strict\";\r\n\r\n/*\r\n * Configurable variables. You may need to tweak these to be compatible with\r\n * the server-side, but the defaults work in most cases.\r\n */\r\nvar hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */\r\nvar b64pad  = \"\"; /* base-64 pad character. \"=\" for strict RFC compliance   */\r\n\r\n/*\r\n * These are the functions you'll usually want to call\r\n * They take string arguments and return either hex or base-64 encoded strings\r\n */\r\nfunction hex_sha1(s)    { return rstr2hex(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction b64_sha1(s)    { return rstr2b64(rstr_sha1(str2rstr_utf8(s))); }\r\nfunction any_sha1(s, e) { return rstr2any(rstr_sha1(str2rstr_utf8(s)), e); }\r\nfunction hex_hmac_sha1(k, d)\r\n  { return rstr2hex(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction b64_hmac_sha1(k, d)\r\n  { return rstr2b64(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d))); }\r\nfunction any_hmac_sha1(k, d, e)\r\n  { return rstr2any(rstr_hmac_sha1(str2rstr_utf8(k), str2rstr_utf8(d)), e); }\r\n\r\n/*\r\n * Perform a simple self-test to see if the VM is working\r\n */\r\nfunction sha1_vm_test()\r\n{\r\n  return hex_sha1(\"abc\").toLowerCase() == \"a9993e364706816aba3e25717850c26c9cd0d89d\";\r\n}\r\n\r\n/*\r\n * Calculate the SHA1 of a raw string\r\n */\r\nfunction rstr_sha1(s)\r\n{\r\n  return binb2rstr(binb_sha1(rstr2binb(s), s.length * 8));\r\n}\r\n\r\n/*\r\n * Calculate the HMAC-SHA1 of a key and some data (raw strings)\r\n */\r\nfunction rstr_hmac_sha1(key, data)\r\n{\r\n  var bkey = rstr2binb(key);\r\n  if(bkey.length > 16) bkey = binb_sha1(bkey, key.length * 8);\r\n\r\n  var ipad = Array(16), opad = Array(16);\r\n  for(var i = 0; i < 16; i++)\r\n  {\r\n    ipad[i] = bkey[i] ^ 0x36363636;\r\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\r\n  }\r\n\r\n  var hash = binb_sha1(ipad.concat(rstr2binb(data)), 512 + data.length * 8);\r\n  return binb2rstr(binb_sha1(opad.concat(hash), 512 + 160));\r\n}\r\n\r\n/*\r\n * Convert a raw string to a hex string\r\n */\r\nfunction rstr2hex(input)\r\n{\r\n  // try { hexcase } catch(e) { hexcase=0; }\r\n  var hex_tab = hexcase ? \"0123456789ABCDEF\" : \"0123456789abcdef\";\r\n  var output = \"\";\r\n  var x;\r\n  for(var i = 0; i < input.length; i++)\r\n  {\r\n    x = input.charCodeAt(i);\r\n    output += hex_tab.charAt((x >>> 4) & 0x0F)\r\n           +  hex_tab.charAt( x        & 0x0F);\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to a base-64 string\r\n */\r\nfunction rstr2b64(input)\r\n{\r\n  // try { b64pad } catch(e) { b64pad=''; }\r\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\r\n  var output = \"\";\r\n  var len = input.length;\r\n  for(var i = 0; i < len; i += 3)\r\n  {\r\n    var triplet = (input.charCodeAt(i) << 16)\r\n                | (i + 1 < len ? input.charCodeAt(i+1) << 8 : 0)\r\n                | (i + 2 < len ? input.charCodeAt(i+2)      : 0);\r\n    for(var j = 0; j < 4; j++)\r\n    {\r\n      if(i * 8 + j * 6 > input.length * 8) output += b64pad;\r\n      else output += tab.charAt((triplet >>> 6*(3-j)) & 0x3F);\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an arbitrary string encoding\r\n */\r\nfunction rstr2any(input, encoding)\r\n{\r\n  var divisor = encoding.length;\r\n  var remainders = Array();\r\n  var i, q, x, quotient;\r\n\r\n  /* Convert to an array of 16-bit big-endian values, forming the dividend */\r\n  var dividend = Array(Math.ceil(input.length / 2));\r\n  for(i = 0; i < dividend.length; i++)\r\n  {\r\n    dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);\r\n  }\r\n\r\n  /*\r\n   * Repeatedly perform a long division. The binary array forms the dividend,\r\n   * the length of the encoding is the divisor. Once computed, the quotient\r\n   * forms the dividend for the next step. We stop when the dividend is zero.\r\n   * All remainders are stored for later use.\r\n   */\r\n  while(dividend.length > 0)\r\n  {\r\n    quotient = Array();\r\n    x = 0;\r\n    for(i = 0; i < dividend.length; i++)\r\n    {\r\n      x = (x << 16) + dividend[i];\r\n      q = Math.floor(x / divisor);\r\n      x -= q * divisor;\r\n      if(quotient.length > 0 || q > 0)\r\n        quotient[quotient.length] = q;\r\n    }\r\n    remainders[remainders.length] = x;\r\n    dividend = quotient;\r\n  }\r\n\r\n  /* Convert the remainders to the output string */\r\n  var output = \"\";\r\n  for(i = remainders.length - 1; i >= 0; i--)\r\n    output += encoding.charAt(remainders[i]);\r\n\r\n  /* Append leading zero equivalents */\r\n  var full_length = Math.ceil(input.length * 8 /\r\n                                    (Math.log(encoding.length) / Math.log(2)))\r\n  for(i = output.length; i < full_length; i++)\r\n    output = encoding[0] + output;\r\n\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-8.\r\n * For efficiency, this assumes the input is valid utf-16.\r\n */\r\nfunction str2rstr_utf8(input)\r\n{\r\n  var output = \"\";\r\n  var i = -1;\r\n  var x, y;\r\n\r\n  while(++i < input.length)\r\n  {\r\n    /* Decode utf-16 surrogate pairs */\r\n    x = input.charCodeAt(i);\r\n    y = i + 1 < input.length ? input.charCodeAt(i + 1) : 0;\r\n    if(0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF)\r\n    {\r\n      x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);\r\n      i++;\r\n    }\r\n\r\n    /* Encode output as utf-8 */\r\n    if(x <= 0x7F)\r\n      output += String.fromCharCode(x);\r\n    else if(x <= 0x7FF)\r\n      output += String.fromCharCode(0xC0 | ((x >>> 6 ) & 0x1F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0xFFFF)\r\n      output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n    else if(x <= 0x1FFFFF)\r\n      output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),\r\n                                    0x80 | ((x >>> 12) & 0x3F),\r\n                                    0x80 | ((x >>> 6 ) & 0x3F),\r\n                                    0x80 | ( x         & 0x3F));\r\n  }\r\n  return output;\r\n}\r\n\r\n/*\r\n * Encode a string as utf-16\r\n */\r\nfunction str2rstr_utf16le(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode( input.charCodeAt(i)        & 0xFF,\r\n                                  (input.charCodeAt(i) >>> 8) & 0xFF);\r\n  return output;\r\n}\r\n\r\nfunction str2rstr_utf16be(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length; i++)\r\n    output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF,\r\n                                   input.charCodeAt(i)        & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert a raw string to an array of big-endian words\r\n * Characters >255 have their high-byte silently ignored.\r\n */\r\nfunction rstr2binb(input)\r\n{\r\n  var output = Array(input.length >> 2);\r\n  for(var i = 0; i < output.length; i++)\r\n    output[i] = 0;\r\n  for(var i = 0; i < input.length * 8; i += 8)\r\n    output[i>>5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Convert an array of big-endian words to a string\r\n */\r\nfunction binb2rstr(input)\r\n{\r\n  var output = \"\";\r\n  for(var i = 0; i < input.length * 32; i += 8)\r\n    output += String.fromCharCode((input[i>>5] >>> (24 - i % 32)) & 0xFF);\r\n  return output;\r\n}\r\n\r\n/*\r\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\r\n */\r\nfunction binb_sha1(x, len)\r\n{\r\n  /* append padding */\r\n  x[len >> 5] |= 0x80 << (24 - len % 32);\r\n  x[((len + 64 >> 9) << 4) + 15] = len;\r\n\r\n  var w = Array(80);\r\n  var a =  1732584193;\r\n  var b = -271733879;\r\n  var c = -1732584194;\r\n  var d =  271733878;\r\n  var e = -1009589776;\r\n\r\n  for(var i = 0; i < x.length; i += 16)\r\n  {\r\n    var olda = a;\r\n    var oldb = b;\r\n    var oldc = c;\r\n    var oldd = d;\r\n    var olde = e;\r\n\r\n    for(var j = 0; j < 80; j++)\r\n    {\r\n      if(j < 16) w[j] = x[i + j];\r\n      else w[j] = bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);\r\n      var t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),\r\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\r\n      e = d;\r\n      d = c;\r\n      c = bit_rol(b, 30);\r\n      b = a;\r\n      a = t;\r\n    }\r\n\r\n    a = safe_add(a, olda);\r\n    b = safe_add(b, oldb);\r\n    c = safe_add(c, oldc);\r\n    d = safe_add(d, oldd);\r\n    e = safe_add(e, olde);\r\n  }\r\n  return Array(a, b, c, d, e);\r\n\r\n}\r\n\r\n/*\r\n * Perform the appropriate triplet combination function for the current\r\n * iteration\r\n */\r\nfunction sha1_ft(t, b, c, d)\r\n{\r\n  if(t < 20) return (b & c) | ((~b) & d);\r\n  if(t < 40) return b ^ c ^ d;\r\n  if(t < 60) return (b & c) | (b & d) | (c & d);\r\n  return b ^ c ^ d;\r\n}\r\n\r\n/*\r\n * Determine the appropriate additive constant for the current iteration\r\n */\r\nfunction sha1_kt(t)\r\n{\r\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\r\n         (t < 60) ? -1894007588 : -899497514;\r\n}\r\n\r\n/*\r\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\r\n * to work around bugs in some JS interpreters.\r\n */\r\nfunction safe_add(x, y)\r\n{\r\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\r\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\r\n  return (msw << 16) | (lsw & 0xFFFF);\r\n}\r\n\r\n/*\r\n * Bitwise rotate a 32-bit number to the left.\r\n */\r\nfunction bit_rol(num, cnt)\r\n{\r\n  return (num << cnt) | (num >>> (32 - cnt));\r\n}\r\n\r\nif (typeof(module) !== 'undefined') {\r\n  module.exports = {\r\n    b64_sha1: b64_sha1,\r\n    hex_sha1: hex_sha1\r\n  }\r\n}\r\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// spans.js: JavaScript Intset/Location port.\n//\n\n\"use strict\";\n\n\nfunction Range(min, max)\n{\n    if (typeof(min) != 'number' || typeof(max) != 'number')\n        throw 'Bad range ' + min + ',' + max;\n    this._min = min;\n    this._max = max;\n}\n\nRange.prototype.min = function() {\n    return this._min;\n}\n\nRange.prototype.max = function() {\n    return this._max;\n}\n\nRange.prototype.contains = function(pos) {\n    return pos >= this._min && pos <= this._max;\n}\n\nRange.prototype.isContiguous = function() {\n    return true;\n}\n\nRange.prototype.ranges = function() {\n    return [this];\n}\n\nRange.prototype._pushRanges = function(ranges) {\n    ranges.push(this);\n}\n\nRange.prototype.toString = function() {\n    return '[' + this._min + '-' + this._max + ']';\n}\n\nfunction _Compound(ranges) {\n    // given: a set of unsorted possibly overlapping ranges\n    // sort the input ranges\n    var sorted = ranges.sort(_rangeOrder);\n    // merge overlaps between adjacent ranges\n    var merged = [];\n    var current = sorted.shift();\n    sorted.forEach(function(range) {\n        if (range._min <= current._max) {\n            if (range._max > current._max) {\n                current._max = range._max;\n            }\n        }\n        else {\n            merged.push(current);\n            current = range;\n        }\n    });\n    merged.push(current);\n    this._ranges = merged;\n}\n\n_Compound.prototype.min = function() {\n    return this._ranges[0].min();\n}\n\n_Compound.prototype.max = function() {\n    return this._ranges[this._ranges.length - 1].max();\n}\n\n// returns the index of the first range that is not less than pos\n_Compound.prototype.lower_bound = function(pos) {\n    // first check if pos is out of range\n    var r = this.ranges();\n    if (pos > this.max()) return r.length;\n    if (pos < this.min()) return 0;\n    // do a binary search\n    var a=0, b=r.length - 1;\n    while (a <= b) {\n        var m = Math.floor((a+b)/2);\n        if (pos > r[m]._max) {\n            a = m+1;\n        }\n        else if (pos < r[m]._min) {\n            b = m-1;\n        }\n        else {\n            return m;\n        }\n    }\n    return a;\n}\n\n_Compound.prototype.contains = function(pos) {\n    var lb = this.lower_bound(pos);\n    if (lb < this._ranges.length && this._ranges[lb].contains(pos)) {\n        return true;\n    }\n    return false;\n}\n\n_Compound.prototype.insertRange = function(range) {\n    var lb = this.lower_bound(range._min);\n    if (lb === this._ranges.length) { // range follows this\n        this._ranges.push(range);\n        return;\n    }\n    \n    var r = this.ranges();\n    if (range._max < r[lb]._min) { // range preceeds lb\n        this._ranges.splice(lb,0,range);\n        return;\n    }\n\n    // range overlaps lb (at least)\n    if (r[lb]._min < range._min) range._min = r[lb]._min;\n    var ub = lb+1;\n    while (ub < r.length && r[ub]._min <= range._max) {\n        ub++;\n    }\n    ub--;\n    // ub is the upper bound of the new range\n    if (r[ub]._max > range._max) range._max = r[ub]._max;\n    \n    // splice range into this._ranges\n    this._ranges.splice(lb,ub-lb+1,range);\n    return;\n}\n\n_Compound.prototype.isContiguous = function() {\n    return this._ranges.length > 1;\n}\n\n_Compound.prototype.ranges = function() {\n    return this._ranges;\n}\n\n_Compound.prototype._pushRanges = function(ranges) {\n    for (var ri = 0; ri < this._ranges.length; ++ri)\n        ranges.push(this._ranges[ri]);\n}\n\n_Compound.prototype.toString = function() {\n    var s = '';\n    for (var r = 0; r < this._ranges.length; ++r) {\n        if (r>0) {\n            s = s + ',';\n        }\n        s = s + this._ranges[r].toString();\n    }\n    return s;\n}\n\nfunction union(s0, s1) {\n    if (! (s0 instanceof _Compound)) {\n        if (! (s0 instanceof Array))\n            s0 = [s0];\n        s0 = new _Compound(s0);\n    }\n    \n    if (s1)\n        s0.insertRange(s1);\n\n    return s0;\n}\n\nfunction intersection(s0, s1) {\n    var r0 = s0.ranges();\n    var r1 = s1.ranges();\n    var l0 = r0.length, l1 = r1.length;\n    var i0 = 0, i1 = 0;\n    var or = [];\n\n    while (i0 < l0 && i1 < l1) {\n        var s0 = r0[i0], s1 = r1[i1];\n        var lapMin = Math.max(s0.min(), s1.min());\n        var lapMax = Math.min(s0.max(), s1.max());\n        if (lapMax >= lapMin) {\n            or.push(new Range(lapMin, lapMax));\n        }\n        if (s0.max() > s1.max()) {\n            ++i1;\n        } else {\n            ++i0;\n        }\n    }\n    \n    if (or.length == 0) {\n        return null; // FIXME\n    } else if (or.length == 1) {\n        return or[0];\n    } else {\n        return new _Compound(or);\n    }\n}\n\nfunction coverage(s) {\n    var tot = 0;\n    var rl = s.ranges();\n    for (var ri = 0; ri < rl.length; ++ri) {\n        var r = rl[ri];\n        tot += (r.max() - r.min() + 1);\n    }\n    return tot;\n}\n\n\n\nfunction rangeOrder(a, b)\n{\n    if (a.min() < b.min()) {\n        return -1;\n    } else if (a.min() > b.min()) {\n        return 1;\n    } else if (a.max() < b.max()) {\n        return -1;\n    } else if (b.max() > a.max()) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nfunction _rangeOrder(a, b)\n{\n    if (a._min < b._min) {\n        return -1;\n    } else if (a._min > b._min) {\n        return 1;\n    } else if (a._max < b._max) {\n        return -1;\n    } else if (b._max > a._max) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        Range: Range,\n        union: union,\n        intersection: intersection,\n        coverage: coverage,\n        rangeOver: rangeOrder,\n        _rangeOrder: _rangeOrder\n    }\n}","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Dalliance Genome Explorer\n// (c) Thomas Down 2006-2010\n//\n// utils.js: odds, sods, and ends.\n//\n\n\"use strict\";\n\nif (typeof(require) !== 'undefined') {\n    var sha1 = require('./sha1');\n    var b64_sha1 = sha1.b64_sha1;\n}\n\nvar NUM_REGEXP = new RegExp('[0-9]+');\n\nfunction stringToNumbersArray(str) {\n    var nums = new Array();\n    var m;\n    while (m = NUM_REGEXP.exec(str)) {\n        nums.push(m[0]);\n        str=str.substring(m.index + (m[0].length));\n    }\n    return nums;\n}\n\nvar STRICT_NUM_REGEXP = new RegExp('^[0-9]+$');\n\nfunction stringToInt(str) {\n    str = str.replace(new RegExp(',', 'g'), '');\n    if (!STRICT_NUM_REGEXP.test(str)) {\n        return null;\n    }\n    return str|0;\n}\n\nfunction pushnew(a, v) {\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] == v) {\n            return;\n        }\n    }\n    a.push(v);\n}\n\nfunction pusho(obj, k, v) {\n    if (obj[k]) {\n        obj[k].push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\nfunction pushnewo(obj, k, v) {\n    var a = obj[k];\n    if (a) {\n        for (var i = 0; i < a.length; ++i) {    // indexOf requires JS16 :-(.\n            if (a[i] == v) {\n                return;\n            }\n        }\n        a.push(v);\n    } else {\n        obj[k] = [v];\n    }\n}\n\n\nfunction pick(a, b, c, d)\n{\n    if (a) {\n        return a;\n    } else if (b) {\n        return b;\n    } else if (c) {\n        return c;\n    } else if (d) {\n        return d;\n    }\n}\n\nfunction pushnew(l, o)\n{\n    for (var i = 0; i < l.length; ++i) {\n        if (l[i] == o) {\n            return;\n        }\n    }\n    l.push(o);\n}\n\nfunction arrayEquals(a, b) {\n    if (!a || !b || a.length !== b.length)\n        return false;\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] !== b[i])\n            return false;\n    }\n\n    return true;\n}\n\nfunction arrayIndexOf(a, x) {\n    if (!a) {\n        return -1;\n    }\n\n    for (var i = 0; i < a.length; ++i) {\n        if (a[i] === x) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nfunction arrayRemove(a, x) {\n    var i = arrayIndexOf(a, x);\n    if (i >= 0) {\n        a.splice(i, 1);\n        return true;\n    }\n    return false;\n}\n\n//\n// DOM utilities\n//\n\n\nfunction makeElement(tag, children, attribs, styles)\n{\n    var ele = document.createElement(tag);\n    if (children) {\n        if (! (children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (c) {\n                if (typeof c == 'string') {\n                    c = document.createTextNode(c);\n                } else if (typeof c == 'number') {\n                    c = document.createTextNode('' + c);\n                }\n                ele.appendChild(c);\n            }\n        }\n    }\n    \n    if (attribs) {\n        for (var l in attribs) {\n            try {\n                ele[l] = attribs[l];\n            } catch (e) {\n                console.log('error setting ' + l);\n                throw(e);\n            }\n        }\n    }\n    if (styles) {\n        for (var l in styles) {\n            ele.style[l] = styles[l];\n        }\n    }\n    return ele;\n}\n\nfunction makeElementNS(namespace, tag, children, attribs)\n{\n    var ele = document.createElementNS(namespace, tag);\n    if (children) {\n        if (! (children instanceof Array)) {\n            children = [children];\n        }\n        for (var i = 0; i < children.length; ++i) {\n            var c = children[i];\n            if (typeof c == 'string') {\n                c = document.createTextNode(c);\n            }\n            ele.appendChild(c);\n        }\n    }\n    \n    setAttrs(ele, attribs);\n    return ele;\n}\n\nvar attr_name_cache = {};\n\nfunction setAttr(node, key, value)\n{\n    var attr = attr_name_cache[key];\n    if (!attr) {\n        var _attr = '';\n        for (var c = 0; c < key.length; ++c) {\n            var cc = key.substring(c, c+1);\n            var lcc = cc.toLowerCase();\n            if (lcc != cc) {\n                _attr = _attr + '-' + lcc;\n            } else {\n                _attr = _attr + cc;\n            }\n        }\n        attr_name_cache[key] = _attr;\n        attr = _attr;\n    }\n    node.setAttribute(attr, value);\n}\n\nfunction setAttrs(node, attribs)\n{\n    if (attribs) {\n        for (var l in attribs) {\n            setAttr(node, l, attribs[l]);\n        }\n    }\n}\n\n\n\nfunction removeChildren(node)\n{\n    if (!node || !node.childNodes) {\n        return;\n    }\n\n    while (node.childNodes.length > 0) {\n        node.removeChild(node.firstChild);\n    }\n}\n\n\n\n//\n// WARNING: not for general use!\n//\n\nfunction miniJSONify(o, exc) {\n    if (typeof o === 'undefined') {\n        return 'undefined';\n    } else if (o == null) {\n        return 'null';\n    } else if (typeof o == 'string') {\n        return \"'\" + o + \"'\";\n    } else if (typeof o == 'number') {\n        return \"\" + o;\n    } else if (typeof o == 'boolean') {\n        return \"\" + o;\n    } else if (typeof o == 'object') {\n        if (o instanceof Array) {\n            var s = null;\n            for (var i = 0; i < o.length; ++i) {\n                s = (s == null ? '' : (s + ', ')) + miniJSONify(o[i], exc);\n            }\n            return '[' + (s?s:'') + ']';\n        } else {\n            exc = exc || {};\n            var s = null;\n            for (var k in o) {\n                if (exc[k])\n                    continue;\n                if (k != undefined && typeof(o[k]) != 'function') {\n                    s = (s == null ? '' : (s + ', ')) + k + ': ' + miniJSONify(o[k], exc);\n                }\n            }\n            return '{' + (s?s:'') + '}';\n        }\n    } else {\n        return (typeof o);\n    }\n}\n\nfunction shallowCopy(o) {\n    var n = {};\n    for (var k in o) {\n        n[k] = o[k];\n    }\n    return n;\n}\n\nfunction Observed(x) {\n    this.value = x;\n    this.listeners = [];\n}\n\nObserved.prototype.addListener = function(f) {\n    this.listeners.push(f);\n}\n\nObserved.prototype.addListenerAndFire = function(f) {\n    this.listeners.push(f);\n    f(this.value);\n}\n\nObserved.prototype.removeListener = function(f) {\n    arrayRemove(this.listeners, f);\n}\n\nObserved.prototype.get = function() {\n    return this.value;\n}\n\nObserved.prototype.set = function(x) {\n    this.value = x;\n    for (var i = 0; i < this.listeners.length; ++i) {\n        this.listeners[i](x);\n    }\n}\n\nfunction Awaited() {\n    this.queue = [];\n}\n\nAwaited.prototype.provide = function(x) {\n    if (this.res !== undefined) {\n        throw \"Resource has already been provided.\";\n    }\n\n    this.res = x;\n    for (var i = 0; i < this.queue.length; ++i) {\n        this.queue[i](x);\n    }\n    this.queue = null;   // avoid leaking closures.\n}\n\nAwaited.prototype.await = function(f) {\n    if (this.res !== undefined) {\n        f(this.res);\n        return this.res;\n    } else {\n        this.queue.push(f);\n    }\n}\n\nvar __dalliance_saltSeed = 0;\n\nfunction saltURL(url) {\n    return url + '?salt=' + b64_sha1('' + Date.now() + ',' + (++__dalliance_saltSeed));\n}\n\nfunction textXHR(url, callback, opts) {\n    if (opts && opts.salt) \n        url = saltURL(url);\n\n    try {\n        var timeout;\n        if (opts && opts.timeout) {\n            timeout = setTimeout(\n                function() {\n                    console.log('timing out ' + url);\n                    req.abort();\n                    return callback(null, 'Timeout');\n                },\n                opts.timeout\n            );\n        }\n\n        var req = new XMLHttpRequest();\n        req.onreadystatechange = function() {\n    \t    if (req.readyState == 4) {\n                if (timeout)\n                    clearTimeout(timeout);\n    \t        if (req.status < 200 || req.status >= 300) {\n    \t\t    callback(null, 'Error code ' + req.status);\n    \t        } else {\n    \t\t    callback(req.responseText);\n    \t        }\n    \t    }\n        };\n        \n        req.open('GET', url, true);\n        req.responseType = 'text';\n\n        if (opts && opts.credentials) {\n            req.withCredentials = true;\n        }\n        req.send();\n    } catch (e) {\n        callback(null, 'Exception ' + e);\n    }\n}\n\nfunction relativeURL(base, rel) {\n    // FIXME quite naive -- good enough for trackhubs?\n\n    if (rel.indexOf('http:') === 0 || rel.indexOf('https:') === 0 || rel.indexOf('ftp:') === 0) {\n        return rel;\n    }\n\n    var li = base.lastIndexOf('/');\n    if (li >= 0) {\n        return base.substr(0, li + 1) + rel;\n    } else {\n        return rel;\n    }\n}\n\nvar AMINO_ACID_TRANSLATION = {\n    'TTT': 'F',\n    'TTC': 'F',\n    'TTA': 'L',\n    'TTG': 'L',\n    'CTT': 'L',\n    'CTC': 'L',\n    'CTA': 'L',\n    'CTG': 'L',\n    'ATT': 'I',\n    'ATC': 'I',\n    'ATA': 'I',\n    'ATG': 'M',\n    'GTT': 'V',\n    'GTC': 'V',\n    'GTA': 'V',\n    'GTG': 'V',\n    'TCT': 'S',\n    'TCC': 'S',\n    'TCA': 'S',\n    'TCG': 'S',\n    'CCT': 'P',\n    'CCC': 'P',\n    'CCA': 'P',\n    'CCG': 'P',\n    'ACT': 'T',\n    'ACC': 'T',\n    'ACA': 'T',\n    'ACG': 'T',\n    'GCT': 'A',\n    'GCC': 'A',\n    'GCA': 'A',\n    'GCG': 'A',\n    'TAT': 'Y',\n    'TAC': 'Y',\n    'TAA': '*',  // stop\n    'TAG': '*',  // stop\n    'CAT': 'H',\n    'CAC': 'H',\n    'CAA': 'Q',\n    'CAG': 'Q',\n    'AAT': 'N',\n    'AAC': 'N',\n    'AAA': 'K',\n    'AAG': 'K',\n    'GAT': 'D',\n    'GAC': 'D',\n    'GAA': 'E',\n    'GAG': 'E',\n    'TGT': 'C',\n    'TGC': 'C',\n    'TGA': '*',  // stop\n    'TGG': 'W',\n    'CGT': 'R',\n    'CGC': 'R',\n    'CGA': 'R',\n    'CGG': 'R',\n    'AGT': 'S',\n    'AGC': 'S',\n    'AGA': 'R',\n    'AGG': 'R',\n    'GGT': 'G',\n    'GGC': 'G',\n    'GGA': 'G',\n    'GGG': 'G'\n}\n\nfunction resolveUrlToPage(rel) {\n    return makeElement('a', null, {href: rel}).href;\n}\n\n//\n// Missing APIs\n// \n\nif (!('trim' in String.prototype)) {\n    String.prototype.trim = function() {\n        return this.replace(/^\\s+/, '').replace(/\\s+$/, '');\n    };\n}\n\nif (typeof(module) !== 'undefined') {\n    module.exports = {\n        textXHR: textXHR,\n        relativeURL: relativeURL,\n        resolveUrlToPage: resolveUrlToPage,\n        shallowCopy: shallowCopy,\n        pusho: pusho,\n        pushnew: pushnew,\n        pushnewo: pushnewo,\n        arrayIndexOf: arrayIndexOf,\n        arrayEquals: arrayEquals,\n        pick: pick,\n\n        makeElement: makeElement,\n        makeElementNS: makeElementNS,\n        removeChildren: removeChildren,\n\n        miniJSONify: miniJSONify,\n\n        Observed: Observed,\n        Awaited: Awaited,\n\n        AMINO_ACID_TRANSLATION: AMINO_ACID_TRANSLATION\n    }\n}\n","/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n * @version   3.0.2\n */\n\n(function() {\n    \"use strict\";\n    function lib$es6$promise$utils$$objectOrFunction(x) {\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);\n    }\n\n    function lib$es6$promise$utils$$isFunction(x) {\n      return typeof x === 'function';\n    }\n\n    function lib$es6$promise$utils$$isMaybeThenable(x) {\n      return typeof x === 'object' && x !== null;\n    }\n\n    var lib$es6$promise$utils$$_isArray;\n    if (!Array.isArray) {\n      lib$es6$promise$utils$$_isArray = function (x) {\n        return Object.prototype.toString.call(x) === '[object Array]';\n      };\n    } else {\n      lib$es6$promise$utils$$_isArray = Array.isArray;\n    }\n\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n    var lib$es6$promise$asap$$len = 0;\n    var lib$es6$promise$asap$$toString = {}.toString;\n    var lib$es6$promise$asap$$vertxNext;\n    var lib$es6$promise$asap$$customSchedulerFn;\n\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n      lib$es6$promise$asap$$len += 2;\n      if (lib$es6$promise$asap$$len === 2) {\n        // If len is 2, that means that we need to schedule an async flush.\n        // If additional callbacks are queued before the queue is flushed, they\n        // will be processed by this flush that we are scheduling.\n        if (lib$es6$promise$asap$$customSchedulerFn) {\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n        } else {\n          lib$es6$promise$asap$$scheduleFlush();\n        }\n      }\n    }\n\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n    }\n\n    function lib$es6$promise$asap$$setAsap(asapFn) {\n      lib$es6$promise$asap$$asap = asapFn;\n    }\n\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n    // test for web worker but not in IE10\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&\n      typeof importScripts !== 'undefined' &&\n      typeof MessageChannel !== 'undefined';\n\n    // node\n    function lib$es6$promise$asap$$useNextTick() {\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n      // see https://github.com/cujojs/when/issues/410 for details\n      return function() {\n        process.nextTick(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    // vertx\n    function lib$es6$promise$asap$$useVertxTimer() {\n      return function() {\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n      };\n    }\n\n    function lib$es6$promise$asap$$useMutationObserver() {\n      var iterations = 0;\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n      var node = document.createTextNode('');\n      observer.observe(node, { characterData: true });\n\n      return function() {\n        node.data = (iterations = ++iterations % 2);\n      };\n    }\n\n    // web worker\n    function lib$es6$promise$asap$$useMessageChannel() {\n      var channel = new MessageChannel();\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;\n      return function () {\n        channel.port2.postMessage(0);\n      };\n    }\n\n    function lib$es6$promise$asap$$useSetTimeout() {\n      return function() {\n        setTimeout(lib$es6$promise$asap$$flush, 1);\n      };\n    }\n\n    var lib$es6$promise$asap$$queue = new Array(1000);\n    function lib$es6$promise$asap$$flush() {\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {\n        var callback = lib$es6$promise$asap$$queue[i];\n        var arg = lib$es6$promise$asap$$queue[i+1];\n\n        callback(arg);\n\n        lib$es6$promise$asap$$queue[i] = undefined;\n        lib$es6$promise$asap$$queue[i+1] = undefined;\n      }\n\n      lib$es6$promise$asap$$len = 0;\n    }\n\n    function lib$es6$promise$asap$$attemptVertx() {\n      try {\n        var r = require;\n        var vertx = r('vertx');\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n        return lib$es6$promise$asap$$useVertxTimer();\n      } catch(e) {\n        return lib$es6$promise$asap$$useSetTimeout();\n      }\n    }\n\n    var lib$es6$promise$asap$$scheduleFlush;\n    // Decide what async method to use to triggering processing of queued callbacks:\n    if (lib$es6$promise$asap$$isNode) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n    } else if (lib$es6$promise$asap$$isWorker) {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();\n    } else {\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n    }\n\n    function lib$es6$promise$$internal$$noop() {}\n\n    var lib$es6$promise$$internal$$PENDING   = void 0;\n    var lib$es6$promise$$internal$$FULFILLED = 1;\n    var lib$es6$promise$$internal$$REJECTED  = 2;\n\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$selfFulfillment() {\n      return new TypeError(\"You cannot resolve a promise with itself\");\n    }\n\n    function lib$es6$promise$$internal$$cannotReturnOwn() {\n      return new TypeError('A promises callback cannot return that same promise.');\n    }\n\n    function lib$es6$promise$$internal$$getThen(promise) {\n      try {\n        return promise.then;\n      } catch(error) {\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n      try {\n        then.call(value, fulfillmentHandler, rejectionHandler);\n      } catch(e) {\n        return e;\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n       lib$es6$promise$asap$$asap(function(promise) {\n        var sealed = false;\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {\n          if (sealed) { return; }\n          sealed = true;\n          if (thenable !== value) {\n            lib$es6$promise$$internal$$resolve(promise, value);\n          } else {\n            lib$es6$promise$$internal$$fulfill(promise, value);\n          }\n        }, function(reason) {\n          if (sealed) { return; }\n          sealed = true;\n\n          lib$es6$promise$$internal$$reject(promise, reason);\n        }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n        if (!sealed && error) {\n          sealed = true;\n          lib$es6$promise$$internal$$reject(promise, error);\n        }\n      }, promise);\n    }\n\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, thenable._result);\n      } else {\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      }\n    }\n\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {\n      if (maybeThenable.constructor === promise.constructor) {\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n      } else {\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);\n\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n        } else if (then === undefined) {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        } else if (lib$es6$promise$utils$$isFunction(then)) {\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n        } else {\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n        }\n      }\n    }\n\n    function lib$es6$promise$$internal$$resolve(promise, value) {\n      if (promise === value) {\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);\n      } else {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publishRejection(promise) {\n      if (promise._onerror) {\n        promise._onerror(promise._result);\n      }\n\n      lib$es6$promise$$internal$$publish(promise);\n    }\n\n    function lib$es6$promise$$internal$$fulfill(promise, value) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n\n      promise._result = value;\n      promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n      if (promise._subscribers.length !== 0) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n      }\n    }\n\n    function lib$es6$promise$$internal$$reject(promise, reason) {\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }\n      promise._state = lib$es6$promise$$internal$$REJECTED;\n      promise._result = reason;\n\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n    }\n\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n      var subscribers = parent._subscribers;\n      var length = subscribers.length;\n\n      parent._onerror = null;\n\n      subscribers[length] = child;\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;\n\n      if (length === 0 && parent._state) {\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n      }\n    }\n\n    function lib$es6$promise$$internal$$publish(promise) {\n      var subscribers = promise._subscribers;\n      var settled = promise._state;\n\n      if (subscribers.length === 0) { return; }\n\n      var child, callback, detail = promise._result;\n\n      for (var i = 0; i < subscribers.length; i += 3) {\n        child = subscribers[i];\n        callback = subscribers[i + settled];\n\n        if (child) {\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n        } else {\n          callback(detail);\n        }\n      }\n\n      promise._subscribers.length = 0;\n    }\n\n    function lib$es6$promise$$internal$$ErrorObject() {\n      this.error = null;\n    }\n\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n      try {\n        return callback(detail);\n      } catch(e) {\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n      }\n    }\n\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n          value, error, succeeded, failed;\n\n      if (hasCallback) {\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n          failed = true;\n          error = value.error;\n          value = null;\n        } else {\n          succeeded = true;\n        }\n\n        if (promise === value) {\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n          return;\n        }\n\n      } else {\n        value = detail;\n        succeeded = true;\n      }\n\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n        // noop\n      } else if (hasCallback && succeeded) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      } else if (failed) {\n        lib$es6$promise$$internal$$reject(promise, error);\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n        lib$es6$promise$$internal$$fulfill(promise, value);\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n        lib$es6$promise$$internal$$reject(promise, value);\n      }\n    }\n\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n      try {\n        resolver(function resolvePromise(value){\n          lib$es6$promise$$internal$$resolve(promise, value);\n        }, function rejectPromise(reason) {\n          lib$es6$promise$$internal$$reject(promise, reason);\n        });\n      } catch(e) {\n        lib$es6$promise$$internal$$reject(promise, e);\n      }\n    }\n\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n      var enumerator = this;\n\n      enumerator._instanceConstructor = Constructor;\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (enumerator._validateInput(input)) {\n        enumerator._input     = input;\n        enumerator.length     = input.length;\n        enumerator._remaining = input.length;\n\n        enumerator._init();\n\n        if (enumerator.length === 0) {\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n        } else {\n          enumerator.length = enumerator.length || 0;\n          enumerator._enumerate();\n          if (enumerator._remaining === 0) {\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);\n          }\n        }\n      } else {\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());\n      }\n    }\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {\n      return lib$es6$promise$utils$$isArray(input);\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {\n      return new Error('Array Methods must be provided an Array');\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {\n      this._result = new Array(this.length);\n    };\n\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {\n      var enumerator = this;\n\n      var length  = enumerator.length;\n      var promise = enumerator.promise;\n      var input   = enumerator._input;\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        enumerator._eachEntry(input[i], i);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {\n      var enumerator = this;\n      var c = enumerator._instanceConstructor;\n\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {\n          entry._onerror = null;\n          enumerator._settledAt(entry._state, i, entry._result);\n        } else {\n          enumerator._willSettleAt(c.resolve(entry), i);\n        }\n      } else {\n        enumerator._remaining--;\n        enumerator._result[i] = entry;\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {\n      var enumerator = this;\n      var promise = enumerator.promise;\n\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {\n        enumerator._remaining--;\n\n        if (state === lib$es6$promise$$internal$$REJECTED) {\n          lib$es6$promise$$internal$$reject(promise, value);\n        } else {\n          enumerator._result[i] = value;\n        }\n      }\n\n      if (enumerator._remaining === 0) {\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);\n      }\n    };\n\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {\n      var enumerator = this;\n\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n      }, function(reason) {\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n      });\n    };\n    function lib$es6$promise$promise$all$$all(entries) {\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;\n    }\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n    function lib$es6$promise$promise$race$$race(entries) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n      if (!lib$es6$promise$utils$$isArray(entries)) {\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n        return promise;\n      }\n\n      var length = entries.length;\n\n      function onFulfillment(value) {\n        lib$es6$promise$$internal$$resolve(promise, value);\n      }\n\n      function onRejection(reason) {\n        lib$es6$promise$$internal$$reject(promise, reason);\n      }\n\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n      }\n\n      return promise;\n    }\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n    function lib$es6$promise$promise$resolve$$resolve(object) {\n      /*jshint validthis:true */\n      var Constructor = this;\n\n      if (object && typeof object === 'object' && object.constructor === Constructor) {\n        return object;\n      }\n\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$resolve(promise, object);\n      return promise;\n    }\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n    function lib$es6$promise$promise$reject$$reject(reason) {\n      /*jshint validthis:true */\n      var Constructor = this;\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);\n      lib$es6$promise$$internal$$reject(promise, reason);\n      return promise;\n    }\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n    var lib$es6$promise$promise$$counter = 0;\n\n    function lib$es6$promise$promise$$needsResolver() {\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n    }\n\n    function lib$es6$promise$promise$$needsNew() {\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }\n\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n    /**\n      Promise objects represent the eventual result of an asynchronous operation. The\n      primary way of interacting with a promise is through its `then` method, which\n      registers callbacks to receive either a promise's eventual value or the reason\n      why the promise cannot be fulfilled.\n\n      Terminology\n      -----------\n\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n      - `thenable` is an object or function that defines a `then` method.\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n      - `exception` is a value that is thrown using the throw statement.\n      - `reason` is a value that indicates why a promise was rejected.\n      - `settled` the final resting state of a promise, fulfilled or rejected.\n\n      A promise can be in one of three states: pending, fulfilled, or rejected.\n\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled\n      state.  Promises that are rejected have a rejection reason and are in the\n      rejected state.  A fulfillment value is never a thenable.\n\n      Promises can also be said to *resolve* a value.  If this value is also a\n      promise, then the original promise's settled state will match the value's\n      settled state.  So a promise that *resolves* a promise that rejects will\n      itself reject, and a promise that *resolves* a promise that fulfills will\n      itself fulfill.\n\n\n      Basic Usage:\n      ------------\n\n      ```js\n      var promise = new Promise(function(resolve, reject) {\n        // on success\n        resolve(value);\n\n        // on failure\n        reject(reason);\n      });\n\n      promise.then(function(value) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Advanced Usage:\n      ---------------\n\n      Promises shine when abstracting away asynchronous interactions such as\n      `XMLHttpRequest`s.\n\n      ```js\n      function getJSON(url) {\n        return new Promise(function(resolve, reject){\n          var xhr = new XMLHttpRequest();\n\n          xhr.open('GET', url);\n          xhr.onreadystatechange = handler;\n          xhr.responseType = 'json';\n          xhr.setRequestHeader('Accept', 'application/json');\n          xhr.send();\n\n          function handler() {\n            if (this.readyState === this.DONE) {\n              if (this.status === 200) {\n                resolve(this.response);\n              } else {\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n              }\n            }\n          };\n        });\n      }\n\n      getJSON('/posts.json').then(function(json) {\n        // on fulfillment\n      }, function(reason) {\n        // on rejection\n      });\n      ```\n\n      Unlike callbacks, promises are great composable primitives.\n\n      ```js\n      Promise.all([\n        getJSON('/posts'),\n        getJSON('/comments')\n      ]).then(function(values){\n        values[0] // => postsJSON\n        values[1] // => commentsJSON\n\n        return values;\n      });\n      ```\n\n      @class Promise\n      @param {function} resolver\n      Useful for tooling.\n      @constructor\n    */\n    function lib$es6$promise$promise$$Promise(resolver) {\n      this._id = lib$es6$promise$promise$$counter++;\n      this._state = undefined;\n      this._result = undefined;\n      this._subscribers = [];\n\n      if (lib$es6$promise$$internal$$noop !== resolver) {\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {\n          lib$es6$promise$promise$$needsResolver();\n        }\n\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {\n          lib$es6$promise$promise$$needsNew();\n        }\n\n        lib$es6$promise$$internal$$initializePromise(this, resolver);\n      }\n    }\n\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n    lib$es6$promise$promise$$Promise.prototype = {\n      constructor: lib$es6$promise$promise$$Promise,\n\n    /**\n      The primary way of interacting with a promise is through its `then` method,\n      which registers callbacks to receive either a promise's eventual value or the\n      reason why the promise cannot be fulfilled.\n\n      ```js\n      findUser().then(function(user){\n        // user is available\n      }, function(reason){\n        // user is unavailable, and you are given the reason why\n      });\n      ```\n\n      Chaining\n      --------\n\n      The return value of `then` is itself a promise.  This second, 'downstream'\n      promise is resolved with the return value of the first promise's fulfillment\n      or rejection handler, or rejected if the handler throws an exception.\n\n      ```js\n      findUser().then(function (user) {\n        return user.name;\n      }, function (reason) {\n        return 'default name';\n      }).then(function (userName) {\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n        // will be `'default name'`\n      });\n\n      findUser().then(function (user) {\n        throw new Error('Found user, but still unhappy');\n      }, function (reason) {\n        throw new Error('`findUser` rejected and we're unhappy');\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n      });\n      ```\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n      ```js\n      findUser().then(function (user) {\n        throw new PedagogicalException('Upstream error');\n      }).then(function (value) {\n        // never reached\n      }).then(function (value) {\n        // never reached\n      }, function (reason) {\n        // The `PedgagocialException` is propagated all the way down to here\n      });\n      ```\n\n      Assimilation\n      ------------\n\n      Sometimes the value you want to propagate to a downstream promise can only be\n      retrieved asynchronously. This can be achieved by returning a promise in the\n      fulfillment or rejection handler. The downstream promise will then be pending\n      until the returned promise is settled. This is called *assimilation*.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // The user's comments are now available\n      });\n      ```\n\n      If the assimliated promise rejects, then the downstream promise will also reject.\n\n      ```js\n      findUser().then(function (user) {\n        return findCommentsByAuthor(user);\n      }).then(function (comments) {\n        // If `findCommentsByAuthor` fulfills, we'll have the value here\n      }, function (reason) {\n        // If `findCommentsByAuthor` rejects, we'll have the reason here\n      });\n      ```\n\n      Simple Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var result;\n\n      try {\n        result = findResult();\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n      findResult(function(result, err){\n        if (err) {\n          // failure\n        } else {\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findResult().then(function(result){\n        // success\n      }, function(reason){\n        // failure\n      });\n      ```\n\n      Advanced Example\n      --------------\n\n      Synchronous Example\n\n      ```javascript\n      var author, books;\n\n      try {\n        author = findAuthor();\n        books  = findBooksByAuthor(author);\n        // success\n      } catch(reason) {\n        // failure\n      }\n      ```\n\n      Errback Example\n\n      ```js\n\n      function foundBooks(books) {\n\n      }\n\n      function failure(reason) {\n\n      }\n\n      findAuthor(function(author, err){\n        if (err) {\n          failure(err);\n          // failure\n        } else {\n          try {\n            findBoooksByAuthor(author, function(books, err) {\n              if (err) {\n                failure(err);\n              } else {\n                try {\n                  foundBooks(books);\n                } catch(reason) {\n                  failure(reason);\n                }\n              }\n            });\n          } catch(error) {\n            failure(err);\n          }\n          // success\n        }\n      });\n      ```\n\n      Promise Example;\n\n      ```javascript\n      findAuthor().\n        then(findBooksByAuthor).\n        then(function(books){\n          // found books\n      }).catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method then\n      @param {Function} onFulfilled\n      @param {Function} onRejected\n      Useful for tooling.\n      @return {Promise}\n    */\n      then: function(onFulfillment, onRejection) {\n        var parent = this;\n        var state = parent._state;\n\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;\n        }\n\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);\n        var result = parent._result;\n\n        if (state) {\n          var callback = arguments[state - 1];\n          lib$es6$promise$asap$$asap(function(){\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n          });\n        } else {\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n        }\n\n        return child;\n      },\n\n    /**\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n      as the catch block of a try/catch statement.\n\n      ```js\n      function findAuthor(){\n        throw new Error('couldn't find that author');\n      }\n\n      // synchronous\n      try {\n        findAuthor();\n      } catch(reason) {\n        // something went wrong\n      }\n\n      // async with promises\n      findAuthor().catch(function(reason){\n        // something went wrong\n      });\n      ```\n\n      @method catch\n      @param {Function} onRejection\n      Useful for tooling.\n      @return {Promise}\n    */\n      'catch': function(onRejection) {\n        return this.then(null, onRejection);\n      }\n    };\n    function lib$es6$promise$polyfill$$polyfill() {\n      var local;\n\n      if (typeof global !== 'undefined') {\n          local = global;\n      } else if (typeof self !== 'undefined') {\n          local = self;\n      } else {\n          try {\n              local = Function('return this')();\n          } catch (e) {\n              throw new Error('polyfill failed because global object is unavailable in this environment');\n          }\n      }\n\n      var P = local.Promise;\n\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n        return;\n      }\n\n      local.Promise = lib$es6$promise$promise$$default;\n    }\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n    var lib$es6$promise$umd$$ES6Promise = {\n      'Promise': lib$es6$promise$promise$$default,\n      'polyfill': lib$es6$promise$polyfill$$default\n    };\n\n    /* global define:true module:true window: true */\n    if (typeof define === 'function' && define['amd']) {\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });\n    } else if (typeof module !== 'undefined' && module['exports']) {\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;\n    } else if (typeof this !== 'undefined') {\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n    }\n\n    lib$es6$promise$polyfill$$default();\n}).call(this);\n\n","/* -*- mode: javascript; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n\n// \n// Javascript ZLib\n// By Thomas Down 2010-2011\n//\n// Based very heavily on portions of jzlib (by ymnk@jcraft.com), who in\n// turn credits Jean-loup Gailly and Mark Adler for the original zlib code.\n//\n// inflate.js: ZLib inflate code\n//\n\n//\n// Shared constants\n//\n\nvar MAX_WBITS=15; // 32K LZ77 window\nvar DEF_WBITS=MAX_WBITS;\nvar MAX_MEM_LEVEL=9;\nvar MANY=1440;\nvar BMAX = 15;\n\n// preset dictionary flag in zlib header\nvar PRESET_DICT=0x20;\n\nvar Z_NO_FLUSH=0;\nvar Z_PARTIAL_FLUSH=1;\nvar Z_SYNC_FLUSH=2;\nvar Z_FULL_FLUSH=3;\nvar Z_FINISH=4;\n\nvar Z_DEFLATED=8;\n\nvar Z_OK=0;\nvar Z_STREAM_END=1;\nvar Z_NEED_DICT=2;\nvar Z_ERRNO=-1;\nvar Z_STREAM_ERROR=-2;\nvar Z_DATA_ERROR=-3;\nvar Z_MEM_ERROR=-4;\nvar Z_BUF_ERROR=-5;\nvar Z_VERSION_ERROR=-6;\n\nvar METHOD=0;   // waiting for method byte\nvar FLAG=1;     // waiting for flag byte\nvar DICT4=2;    // four dictionary check bytes to go\nvar DICT3=3;    // three dictionary check bytes to go\nvar DICT2=4;    // two dictionary check bytes to go\nvar DICT1=5;    // one dictionary check byte to go\nvar DICT0=6;    // waiting for inflateSetDictionary\nvar BLOCKS=7;   // decompressing blocks\nvar CHECK4=8;   // four check bytes to go\nvar CHECK3=9;   // three check bytes to go\nvar CHECK2=10;  // two check bytes to go\nvar CHECK1=11;  // one check byte to go\nvar DONE=12;    // finished check, done\nvar BAD=13;     // got an error--stay here\n\nvar inflate_mask = [0x00000000, 0x00000001, 0x00000003, 0x00000007, 0x0000000f, 0x0000001f, 0x0000003f, 0x0000007f, 0x000000ff, 0x000001ff, 0x000003ff, 0x000007ff, 0x00000fff, 0x00001fff, 0x00003fff, 0x00007fff, 0x0000ffff];\n\nvar IB_TYPE=0;  // get type bits (3, including end bit)\nvar IB_LENS=1;  // get lengths for stored\nvar IB_STORED=2;// processing stored block\nvar IB_TABLE=3; // get table lengths\nvar IB_BTREE=4; // get bit lengths tree for a dynamic block\nvar IB_DTREE=5; // get length, distance trees for a dynamic block\nvar IB_CODES=6; // processing fixed or dynamic block\nvar IB_DRY=7;   // output remaining window bytes\nvar IB_DONE=8;  // finished last block, done\nvar IB_BAD=9;   // ot a data error--stuck here\n\nvar fixed_bl = 9;\nvar fixed_bd = 5;\n\nvar fixed_tl = [\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,192,\n    80,7,10, 0,8,96, 0,8,32, 0,9,160,\n    0,8,0, 0,8,128, 0,8,64, 0,9,224,\n    80,7,6, 0,8,88, 0,8,24, 0,9,144,\n    83,7,59, 0,8,120, 0,8,56, 0,9,208,\n    81,7,17, 0,8,104, 0,8,40, 0,9,176,\n    0,8,8, 0,8,136, 0,8,72, 0,9,240,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,200,\n    81,7,13, 0,8,100, 0,8,36, 0,9,168,\n    0,8,4, 0,8,132, 0,8,68, 0,9,232,\n    80,7,8, 0,8,92, 0,8,28, 0,9,152,\n    84,7,83, 0,8,124, 0,8,60, 0,9,216,\n    82,7,23, 0,8,108, 0,8,44, 0,9,184,\n    0,8,12, 0,8,140, 0,8,76, 0,9,248,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,196,\n    81,7,11, 0,8,98, 0,8,34, 0,9,164,\n    0,8,2, 0,8,130, 0,8,66, 0,9,228,\n    80,7,7, 0,8,90, 0,8,26, 0,9,148,\n    84,7,67, 0,8,122, 0,8,58, 0,9,212,\n    82,7,19, 0,8,106, 0,8,42, 0,9,180,\n    0,8,10, 0,8,138, 0,8,74, 0,9,244,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,204,\n    81,7,15, 0,8,102, 0,8,38, 0,9,172,\n    0,8,6, 0,8,134, 0,8,70, 0,9,236,\n    80,7,9, 0,8,94, 0,8,30, 0,9,156,\n    84,7,99, 0,8,126, 0,8,62, 0,9,220,\n    82,7,27, 0,8,110, 0,8,46, 0,9,188,\n    0,8,14, 0,8,142, 0,8,78, 0,9,252,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,194,\n    80,7,10, 0,8,97, 0,8,33, 0,9,162,\n    0,8,1, 0,8,129, 0,8,65, 0,9,226,\n    80,7,6, 0,8,89, 0,8,25, 0,9,146,\n    83,7,59, 0,8,121, 0,8,57, 0,9,210,\n    81,7,17, 0,8,105, 0,8,41, 0,9,178,\n    0,8,9, 0,8,137, 0,8,73, 0,9,242,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,202,\n    81,7,13, 0,8,101, 0,8,37, 0,9,170,\n    0,8,5, 0,8,133, 0,8,69, 0,9,234,\n    80,7,8, 0,8,93, 0,8,29, 0,9,154,\n    84,7,83, 0,8,125, 0,8,61, 0,9,218,\n    82,7,23, 0,8,109, 0,8,45, 0,9,186,\n    0,8,13, 0,8,141, 0,8,77, 0,9,250,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,198,\n    81,7,11, 0,8,99, 0,8,35, 0,9,166,\n    0,8,3, 0,8,131, 0,8,67, 0,9,230,\n    80,7,7, 0,8,91, 0,8,27, 0,9,150,\n    84,7,67, 0,8,123, 0,8,59, 0,9,214,\n    82,7,19, 0,8,107, 0,8,43, 0,9,182,\n    0,8,11, 0,8,139, 0,8,75, 0,9,246,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,206,\n    81,7,15, 0,8,103, 0,8,39, 0,9,174,\n    0,8,7, 0,8,135, 0,8,71, 0,9,238,\n    80,7,9, 0,8,95, 0,8,31, 0,9,158,\n    84,7,99, 0,8,127, 0,8,63, 0,9,222,\n    82,7,27, 0,8,111, 0,8,47, 0,9,190,\n    0,8,15, 0,8,143, 0,8,79, 0,9,254,\n    96,7,256, 0,8,80, 0,8,16, 84,8,115,\n    82,7,31, 0,8,112, 0,8,48, 0,9,193,\n\n    80,7,10, 0,8,96, 0,8,32, 0,9,161,\n    0,8,0, 0,8,128, 0,8,64, 0,9,225,\n    80,7,6, 0,8,88, 0,8,24, 0,9,145,\n    83,7,59, 0,8,120, 0,8,56, 0,9,209,\n    81,7,17, 0,8,104, 0,8,40, 0,9,177,\n    0,8,8, 0,8,136, 0,8,72, 0,9,241,\n    80,7,4, 0,8,84, 0,8,20, 85,8,227,\n    83,7,43, 0,8,116, 0,8,52, 0,9,201,\n    81,7,13, 0,8,100, 0,8,36, 0,9,169,\n    0,8,4, 0,8,132, 0,8,68, 0,9,233,\n    80,7,8, 0,8,92, 0,8,28, 0,9,153,\n    84,7,83, 0,8,124, 0,8,60, 0,9,217,\n    82,7,23, 0,8,108, 0,8,44, 0,9,185,\n    0,8,12, 0,8,140, 0,8,76, 0,9,249,\n    80,7,3, 0,8,82, 0,8,18, 85,8,163,\n    83,7,35, 0,8,114, 0,8,50, 0,9,197,\n    81,7,11, 0,8,98, 0,8,34, 0,9,165,\n    0,8,2, 0,8,130, 0,8,66, 0,9,229,\n    80,7,7, 0,8,90, 0,8,26, 0,9,149,\n    84,7,67, 0,8,122, 0,8,58, 0,9,213,\n    82,7,19, 0,8,106, 0,8,42, 0,9,181,\n    0,8,10, 0,8,138, 0,8,74, 0,9,245,\n    80,7,5, 0,8,86, 0,8,22, 192,8,0,\n    83,7,51, 0,8,118, 0,8,54, 0,9,205,\n    81,7,15, 0,8,102, 0,8,38, 0,9,173,\n    0,8,6, 0,8,134, 0,8,70, 0,9,237,\n    80,7,9, 0,8,94, 0,8,30, 0,9,157,\n    84,7,99, 0,8,126, 0,8,62, 0,9,221,\n    82,7,27, 0,8,110, 0,8,46, 0,9,189,\n    0,8,14, 0,8,142, 0,8,78, 0,9,253,\n    96,7,256, 0,8,81, 0,8,17, 85,8,131,\n    82,7,31, 0,8,113, 0,8,49, 0,9,195,\n    80,7,10, 0,8,97, 0,8,33, 0,9,163,\n    0,8,1, 0,8,129, 0,8,65, 0,9,227,\n    80,7,6, 0,8,89, 0,8,25, 0,9,147,\n    83,7,59, 0,8,121, 0,8,57, 0,9,211,\n    81,7,17, 0,8,105, 0,8,41, 0,9,179,\n    0,8,9, 0,8,137, 0,8,73, 0,9,243,\n    80,7,4, 0,8,85, 0,8,21, 80,8,258,\n    83,7,43, 0,8,117, 0,8,53, 0,9,203,\n    81,7,13, 0,8,101, 0,8,37, 0,9,171,\n    0,8,5, 0,8,133, 0,8,69, 0,9,235,\n    80,7,8, 0,8,93, 0,8,29, 0,9,155,\n    84,7,83, 0,8,125, 0,8,61, 0,9,219,\n    82,7,23, 0,8,109, 0,8,45, 0,9,187,\n    0,8,13, 0,8,141, 0,8,77, 0,9,251,\n    80,7,3, 0,8,83, 0,8,19, 85,8,195,\n    83,7,35, 0,8,115, 0,8,51, 0,9,199,\n    81,7,11, 0,8,99, 0,8,35, 0,9,167,\n    0,8,3, 0,8,131, 0,8,67, 0,9,231,\n    80,7,7, 0,8,91, 0,8,27, 0,9,151,\n    84,7,67, 0,8,123, 0,8,59, 0,9,215,\n    82,7,19, 0,8,107, 0,8,43, 0,9,183,\n    0,8,11, 0,8,139, 0,8,75, 0,9,247,\n    80,7,5, 0,8,87, 0,8,23, 192,8,0,\n    83,7,51, 0,8,119, 0,8,55, 0,9,207,\n    81,7,15, 0,8,103, 0,8,39, 0,9,175,\n    0,8,7, 0,8,135, 0,8,71, 0,9,239,\n    80,7,9, 0,8,95, 0,8,31, 0,9,159,\n    84,7,99, 0,8,127, 0,8,63, 0,9,223,\n    82,7,27, 0,8,111, 0,8,47, 0,9,191,\n    0,8,15, 0,8,143, 0,8,79, 0,9,255\n];\nvar fixed_td = [\n    80,5,1, 87,5,257, 83,5,17, 91,5,4097,\n    81,5,5, 89,5,1025, 85,5,65, 93,5,16385,\n    80,5,3, 88,5,513, 84,5,33, 92,5,8193,\n    82,5,9, 90,5,2049, 86,5,129, 192,5,24577,\n    80,5,2, 87,5,385, 83,5,25, 91,5,6145,\n    81,5,7, 89,5,1537, 85,5,97, 93,5,24577,\n    80,5,4, 88,5,769, 84,5,49, 92,5,12289,\n    82,5,13, 90,5,3073, 86,5,193, 192,5,24577\n];\n\n  // Tables for deflate from PKZIP's appnote.txt.\n  var cplens = [ // Copy lengths for literal codes 257..285\n        3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n        35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n  ];\n\n  // see note #13 above about 258\n  var cplext = [ // Extra bits for literal codes 257..285\n        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,\n        3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 112, 112  // 112==invalid\n  ];\n\n var cpdist = [ // Copy offsets for distance codes 0..29\n        1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n        257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n        8193, 12289, 16385, 24577\n  ];\n\n  var cpdext = [ // Extra bits for distance codes\n        0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,\n        7, 7, 8, 8, 9, 9, 10, 10, 11, 11,\n        12, 12, 13, 13];\n\n//\n// ZStream.java\n//\n\nfunction ZStream() {\n}\n\n\nZStream.prototype.inflateInit = function(w, nowrap) {\n    if (!w) {\n\tw = DEF_WBITS;\n    }\n    if (nowrap) {\n\tnowrap = false;\n    }\n    this.istate = new Inflate();\n    return this.istate.inflateInit(this, nowrap?-w:w);\n}\n\nZStream.prototype.inflate = function(f) {\n    if(this.istate==null) return Z_STREAM_ERROR;\n    return this.istate.inflate(this, f);\n}\n\nZStream.prototype.inflateEnd = function(){\n    if(this.istate==null) return Z_STREAM_ERROR;\n    var ret=istate.inflateEnd(this);\n    this.istate = null;\n    return ret;\n}\nZStream.prototype.inflateSync = function(){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSync(this);\n}\nZStream.prototype.inflateSetDictionary = function(dictionary, dictLength){\n    // if(istate == null) return Z_STREAM_ERROR;\n    return istate.inflateSetDictionary(this, dictionary, dictLength);\n}\n\n/*\n\n  public int deflateInit(int level){\n    return deflateInit(level, MAX_WBITS);\n  }\n  public int deflateInit(int level, boolean nowrap){\n    return deflateInit(level, MAX_WBITS, nowrap);\n  }\n  public int deflateInit(int level, int bits){\n    return deflateInit(level, bits, false);\n  }\n  public int deflateInit(int level, int bits, boolean nowrap){\n    dstate=new Deflate();\n    return dstate.deflateInit(this, level, nowrap?-bits:bits);\n  }\n  public int deflate(int flush){\n    if(dstate==null){\n      return Z_STREAM_ERROR;\n    }\n    return dstate.deflate(this, flush);\n  }\n  public int deflateEnd(){\n    if(dstate==null) return Z_STREAM_ERROR;\n    int ret=dstate.deflateEnd();\n    dstate=null;\n    return ret;\n  }\n  public int deflateParams(int level, int strategy){\n    if(dstate==null) return Z_STREAM_ERROR;\n    return dstate.deflateParams(this, level, strategy);\n  }\n  public int deflateSetDictionary (byte[] dictionary, int dictLength){\n    if(dstate == null)\n      return Z_STREAM_ERROR;\n    return dstate.deflateSetDictionary(this, dictionary, dictLength);\n  }\n\n*/\n\n/*\n  // Flush as much pending output as possible. All deflate() output goes\n  // through this function so some applications may wish to modify it\n  // to avoid allocating a large strm->next_out buffer and copying into it.\n  // (See also read_buf()).\n  void flush_pending(){\n    int len=dstate.pending;\n\n    if(len>avail_out) len=avail_out;\n    if(len==0) return;\n\n    if(dstate.pending_buf.length<=dstate.pending_out ||\n       next_out.length<=next_out_index ||\n       dstate.pending_buf.length<(dstate.pending_out+len) ||\n       next_out.length<(next_out_index+len)){\n      System.out.println(dstate.pending_buf.length+\", \"+dstate.pending_out+\n\t\t\t \", \"+next_out.length+\", \"+next_out_index+\", \"+len);\n      System.out.println(\"avail_out=\"+avail_out);\n    }\n\n    System.arraycopy(dstate.pending_buf, dstate.pending_out,\n\t\t     next_out, next_out_index, len);\n\n    next_out_index+=len;\n    dstate.pending_out+=len;\n    total_out+=len;\n    avail_out-=len;\n    dstate.pending-=len;\n    if(dstate.pending==0){\n      dstate.pending_out=0;\n    }\n  }\n\n  // Read a new buffer from the current input stream, update the adler32\n  // and total number of bytes read.  All deflate() input goes through\n  // this function so some applications may wish to modify it to avoid\n  // allocating a large strm->next_in buffer and copying from it.\n  // (See also flush_pending()).\n  int read_buf(byte[] buf, int start, int size) {\n    int len=avail_in;\n\n    if(len>size) len=size;\n    if(len==0) return 0;\n\n    avail_in-=len;\n\n    if(dstate.noheader==0) {\n      adler=_adler.adler32(adler, next_in, next_in_index, len);\n    }\n    System.arraycopy(next_in, next_in_index, buf, start, len);\n    next_in_index  += len;\n    total_in += len;\n    return len;\n  }\n\n  public void free(){\n    next_in=null;\n    next_out=null;\n    msg=null;\n    _adler=null;\n  }\n}\n*/\n\n\n//\n// Inflate.java\n//\n\nfunction Inflate() {\n    this.was = [0];\n}\n\nInflate.prototype.inflateReset = function(z) {\n    if(z == null || z.istate == null) return Z_STREAM_ERROR;\n    \n    z.total_in = z.total_out = 0;\n    z.msg = null;\n    z.istate.mode = z.istate.nowrap!=0 ? BLOCKS : METHOD;\n    z.istate.blocks.reset(z, null);\n    return Z_OK;\n}\n\nInflate.prototype.inflateEnd = function(z){\n    if(this.blocks != null)\n      this.blocks.free(z);\n    this.blocks=null;\n    return Z_OK;\n}\n\nInflate.prototype.inflateInit = function(z, w){\n    z.msg = null;\n    this.blocks = null;\n\n    // handle undocumented nowrap option (no zlib header or check)\n    nowrap = 0;\n    if(w < 0){\n      w = - w;\n      nowrap = 1;\n    }\n\n    // set window size\n    if(w<8 ||w>15){\n      this.inflateEnd(z);\n      return Z_STREAM_ERROR;\n    }\n    this.wbits=w;\n\n    z.istate.blocks=new InfBlocks(z, \n\t\t\t\t  z.istate.nowrap!=0 ? null : this,\n\t\t\t\t  1<<w);\n\n    // reset state\n    this.inflateReset(z);\n    return Z_OK;\n  }\n\nInflate.prototype.inflate = function(z, f){\n    var r, b;\n\n    if(z == null || z.istate == null || z.next_in == null)\n      return Z_STREAM_ERROR;\n    f = f == Z_FINISH ? Z_BUF_ERROR : Z_OK;\n    r = Z_BUF_ERROR;\n    while (true){\n      switch (z.istate.mode){\n      case METHOD:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        if(((z.istate.method = z.next_in[z.next_in_index++])&0xf)!=Z_DEFLATED){\n          z.istate.mode = BAD;\n          z.msg=\"unknown compression method\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        if((z.istate.method>>4)+8>z.istate.wbits){\n          z.istate.mode = BAD;\n          z.msg=\"invalid window size\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n        z.istate.mode=FLAG;\n      case FLAG:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        b = (z.next_in[z.next_in_index++])&0xff;\n\n        if((((z.istate.method << 8)+b) % 31)!=0){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect header check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        if((b&PRESET_DICT)==0){\n          z.istate.mode = BLOCKS;\n          break;\n        }\n        z.istate.mode = DICT4;\n      case DICT4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=DICT3;\n      case DICT3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode=DICT2;\n      case DICT2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode=DICT1;\n      case DICT1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need += (z.next_in[z.next_in_index++]&0xff);\n        z.adler = z.istate.need;\n        z.istate.mode = DICT0;\n        return Z_NEED_DICT;\n      case DICT0:\n        z.istate.mode = BAD;\n        z.msg = \"need dictionary\";\n        z.istate.marker = 0;       // can try inflateSync\n        return Z_STREAM_ERROR;\n      case BLOCKS:\n\n        r = z.istate.blocks.proc(z, r);\n        if(r == Z_DATA_ERROR){\n          z.istate.mode = BAD;\n          z.istate.marker = 0;     // can try inflateSync\n          break;\n        }\n        if(r == Z_OK){\n          r = f;\n        }\n        if(r != Z_STREAM_END){\n          return r;\n        }\n        r = f;\n        z.istate.blocks.reset(z, z.istate.was);\n        if(z.istate.nowrap!=0){\n          z.istate.mode=DONE;\n          break;\n        }\n        z.istate.mode=CHECK4;\n      case CHECK4:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need=((z.next_in[z.next_in_index++]&0xff)<<24)&0xff000000;\n        z.istate.mode=CHECK3;\n      case CHECK3:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<16)&0xff0000;\n        z.istate.mode = CHECK2;\n      case CHECK2:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=((z.next_in[z.next_in_index++]&0xff)<<8)&0xff00;\n        z.istate.mode = CHECK1;\n      case CHECK1:\n\n        if(z.avail_in==0)return r;r=f;\n\n        z.avail_in--; z.total_in++;\n        z.istate.need+=(z.next_in[z.next_in_index++]&0xff);\n\n        if(((z.istate.was[0])) != ((z.istate.need))){\n          z.istate.mode = BAD;\n          z.msg = \"incorrect data check\";\n          z.istate.marker = 5;       // can't try inflateSync\n          break;\n        }\n\n        z.istate.mode = DONE;\n      case DONE:\n        return Z_STREAM_END;\n      case BAD:\n        return Z_DATA_ERROR;\n      default:\n        return Z_STREAM_ERROR;\n      }\n    }\n  }\n\n\nInflate.prototype.inflateSetDictionary = function(z,  dictionary, dictLength) {\n    var index=0;\n    var length = dictLength;\n    if(z==null || z.istate == null|| z.istate.mode != DICT0)\n      return Z_STREAM_ERROR;\n\n    if(z._adler.adler32(1, dictionary, 0, dictLength)!=z.adler){\n      return Z_DATA_ERROR;\n    }\n\n    z.adler = z._adler.adler32(0, null, 0, 0);\n\n    if(length >= (1<<z.istate.wbits)){\n      length = (1<<z.istate.wbits)-1;\n      index=dictLength - length;\n    }\n    z.istate.blocks.set_dictionary(dictionary, index, length);\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n  }\n\n//  static private byte[] mark = {(byte)0, (byte)0, (byte)0xff, (byte)0xff};\nvar mark = [0, 0, 255, 255]\n\nInflate.prototype.inflateSync = function(z){\n    var n;       // number of bytes to look at\n    var p;       // pointer to bytes\n    var m;       // number of marker bytes found in a row\n    var r, w;   // temporaries to save total_in and total_out\n\n    // set up\n    if(z == null || z.istate == null)\n      return Z_STREAM_ERROR;\n    if(z.istate.mode != BAD){\n      z.istate.mode = BAD;\n      z.istate.marker = 0;\n    }\n    if((n=z.avail_in)==0)\n      return Z_BUF_ERROR;\n    p=z.next_in_index;\n    m=z.istate.marker;\n\n    // search\n    while (n!=0 && m < 4){\n      if(z.next_in[p] == mark[m]){\n        m++;\n      }\n      else if(z.next_in[p]!=0){\n        m = 0;\n      }\n      else{\n        m = 4 - m;\n      }\n      p++; n--;\n    }\n\n    // restore\n    z.total_in += p-z.next_in_index;\n    z.next_in_index = p;\n    z.avail_in = n;\n    z.istate.marker = m;\n\n    // return no joy or set up to restart on a new block\n    if(m != 4){\n      return Z_DATA_ERROR;\n    }\n    r=z.total_in;  w=z.total_out;\n    this.inflateReset(z);\n    z.total_in=r;  z.total_out = w;\n    z.istate.mode = BLOCKS;\n    return Z_OK;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. This function is used by one PPP\n  // implementation to provide an additional safety check. PPP uses Z_SYNC_FLUSH\n  // but removes the length bytes of the resulting empty stored block. When\n  // decompressing, PPP checks that at the end of input packet, inflate is\n  // waiting for these length bytes.\nInflate.prototype.inflateSyncPoint = function(z){\n    if(z == null || z.istate == null || z.istate.blocks == null)\n      return Z_STREAM_ERROR;\n    return z.istate.blocks.sync_point();\n}\n\n\n//\n// InfBlocks.java\n//\n\nvar INFBLOCKS_BORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];\n\nfunction InfBlocks(z, checkfn, w) {\n    this.hufts=new Int32Array(MANY*3);\n    this.window=new Uint8Array(w);\n    this.end=w;\n    this.checkfn = checkfn;\n    this.mode = IB_TYPE;\n    this.reset(z, null);\n\n    this.left = 0;            // if STORED, bytes left to copy \n\n    this.table = 0;           // table lengths (14 bits) \n    this.index = 0;           // index into blens (or border) \n    this.blens = null;         // bit lengths of codes \n    this.bb=new Int32Array(1); // bit length tree depth \n    this.tb=new Int32Array(1); // bit length decoding tree \n\n    this.codes = new InfCodes();\n\n    this.last = 0;            // true if this block is the last block \n\n  // mode independent information \n    this.bitk = 0;            // bits in bit buffer \n    this.bitb = 0;            // bit buffer \n    this.read = 0;            // window read pointer \n    this.write = 0;           // window write pointer \n    this.check = 0;          // check on output \n\n    this.inftree=new InfTree();\n}\n\n\n\n\nInfBlocks.prototype.reset = function(z, c){\n    if(c) c[0]=this.check;\n    if(this.mode==IB_CODES){\n      this.codes.free(z);\n    }\n    this.mode=IB_TYPE;\n    this.bitk=0;\n    this.bitb=0;\n    this.read=this.write=0;\n\n    if(this.checkfn)\n      z.adler=this.check=z._adler.adler32(0, null, 0, 0);\n  }\n\n InfBlocks.prototype.proc = function(z, r){\n    var t;              // temporary storage\n    var b;              // bit buffer\n    var k;              // bits in bit buffer\n    var p;              // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n\n    // copy input/output information to locals (UPDATE macro restores)\n    {p=z.next_in_index;n=z.avail_in;b=this.bitb;k=this.bitk;}\n    {q=this.write;m=(q<this.read ? this.read-q-1 : this.end-q);}\n\n    // process input based on current state\n    while(true){\n      switch (this.mode){\n      case IB_TYPE:\n\n\twhile(k<(3)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\tt = (b & 7);\n\tthis.last = t & 1;\n\n\tswitch (t >>> 1){\n        case 0:                         // stored \n          {b>>>=(3);k-=(3);}\n          t = k & 7;                    // go to byte boundary\n\n          {b>>>=(t);k-=(t);}\n          this.mode = IB_LENS;                  // get length of stored block\n          break;\n        case 1:                         // fixed\n          {\n              var bl=new Int32Array(1);\n\t      var bd=new Int32Array(1);\n              var tl=[];\n\t      var td=[];\n\n\t      inflate_trees_fixed(bl, bd, tl, td, z);\n              this.codes.init(bl[0], bd[0], tl[0], 0, td[0], 0, z);\n          }\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_CODES;\n          break;\n        case 2:                         // dynamic\n\n          {b>>>=(3);k-=(3);}\n\n          this.mode = IB_TABLE;\n          break;\n        case 3:                         // illegal\n\n          {b>>>=(3);k-=(3);}\n          this.mode = BAD;\n          z.msg = \"invalid block type\";\n          r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tbreak;\n      case IB_LENS:\n\twhile(k<(32)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tif ((((~b) >>> 16) & 0xffff) != (b & 0xffff)){\n\t  this.mode = BAD;\n\t  z.msg = \"invalid stored block lengths\";\n\t  r = Z_DATA_ERROR;\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\tthis.left = (b & 0xffff);\n\tb = k = 0;                       // dump bits\n\tthis.mode = this.left!=0 ? IB_STORED : (this.last!=0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_STORED:\n\tif (n == 0){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tif(m==0){\n\t  if(q==end&&read!=0){\n\t    q=0; m=(q<this.read ? this.read-q-1 : this.end-q);\n\t  }\n\t  if(m==0){\n\t    this.write=q; \n\t    r=this.inflate_flush(z,r);\n\t    q=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    if(q==this.end && this.read != 0){\n\t      q=0; m = (q < this.read ? this.read-q-1 : this.end-q);\n\t    }\n\t    if(m==0){\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\tt = this.left;\n\tif(t>n) t = n;\n\tif(t>m) t = m;\n\tarrayCopy(z.next_in, p, this.window, q, t);\n\tp += t;  n -= t;\n\tq += t;  m -= t;\n\tif ((this.left -= t) != 0)\n\t  break;\n\tthis.mode = (this.last != 0 ? IB_DRY : IB_TYPE);\n\tbreak;\n      case IB_TABLE:\n\n\twhile(k<(14)){\n\t  if(n!=0){\n\t    r=Z_OK;\n\t  }\n\t  else{\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;\n\t    z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  };\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.table = t = (b & 0x3fff);\n\tif ((t & 0x1f) > 29 || ((t >> 5) & 0x1f) > 29)\n\t  {\n\t    this.mode = IB_BAD;\n\t    z.msg = \"too many length or distance symbols\";\n\t    r = Z_DATA_ERROR;\n\n\t    this.bitb=b; this.bitk=k; \n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    this.write=q;\n\t    return this.inflate_flush(z,r);\n\t  }\n\tt = 258 + (t & 0x1f) + ((t >> 5) & 0x1f);\n\tif(this.blens==null || this.blens.length<t){\n\t    this.blens=new Int32Array(t);\n\t}\n\telse{\n\t  for(var i=0; i<t; i++){\n              this.blens[i]=0;\n          }\n\t}\n\n\t{b>>>=(14);k-=(14);}\n\n\tthis.index = 0;\n\tmode = IB_BTREE;\n      case IB_BTREE:\n\twhile (this.index < 4 + (this.table >>> 10)){\n\t  while(k<(3)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = b&7;\n\n\t  {b>>>=(3);k-=(3);}\n\t}\n\n\twhile(this.index < 19){\n\t  this.blens[INFBLOCKS_BORDER[this.index++]] = 0;\n\t}\n\n\tthis.bb[0] = 7;\n\tt = this.inftree.inflate_trees_bits(this.blens, this.bb, this.tb, this.hufts, z);\n\tif (t != Z_OK){\n\t  r = t;\n\t  if (r == Z_DATA_ERROR){\n\t    this.blens=null;\n\t    this.mode = IB_BAD;\n\t  }\n\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  write=q;\n\t  return this.inflate_flush(z,r);\n\t}\n\n\tthis.index = 0;\n\tthis.mode = IB_DTREE;\n      case IB_DTREE:\n\twhile (true){\n\t  t = this.table;\n\t  if(!(this.index < 258 + (t & 0x1f) + ((t >> 5) & 0x1f))){\n\t    break;\n\t  }\n\n\t  var h; //int[]\n\t  var i, j, c;\n\n\t  t = this.bb[0];\n\n\t  while(k<(t)){\n\t    if(n!=0){\n\t      r=Z_OK;\n\t    }\n\t    else{\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;\n\t      z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    };\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;\n\t    k+=8;\n\t  }\n\n//\t  if (this.tb[0]==-1){\n//            dlog(\"null...\");\n//\t  }\n\n\t  t=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+1];\n\t  c=this.hufts[(this.tb[0]+(b & inflate_mask[t]))*3+2];\n\n\t  if (c < 16){\n\t    b>>>=(t);k-=(t);\n\t    this.blens[this.index++] = c;\n\t  }\n\t  else { // c == 16..18\n\t    i = c == 18 ? 7 : c - 14;\n\t    j = c == 18 ? 11 : 3;\n\n\t    while(k<(t+i)){\n\t      if(n!=0){\n\t\tr=Z_OK;\n\t      }\n\t      else{\n\t\tthis.bitb=b; this.bitk=k; \n\t\tz.avail_in=n;\n\t\tz.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\tthis.write=q;\n\t\treturn this.inflate_flush(z,r);\n\t      };\n\t      n--;\n\t      b|=(z.next_in[p++]&0xff)<<k;\n\t      k+=8;\n\t    }\n\n\t    b>>>=(t);k-=(t);\n\n\t    j += (b & inflate_mask[i]);\n\n\t    b>>>=(i);k-=(i);\n\n\t    i = this.index;\n\t    t = this.table;\n\t    if (i + j > 258 + (t & 0x1f) + ((t >> 5) & 0x1f) ||\n\t\t(c == 16 && i < 1)){\n\t      this.blens=null;\n\t      this.mode = IB_BAD;\n\t      z.msg = \"invalid bit length repeat\";\n\t      r = Z_DATA_ERROR;\n\n\t      this.bitb=b; this.bitk=k; \n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      this.write=q;\n\t      return this.inflate_flush(z,r);\n\t    }\n\n\t    c = c == 16 ? this.blens[i-1] : 0;\n\t    do{\n\t      this.blens[i++] = c;\n\t    }\n\t    while (--j!=0);\n\t    this.index = i;\n\t  }\n\t}\n\n\tthis.tb[0]=-1;\n\t{\n\t    var bl=new Int32Array(1);\n\t    var bd=new Int32Array(1);\n\t    var tl=new Int32Array(1);\n\t    var td=new Int32Array(1);\n\t    bl[0] = 9;         // must be <= 9 for lookahead assumptions\n\t    bd[0] = 6;         // must be <= 9 for lookahead assumptions\n\n\t    t = this.table;\n\t    t = this.inftree.inflate_trees_dynamic(257 + (t & 0x1f), \n\t\t\t\t\t      1 + ((t >> 5) & 0x1f),\n\t\t\t\t\t      this.blens, bl, bd, tl, td, this.hufts, z);\n\n\t    if (t != Z_OK){\n\t        if (t == Z_DATA_ERROR){\n\t            this.blens=null;\n\t            this.mode = BAD;\n\t        }\n\t        r = t;\n\n\t        this.bitb=b; this.bitk=k; \n\t        z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t        this.write=q;\n\t        return this.inflate_flush(z,r);\n\t    }\n\t    this.codes.init(bl[0], bd[0], this.hufts, tl[0], this.hufts, td[0], z);\n\t}\n\tthis.mode = IB_CODES;\n      case IB_CODES:\n\tthis.bitb=b; this.bitk=k;\n\tz.avail_in=n; z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\n\tif ((r = this.codes.proc(this, z, r)) != Z_STREAM_END){\n\t  return this.inflate_flush(z, r);\n\t}\n\tr = Z_OK;\n\tthis.codes.free(z);\n\n\tp=z.next_in_index; n=z.avail_in;b=this.bitb;k=this.bitk;\n\tq=this.write;m = (q < this.read ? this.read-q-1 : this.end-q);\n\n\tif (this.last==0){\n\t  this.mode = IB_TYPE;\n\t  break;\n\t}\n\tthis.mode = IB_DRY;\n      case IB_DRY:\n\tthis.write=q; \n\tr = this.inflate_flush(z, r); \n\tq=this.write; m = (q < this.read ? this.read-q-1 : this.end-q);\n\tif (this.read != this.write){\n\t  this.bitb=b; this.bitk=k; \n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  this.write=q;\n\t  return this.inflate_flush(z, r);\n\t}\n\tmode = DONE;\n      case IB_DONE:\n\tr = Z_STREAM_END;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      case IB_BAD:\n\tr = Z_DATA_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\tthis.bitb=b; this.bitk=k; \n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\tthis.write=q;\n\treturn this.inflate_flush(z, r);\n      }\n    }\n  }\n\nInfBlocks.prototype.free = function(z){\n    this.reset(z, null);\n    this.window=null;\n    this.hufts=null;\n}\n\nInfBlocks.prototype.set_dictionary = function(d, start, n){\n    arrayCopy(d, start, window, 0, n);\n    this.read = this.write = n;\n}\n\n  // Returns true if inflate is currently at the end of a block generated\n  // by Z_SYNC_FLUSH or Z_FULL_FLUSH. \nInfBlocks.prototype.sync_point = function(){\n    return this.mode == IB_LENS;\n}\n\n  // copy as much as possible from the sliding window to the output area\nInfBlocks.prototype.inflate_flush = function(z, r){\n    var n;\n    var p;\n    var q;\n\n    // local copies of source and destination pointers\n    p = z.next_out_index;\n    q = this.read;\n\n    // compute number of bytes to copy as far as end of window\n    n = ((q <= this.write ? this.write : this.end) - q);\n    if (n > z.avail_out) n = z.avail_out;\n    if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n    // update counters\n    z.avail_out -= n;\n    z.total_out += n;\n\n    // update check information\n    if(this.checkfn != null)\n      z.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n    // copy as far as end of window\n    arrayCopy(this.window, q, z.next_out, p, n);\n    p += n;\n    q += n;\n\n    // see if more to copy at beginning of window\n    if (q == this.end){\n      // wrap pointers\n      q = 0;\n      if (this.write == this.end)\n        this.write = 0;\n\n      // compute bytes to copy\n      n = this.write - q;\n      if (n > z.avail_out) n = z.avail_out;\n      if (n!=0 && r == Z_BUF_ERROR) r = Z_OK;\n\n      // update counters\n      z.avail_out -= n;\n      z.total_out += n;\n\n      // update check information\n      if(this.checkfn != null)\n\tz.adler=this.check=z._adler.adler32(this.check, this.window, q, n);\n\n      // copy\n      arrayCopy(this.window, q, z.next_out, p, n);\n      p += n;\n      q += n;\n    }\n\n    // update pointers\n    z.next_out_index = p;\n    this.read = q;\n\n    // done\n    return r;\n  }\n\n//\n// InfCodes.java\n//\n\nvar IC_START=0;  // x: set up for LEN\nvar IC_LEN=1;    // i: get length/literal/eob next\nvar IC_LENEXT=2; // i: getting length extra (have base)\nvar IC_DIST=3;   // i: get distance next\nvar IC_DISTEXT=4;// i: getting distance extra\nvar IC_COPY=5;   // o: copying bytes in window, waiting for space\nvar IC_LIT=6;    // o: got literal, waiting for output space\nvar IC_WASH=7;   // o: got eob, possibly still output waiting\nvar IC_END=8;    // x: got eob and all data flushed\nvar IC_BADCODE=9;// x: got error\n\nfunction InfCodes() {\n}\n\nInfCodes.prototype.init = function(bl, bd, tl, tl_index, td, td_index, z) {\n    this.mode=IC_START;\n    this.lbits=bl;\n    this.dbits=bd;\n    this.ltree=tl;\n    this.ltree_index=tl_index;\n    this.dtree = td;\n    this.dtree_index=td_index;\n    this.tree=null;\n}\n\nInfCodes.prototype.proc = function(s, z, r){ \n    var j;              // temporary storage\n    var t;              // temporary pointer (int[])\n    var tindex;         // temporary pointer\n    var e;              // extra bits or operation\n    var b=0;            // bit buffer\n    var k=0;            // bits in bit buffer\n    var p=0;            // input data pointer\n    var n;              // bytes available there\n    var q;              // output window write pointer\n    var m;              // bytes to end of window or read pointer\n    var f;              // pointer to copy strings from\n\n    // copy input/output information to locals (UPDATE macro restores)\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // process input and output based on current state\n    while (true){\n      switch (this.mode){\n\t// waiting for \"i:\"=input, \"o:\"=output, \"x:\"=nothing\n      case IC_START:         // x: set up for LEN\n\tif (m >= 258 && n >= 10){\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  r = this.inflate_fast(this.lbits, this.dbits, \n\t\t\t   this.ltree, this.ltree_index, \n\t\t\t   this.dtree, this.dtree_index,\n\t\t\t   s, z);\n\n\t  p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n\t  q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t  if (r != Z_OK){\n\t    this.mode = r == Z_STREAM_END ? IC_WASH : IC_BADCODE;\n\t    break;\n\t  }\n\t}\n\tthis.need = this.lbits;\n\tthis.tree = this.ltree;\n\tthis.tree_index=this.ltree_index;\n\n\tthis.mode = IC_LEN;\n      case IC_LEN:           // i: get length/literal/eob next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--;\n\t  b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b&inflate_mask[j]))*3;\n\n\tb>>>=(this.tree[tindex+1]);\n\tk-=(this.tree[tindex+1]);\n\n\te=this.tree[tindex];\n\n\tif(e == 0){               // literal\n\t  this.lit = this.tree[tindex+2];\n\t  this.mode = IC_LIT;\n\t  break;\n\t}\n\tif((e & 16)!=0 ){          // length\n\t  this.get = e & 15;\n\t  this.len = this.tree[tindex+2];\n\t  this.mode = IC_LENEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tif ((e & 32)!=0){               // end of block\n\t  this.mode = IC_WASH;\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid literal/length code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_LENEXT:        // i: getting length extra (have base)\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.len += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.need = this.dbits;\n\tthis.tree = this.dtree;\n\tthis.tree_index = this.dtree_index;\n\tthis.mode = IC_DIST;\n      case IC_DIST:          // i: get distance next\n\tj = this.need;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\ttindex=(this.tree_index+(b & inflate_mask[j]))*3;\n\n\tb>>=this.tree[tindex+1];\n\tk-=this.tree[tindex+1];\n\n\te = (this.tree[tindex]);\n\tif((e & 16)!=0){               // distance\n\t  this.get = e & 15;\n\t  this.dist = this.tree[tindex+2];\n\t  this.mode = IC_DISTEXT;\n\t  break;\n\t}\n\tif ((e & 64) == 0){        // next table\n\t  this.need = e;\n\t  this.tree_index = tindex/3 + this.tree[tindex+2];\n\t  break;\n\t}\n\tthis.mode = IC_BADCODE;        // invalid code\n\tz.msg = \"invalid distance code\";\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_DISTEXT:       // i: getting distance extra\n\tj = this.get;\n\n\twhile(k<(j)){\n\t  if(n!=0)r=Z_OK;\n\t  else{\n\n\t    s.bitb=b;s.bitk=k;\n\t    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t    s.write=q;\n\t    return s.inflate_flush(z,r);\n\t  }\n\t  n--; b|=(z.next_in[p++]&0xff)<<k;\n\t  k+=8;\n\t}\n\n\tthis.dist += (b & inflate_mask[j]);\n\n\tb>>=j;\n\tk-=j;\n\n\tthis.mode = IC_COPY;\n      case IC_COPY:          // o: copying bytes in window, waiting for space\n        f = q - this.dist;\n        while(f < 0){     // modulo window size-\"while\" instead\n          f += s.end;     // of \"if\" handles invalid distances\n\t}\n\twhile (this.len!=0){\n\n\t  if(m==0){\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.write=q; r=s.inflate_flush(z,r);\n\t      q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t      if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\n\t      if(m==0){\n\t\ts.bitb=b;s.bitk=k;\n\t\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t\ts.write=q;\n\t\treturn s.inflate_flush(z,r);\n\t      }  \n\t    }\n\t  }\n\n\t  s.window[q++]=s.window[f++]; m--;\n\n\t  if (f == s.end)\n            f = 0;\n\t  this.len--;\n\t}\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_LIT:           // o: got literal, waiting for output space\n\tif(m==0){\n\t  if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t  if(m==0){\n\t    s.write=q; r=s.inflate_flush(z,r);\n\t    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\t    if(q==s.end&&s.read!=0){q=0;m=q<s.read?s.read-q-1:s.end-q;}\n\t    if(m==0){\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\t      return s.inflate_flush(z,r);\n\t    }\n\t  }\n\t}\n\tr=Z_OK;\n\n\ts.window[q++]=this.lit; m--;\n\n\tthis.mode = IC_START;\n\tbreak;\n      case IC_WASH:           // o: got eob, possibly more output\n\tif (k > 7){        // return unused byte, if any\n\t  k -= 8;\n\t  n++;\n\t  p--;             // can always return one\n\t}\n\n\ts.write=q; r=s.inflate_flush(z,r);\n\tq=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n\tif (s.read != s.write){\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\t  return s.inflate_flush(z,r);\n\t}\n\tthis.mode = IC_END;\n      case IC_END:\n\tr = Z_STREAM_END;\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      case IC_BADCODE:       // x: got error\n\n\tr = Z_DATA_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n\n      default:\n\tr = Z_STREAM_ERROR;\n\n\ts.bitb=b;s.bitk=k;\n\tz.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\ts.write=q;\n\treturn s.inflate_flush(z,r);\n      }\n    }\n  }\n\nInfCodes.prototype.free = function(z){\n    //  ZFREE(z, c);\n}\n\n  // Called with number of bytes left to write in window at least 258\n  // (the maximum string length) and number of input bytes available\n  // at least ten.  The ten bytes are six bytes for the longest length/\n  // distance pair plus four bytes for overloading the bit buffer.\n\nInfCodes.prototype.inflate_fast = function(bl, bd, tl, tl_index, td, td_index, s, z) {\n    var t;                // temporary pointer\n    var   tp;             // temporary pointer (int[])\n    var tp_index;         // temporary pointer\n    var e;                // extra bits or operation\n    var b;                // bit buffer\n    var k;                // bits in bit buffer\n    var p;                // input data pointer\n    var n;                // bytes available there\n    var q;                // output window write pointer\n    var m;                // bytes to end of window or read pointer\n    var ml;               // mask for literal/length tree\n    var md;               // mask for distance tree\n    var c;                // bytes to copy\n    var d;                // distance back to copy from\n    var r;                // copy source pointer\n\n    var tp_index_t_3;     // (tp_index+t)*3\n\n    // load input, output, bit values\n    p=z.next_in_index;n=z.avail_in;b=s.bitb;k=s.bitk;\n    q=s.write;m=q<s.read?s.read-q-1:s.end-q;\n\n    // initialize masks\n    ml = inflate_mask[bl];\n    md = inflate_mask[bd];\n\n    // do until not enough input or output space for fast loop\n    do {                          // assume called with m >= 258 && n >= 10\n      // get literal/length code\n      while(k<(20)){              // max bits for literal/length code\n\tn--;\n\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n      }\n\n      t= b&ml;\n      tp=tl; \n      tp_index=tl_index;\n      tp_index_t_3=(tp_index+t)*3;\n      if ((e = tp[tp_index_t_3]) == 0){\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\ts.window[q++] = tp[tp_index_t_3+2];\n\tm--;\n\tcontinue;\n      }\n      do {\n\n\tb>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\tif((e&16)!=0){\n\t  e &= 15;\n\t  c = tp[tp_index_t_3+2] + (b & inflate_mask[e]);\n\n\t  b>>=e; k-=e;\n\n\t  // decode distance base of block to copy\n\t  while(k<(15)){           // max bits for distance code\n\t    n--;\n\t    b|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t  }\n\n\t  t= b&md;\n\t  tp=td;\n\t  tp_index=td_index;\n          tp_index_t_3=(tp_index+t)*3;\n\t  e = tp[tp_index_t_3];\n\n\t  do {\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    if((e&16)!=0){\n\t      // get extra bits to add to distance base\n\t      e &= 15;\n\t      while(k<(e)){         // get extra bits (up to 13)\n\t\tn--;\n\t\tb|=(z.next_in[p++]&0xff)<<k;k+=8;\n\t      }\n\n\t      d = tp[tp_index_t_3+2] + (b&inflate_mask[e]);\n\n\t      b>>=(e); k-=(e);\n\n\t      // do the copy\n\t      m -= c;\n\t      if (q >= d){                // offset before dest\n\t\t//  just copy\n\t\tr=q-d;\n\t\tif(q-r>0 && 2>(q-r)){           \n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t\telse{\n\t\t  s.window[q++]=s.window[r++]; // minimum count is three,\n\t\t  s.window[q++]=s.window[r++]; // so unroll loop a little\n\t\t  c-=2;\n\t\t}\n\t      }\n\t      else{                  // else offset after destination\n                r=q-d;\n                do{\n                  r+=s.end;          // force pointer in window\n                }while(r<0);         // covers invalid distances\n\t\te=s.end-r;\n\t\tif(c>e){             // if source crosses,\n\t\t  c-=e;              // wrapped copy\n\t\t  if(q-r>0 && e>(q-r)){           \n\t\t    do{s.window[q++] = s.window[r++];}\n\t\t    while(--e!=0);\n\t\t  }\n\t\t  else{\n\t\t    arrayCopy(s.window, r, s.window, q, e);\n\t\t    q+=e; r+=e; e=0;\n\t\t  }\n\t\t  r = 0;                  // copy rest from start of window\n\t\t}\n\n\t      }\n\n\t      // copy all or what's left\n              do{s.window[q++] = s.window[r++];}\n\t\twhile(--c!=0);\n\t      break;\n\t    }\n\t    else if((e&64)==0){\n\t      t+=tp[tp_index_t_3+2];\n\t      t+=(b&inflate_mask[e]);\n\t      tp_index_t_3=(tp_index+t)*3;\n\t      e=tp[tp_index_t_3];\n\t    }\n\t    else{\n\t      z.msg = \"invalid distance code\";\n\n\t      c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t      s.bitb=b;s.bitk=k;\n\t      z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t      s.write=q;\n\n\t      return Z_DATA_ERROR;\n\t    }\n\t  }\n\t  while(true);\n\t  break;\n\t}\n\n\tif((e&64)==0){\n\t  t+=tp[tp_index_t_3+2];\n\t  t+=(b&inflate_mask[e]);\n\t  tp_index_t_3=(tp_index+t)*3;\n\t  if((e=tp[tp_index_t_3])==0){\n\n\t    b>>=(tp[tp_index_t_3+1]); k-=(tp[tp_index_t_3+1]);\n\n\t    s.window[q++]=tp[tp_index_t_3+2];\n\t    m--;\n\t    break;\n\t  }\n\t}\n\telse if((e&32)!=0){\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n \n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_STREAM_END;\n\t}\n\telse{\n\t  z.msg=\"invalid literal/length code\";\n\n\t  c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n\t  s.bitb=b;s.bitk=k;\n\t  z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n\t  s.write=q;\n\n\t  return Z_DATA_ERROR;\n\t}\n      } \n      while(true);\n    } \n    while(m>=258 && n>= 10);\n\n    // not enough input or output--restore pointers and return\n    c=z.avail_in-n;c=(k>>3)<c?k>>3:c;n+=c;p-=c;k-=c<<3;\n\n    s.bitb=b;s.bitk=k;\n    z.avail_in=n;z.total_in+=p-z.next_in_index;z.next_in_index=p;\n    s.write=q;\n\n    return Z_OK;\n}\n\n//\n// InfTree.java\n//\n\nfunction InfTree() {\n}\n\nInfTree.prototype.huft_build = function(b, bindex, n, s, d, e, t, m, hp, hn, v) {\n\n    // Given a list of code lengths and a maximum table size, make a set of\n    // tables to decode that set of codes.  Return Z_OK on success, Z_BUF_ERROR\n    // if the given code set is incomplete (the tables are still built in this\n    // case), Z_DATA_ERROR if the input is invalid (an over-subscribed set of\n    // lengths), or Z_MEM_ERROR if not enough memory.\n\n    var a;                       // counter for codes of length k\n    var f;                       // i repeats in table every f entries\n    var g;                       // maximum code length\n    var h;                       // table level\n    var i;                       // counter, current code\n    var j;                       // counter\n    var k;                       // number of bits in current code\n    var l;                       // bits per table (returned in m)\n    var mask;                    // (1 << w) - 1, to avoid cc -O bug on HP\n    var p;                       // pointer into c[], b[], or v[]\n    var q;                       // points to current table\n    var w;                       // bits before this table == (l * h)\n    var xp;                      // pointer into x\n    var y;                       // number of dummy codes added\n    var z;                       // number of entries in current table\n\n    // Generate counts for each bit length\n\n    p = 0; i = n;\n    do {\n      this.c[b[bindex+p]]++; p++; i--;   // assume all entries <= BMAX\n    }while(i!=0);\n\n    if(this.c[0] == n){                // null input--all zero length codes\n      t[0] = -1;\n      m[0] = 0;\n      return Z_OK;\n    }\n\n    // Find minimum and maximum length, bound *m by those\n    l = m[0];\n    for (j = 1; j <= BMAX; j++)\n      if(this.c[j]!=0) break;\n    k = j;                        // minimum code length\n    if(l < j){\n      l = j;\n    }\n    for (i = BMAX; i!=0; i--){\n      if(this.c[i]!=0) break;\n    }\n    g = i;                        // maximum code length\n    if(l > i){\n      l = i;\n    }\n    m[0] = l;\n\n    // Adjust last length count to fill out codes, if needed\n    for (y = 1 << j; j < i; j++, y <<= 1){\n      if ((y -= this.c[j]) < 0){\n        return Z_DATA_ERROR;\n      }\n    }\n    if ((y -= this.c[i]) < 0){\n      return Z_DATA_ERROR;\n    }\n    this.c[i] += y;\n\n    // Generate starting offsets into the value table for each length\n    this.x[1] = j = 0;\n    p = 1;  xp = 2;\n    while (--i!=0) {                 // note that i == g from above\n      this.x[xp] = (j += this.c[p]);\n      xp++;\n      p++;\n    }\n\n    // Make a table of values in order of bit lengths\n    i = 0; p = 0;\n    do {\n      if ((j = b[bindex+p]) != 0){\n        this.v[this.x[j]++] = i;\n      }\n      p++;\n    }\n    while (++i < n);\n    n = this.x[g];                     // set n to length of v\n\n    // Generate the Huffman codes and for each, make the table entries\n    this.x[0] = i = 0;                 // first Huffman code is zero\n    p = 0;                        // grab values in bit order\n    h = -1;                       // no tables yet--level -1\n    w = -l;                       // bits decoded == (l * h)\n    this.u[0] = 0;                     // just to keep compilers happy\n    q = 0;                        // ditto\n    z = 0;                        // ditto\n\n    // go through the bit lengths (k already is bits in shortest code)\n    for (; k <= g; k++){\n      a = this.c[k];\n      while (a--!=0){\n\t// here i is the Huffman code of length k bits for value *p\n\t// make tables up to required level\n        while (k > w + l){\n          h++;\n          w += l;                 // previous table always l bits\n\t  // compute minimum size table less than or equal to l bits\n          z = g - w;\n          z = (z > l) ? l : z;        // table size upper limit\n          if((f=1<<(j=k-w))>a+1){     // try a k-w bit table\n                                      // too few codes for k-w bit table\n            f -= a + 1;               // deduct codes from patterns left\n            xp = k;\n            if(j < z){\n              while (++j < z){        // try smaller tables up to z bits\n                if((f <<= 1) <= this.c[++xp])\n                  break;              // enough codes to use up j bits\n                f -= this.c[xp];           // else deduct codes from patterns\n              }\n\t    }\n          }\n          z = 1 << j;                 // table entries for j-bit table\n\n\t  // allocate new table\n          if (this.hn[0] + z > MANY){       // (note: doesn't matter for fixed)\n            return Z_DATA_ERROR;       // overflow of MANY\n          }\n          this.u[h] = q = /*hp+*/ this.hn[0];   // DEBUG\n          this.hn[0] += z;\n \n\t  // connect to last table, if there is one\n\t  if(h!=0){\n            this.x[h]=i;           // save pattern for backing up\n            this.r[0]=j;     // bits in this table\n            this.r[1]=l;     // bits to dump before this table\n            j=i>>>(w - l);\n            this.r[2] = (q - this.u[h-1] - j);               // offset to this table\n            arrayCopy(this.r, 0, hp, (this.u[h-1]+j)*3, 3); // connect to last table\n          }\n          else{\n            t[0] = q;               // first table is returned result\n\t  }\n        }\n\n\t// set up table entry in r\n        this.r[1] = (k - w);\n        if (p >= n){\n          this.r[0] = 128 + 64;      // out of values--invalid code\n\t}\n        else if (v[p] < s){\n          this.r[0] = (this.v[p] < 256 ? 0 : 32 + 64);  // 256 is end-of-block\n          this.r[2] = this.v[p++];          // simple code is just the value\n        }\n        else{\n          this.r[0]=(e[this.v[p]-s]+16+64); // non-simple--look up in lists\n          this.r[2]=d[this.v[p++] - s];\n        }\n\n        // fill code-like entries with r\n        f=1<<(k-w);\n        for (j=i>>>w;j<z;j+=f){\n          arrayCopy(this.r, 0, hp, (q+j)*3, 3);\n\t}\n\n\t// backwards increment the k-bit code i\n        for (j = 1 << (k - 1); (i & j)!=0; j >>>= 1){\n          i ^= j;\n\t}\n        i ^= j;\n\n\t// backup over finished tables\n        mask = (1 << w) - 1;      // needed on HP, cc -O bug\n        while ((i & mask) != this.x[h]){\n          h--;                    // don't need to update q\n          w -= l;\n          mask = (1 << w) - 1;\n        }\n      }\n    }\n    // Return Z_BUF_ERROR if we were given an incomplete table\n    return y != 0 && g != 1 ? Z_BUF_ERROR : Z_OK;\n}\n\nInfTree.prototype.inflate_trees_bits = function(c, bb, tb, hp, z) {\n    var result;\n    this.initWorkArea(19);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, 19, 19, null, null, tb, bb, hp, this.hn, this.v);\n\n    if(result == Z_DATA_ERROR){\n      z.msg = \"oversubscribed dynamic bit lengths tree\";\n    }\n    else if(result == Z_BUF_ERROR || bb[0] == 0){\n      z.msg = \"incomplete dynamic bit lengths tree\";\n      result = Z_DATA_ERROR;\n    }\n    return result;\n}\n\nInfTree.prototype.inflate_trees_dynamic = function(nl, nd, c, bl, bd, tl, td, hp, z) {\n    var result;\n\n    // build literal/length tree\n    this.initWorkArea(288);\n    this.hn[0]=0;\n    result = this.huft_build(c, 0, nl, 257, cplens, cplext, tl, bl, hp, this.hn, this.v);\n    if (result != Z_OK || bl[0] == 0){\n      if(result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed literal/length tree\";\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"incomplete literal/length tree\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    // build distance tree\n    this.initWorkArea(288);\n    result = this.huft_build(c, nl, nd, 0, cpdist, cpdext, td, bd, hp, this.hn, this.v);\n\n    if (result != Z_OK || (bd[0] == 0 && nl > 257)){\n      if (result == Z_DATA_ERROR){\n        z.msg = \"oversubscribed distance tree\";\n      }\n      else if (result == Z_BUF_ERROR) {\n        z.msg = \"incomplete distance tree\";\n        result = Z_DATA_ERROR;\n      }\n      else if (result != Z_MEM_ERROR){\n        z.msg = \"empty distance tree with lengths\";\n        result = Z_DATA_ERROR;\n      }\n      return result;\n    }\n\n    return Z_OK;\n}\n/*\n  static int inflate_trees_fixed(int[] bl,  //literal desired/actual bit depth\n                                 int[] bd,  //distance desired/actual bit depth\n                                 int[][] tl,//literal/length tree result\n                                 int[][] td,//distance tree result \n                                 ZStream z  //for memory allocation\n\t\t\t\t ){\n\n*/\n\nfunction inflate_trees_fixed(bl, bd, tl, td, z) {\n    bl[0]=fixed_bl;\n    bd[0]=fixed_bd;\n    tl[0]=fixed_tl;\n    td[0]=fixed_td;\n    return Z_OK;\n}\n\nInfTree.prototype.initWorkArea = function(vsize){\n    if(this.hn==null){\n        this.hn=new Int32Array(1);\n        this.v=new Int32Array(vsize);\n        this.c=new Int32Array(BMAX+1);\n        this.r=new Int32Array(3);\n        this.u=new Int32Array(BMAX);\n        this.x=new Int32Array(BMAX+1);\n    }\n    if(this.v.length<vsize){ \n        this.v=new Int32Array(vsize); \n    }\n    for(var i=0; i<vsize; i++){this.v[i]=0;}\n    for(var i=0; i<BMAX+1; i++){this.c[i]=0;}\n    for(var i=0; i<3; i++){this.r[i]=0;}\n//  for(int i=0; i<BMAX; i++){u[i]=0;}\n    arrayCopy(this.c, 0, this.u, 0, BMAX);\n//  for(int i=0; i<BMAX+1; i++){x[i]=0;}\n    arrayCopy(this.c, 0, this.x, 0, BMAX+1);\n}\n\nvar testArray = new Uint8Array(1);\nvar hasSubarray = (typeof testArray.subarray === 'function');\nvar hasSlice = false; /* (typeof testArray.slice === 'function'); */ // Chrome slice performance is so dire that we're currently not using it...\n\nfunction arrayCopy(src, srcOffset, dest, destOffset, count) {\n    if (count == 0) {\n        return;\n    } \n    if (!src) {\n        throw \"Undef src\";\n    } else if (!dest) {\n        throw \"Undef dest\";\n    }\n\n    if (srcOffset == 0 && count == src.length) {\n        arrayCopy_fast(src, dest, destOffset);\n    } else if (hasSubarray) {\n        arrayCopy_fast(src.subarray(srcOffset, srcOffset + count), dest, destOffset); \n    } else if (src.BYTES_PER_ELEMENT == 1 && count > 100) {\n        arrayCopy_fast(new Uint8Array(src.buffer, src.byteOffset + srcOffset, count), dest, destOffset);\n    } else { \n        arrayCopy_slow(src, srcOffset, dest, destOffset, count);\n    }\n\n}\n\nfunction arrayCopy_slow(src, srcOffset, dest, destOffset, count) {\n\n    // dlog('_slow call: srcOffset=' + srcOffset + '; destOffset=' + destOffset + '; count=' + count);\n\n     for (var i = 0; i < count; ++i) {\n        dest[destOffset + i] = src[srcOffset + i];\n    }\n}\n\nfunction arrayCopy_fast(src, dest, destOffset) {\n    dest.set(src, destOffset);\n}\n\n\n  // largest prime smaller than 65536\nvar ADLER_BASE=65521; \n  // NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1\nvar ADLER_NMAX=5552;\n\nfunction adler32(adler, /* byte[] */ buf,  index, len){\n    if(buf == null){ return 1; }\n\n    var s1=adler&0xffff;\n    var s2=(adler>>16)&0xffff;\n    var k;\n\n    while(len > 0) {\n      k=len<ADLER_NMAX?len:ADLER_NMAX;\n      len-=k;\n      while(k>=16){\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        s1+=buf[index++]&0xff; s2+=s1;\n        k-=16;\n      }\n      if(k!=0){\n        do{\n          s1+=buf[index++]&0xff; s2+=s1;\n        }\n        while(--k!=0);\n      }\n      s1%=ADLER_BASE;\n      s2%=ADLER_BASE;\n    }\n    return (s2<<16)|s1;\n}\n\n\n\nfunction jszlib_inflate_buffer(buffer, start, length, afterUncOffset) {\n    if (!start) {\n        buffer = new Uint8Array(buffer);\n    } else if (!length) {\n        buffer = new Uint8Array(buffer, start, buffer.byteLength - start);\n    } else {\n        buffer = new Uint8Array(buffer, start, length);\n    }\n\n    var z = new ZStream();\n    z.inflateInit(DEF_WBITS, true);\n    z.next_in = buffer;\n    z.next_in_index = 0;\n    z.avail_in = buffer.length;\n\n    var oBlockList = [];\n    var totalSize = 0;\n    while (true) {\n        var obuf = new Uint8Array(32000);\n        z.next_out = obuf;\n        z.next_out_index = 0;\n        z.avail_out = obuf.length;\n        var status = z.inflate(Z_NO_FLUSH);\n        if (status != Z_OK && status != Z_STREAM_END && status != Z_BUF_ERROR) {\n            throw z.msg;\n        }\n        if (z.avail_out != 0) {\n            var newob = new Uint8Array(obuf.length - z.avail_out);\n            arrayCopy(obuf, 0, newob, 0, (obuf.length - z.avail_out));\n            obuf = newob;\n        }\n        oBlockList.push(obuf);\n        totalSize += obuf.length;\n        if (status == Z_STREAM_END || status == Z_BUF_ERROR) {\n            break;\n        }\n    }\n\n    if (afterUncOffset) {\n        afterUncOffset[0] = (start || 0) + z.next_in_index;\n    }\n\n    if (oBlockList.length == 1) {\n        return oBlockList[0].buffer;\n    } else {\n        var out = new Uint8Array(totalSize);\n        var cursor = 0;\n        for (var i = 0; i < oBlockList.length; ++i) {\n            var b = oBlockList[i];\n            arrayCopy(b, 0, out, cursor, b.length);\n            cursor += b.length;\n        }\n        return out.buffer;\n    }\n}\n\nif (typeof(module) !== 'undefined') {\n  module.exports = {\n    inflateBuffer: jszlib_inflate_buffer,\n    arrayCopy: arrayCopy\n  };\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJqcy9iYW0uanMiLCJqcy9iaWd3aWcuanMiLCJqcy9iaW4uanMiLCJqcy9jb2xvci5qcyIsImpzL2Rhcy5qcyIsImpzL2VuY29kZS5qcyIsImpzL2ZldGNod29ya2VyLmpzIiwianMvbGgzdXRpbHMuanMiLCJqcy9zaGExLmpzIiwianMvc3BhbnMuanMiLCJqcy91dGlscy5qcyIsIm5vZGVfbW9kdWxlcy9lczYtcHJvbWlzZS9kaXN0L2VzNi1wcm9taXNlLmpzIiwibm9kZV9tb2R1bGVzL2pzemxpYi9qcy9pbmZsYXRlLmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxJQUFJLE9BQU8sT0FBUCxLQUFvQixXQUF4QixFQUFxQztBQUNqQyxRQUFJLFFBQVEsUUFBUSxTQUFSLENBQVo7QUFDQSxRQUFJLFFBQVEsTUFBTSxLQUFsQjtBQUNBLFFBQUksUUFBUSxNQUFNLEtBQWxCO0FBQ0EsUUFBSSxlQUFlLE1BQU0sWUFBekI7O0FBRUEsUUFBSSxNQUFNLFFBQVEsT0FBUixDQUFWO0FBQ0EsUUFBSSxVQUFVLElBQUksT0FBbEI7QUFDQSxRQUFJLFlBQVksSUFBSSxTQUFwQjtBQUNBLFFBQUksV0FBVyxJQUFJLFFBQW5CO0FBQ0EsUUFBSSxZQUFZLElBQUksU0FBcEI7QUFDQSxRQUFJLFlBQVksSUFBSSxTQUFwQjs7QUFFQSxRQUFJLFdBQVcsUUFBUSxZQUFSLENBQWY7QUFDQSxRQUFJLFVBQVUsU0FBUyxPQUF2QjtBQUNBLFFBQUksU0FBUyxTQUFTLE1BQXRCO0FBQ0EsUUFBSSxXQUFXLFNBQVMsUUFBeEI7QUFDQSxRQUFJLFFBQVEsU0FBUyxLQUFyQjtBQUNIOztBQUdELElBQUksWUFBWSxTQUFoQjtBQUNBLElBQUksWUFBWSxTQUFo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Q0FBd0I7QUFyQlgsS0FBakI7QUF1Qkg7Ozs7QUN6ZkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQ3Y4QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2xuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gcihlLG4sdCl7ZnVuY3Rpb24gbyhpLGYpe2lmKCFuW2ldKXtpZighZVtpXSl7dmFyIGM9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighZiYmYylyZXR1cm4gYyhpLCEwKTtpZih1KXJldHVybiB1KGksITApO3ZhciBhPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIraStcIidcIik7dGhyb3cgYS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGF9dmFyIHA9bltpXT17ZXhwb3J0czp7fX07ZVtpXVswXS5jYWxsKHAuZXhwb3J0cyxmdW5jdGlvbihyKXt2YXIgbj1lW2ldWzFdW3JdO3JldHVybiBvKG58fHIpfSxwLHAuZXhwb3J0cyxyLGUsbix0KX1yZXR1cm4gbltpXS5leHBvcnRzfWZvcih2YXIgdT1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLGk9MDtpPHQubGVuZ3RoO2krKylvKHRbaV0pO3JldHVybiBvfXJldHVybiByfSkoKSIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTFcbi8vXG4vLyBiYW0uanM6IGluZGV4ZWQgYmluYXJ5IGFsaWdubWVudHNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBzcGFucyA9IHJlcXVpcmUoJy4vc3BhbnMnKTtcbiAgICB2YXIgUmFuZ2UgPSBzcGFucy5SYW5nZTtcbiAgICB2YXIgdW5pb24gPSBzcGFucy51bmlvbjtcbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gc3BhbnMuaW50ZXJzZWN0aW9uO1xuXG4gICAgdmFyIGJpbiA9IHJlcXVpcmUoJy4vYmluJyk7XG4gICAgdmFyIHJlYWRJbnQgPSBiaW4ucmVhZEludDtcbiAgICB2YXIgcmVhZFNob3J0ID0gYmluLnJlYWRTaG9ydDtcbiAgICB2YXIgcmVhZEJ5dGUgPSBiaW4ucmVhZEJ5dGU7XG4gICAgdmFyIHJlYWRJbnQ2NCA9IGJpbi5yZWFkSW50NjQ7XG4gICAgdmFyIHJlYWRGbG9hdCA9IGJpbi5yZWFkRmxvYXQ7XG5cbiAgICB2YXIgbGgzdXRpbHMgPSByZXF1aXJlKCcuL2xoM3V0aWxzJyk7XG4gICAgdmFyIHJlYWRWb2IgPSBsaDN1dGlscy5yZWFkVm9iO1xuICAgIHZhciB1bmJnemYgPSBsaDN1dGlscy51bmJnemY7XG4gICAgdmFyIHJlZzJiaW5zID0gbGgzdXRpbHMucmVnMmJpbnM7XG4gICAgdmFyIENodW5rID0gbGgzdXRpbHMuQ2h1bms7XG59XG5cblxudmFyIEJBTV9NQUdJQyA9IDB4MTRkNDE0MjtcbnZhciBCQUlfTUFHSUMgPSAweDE0OTQxNDI7XG5cbnZhciBCYW1GbGFncyA9IHtcbiAgICBNVUxUSVBMRV9TRUdNRU5UUzogICAgICAgMHgxLFxuICAgIEFMTF9TRUdNRU5UU19BTElHTjogICAgICAweDIsXG4gICAgU0VHTUVOVF9VTk1BUFBFRDogICAgICAgIDB4NCxcbiAgICBORVhUX1NFR01FTlRfVU5NQVBQRUQ6ICAgMHg4LFxuICAgIFJFVkVSU0VfQ09NUExFTUVOVDogICAgICAweDEwLFxuICAgIE5FWFRfUkVWRVJTRV9DT01QTEVNRU5UOiAweDIwLFxuICAgIEZJUlNUX1NFR01FTlQ6ICAgICAgICAgICAweDQwLFxuICAgIExBU1RfU0VHTUVOVDogICAgICAgICAgICAweDgwLFxuICAgIFNFQ09OREFSWV9BTElHTk1FTlQ6ICAgICAweDEwMCxcbiAgICBRQ19GQUlMOiAgICAgICAgICAgICAgICAgMHgyMDAsXG4gICAgRFVQTElDQVRFOiAgICAgICAgICAgICAgIDB4NDAwLFxuICAgIFNVUFBMRU1FTlRBUlk6ICAgICAgICAgICAweDgwMFxufTtcblxuZnVuY3Rpb24gQmFtRmlsZSgpIHtcbn1cblxuXG4vLyBDYWxjdWxhdGUgdGhlIGxlbmd0aCAoaW4gYnl0ZXMpIG9mIHRoZSBCQUkgcmVmIHN0YXJ0aW5nIGF0IG9mZnNldC5cbi8vIFJldHVybnMge25iaW4sIGxlbmd0aCwgbWluQmxvY2tJbmRleH1cbmZ1bmN0aW9uIF9nZXRCYWlSZWZMZW5ndGgodW5jYmEsIG9mZnNldCkge1xuICAgIHZhciBwID0gb2Zmc2V0O1xuICAgIHZhciBuYmluID0gcmVhZEludCh1bmNiYSwgcCk7IHAgKz0gNDtcbiAgICBmb3IgKHZhciBiID0gMDsgYiA8IG5iaW47ICsrYikge1xuICAgICAgICB2YXIgYmluID0gcmVhZEludCh1bmNiYSwgcCk7XG4gICAgICAgIHZhciBuY2huayA9IHJlYWRJbnQodW5jYmEsIHArNCk7XG4gICAgICAgIHAgKz0gOCArIChuY2huayAqIDE2KTtcbiAgICB9XG4gICAgdmFyIG5pbnR2ID0gcmVhZEludCh1bmNiYSwgcCk7IHAgKz0gNDtcblxuICAgIHZhciBtaW5CbG9ja0luZGV4ID0gMTAwMDAwMDAwMDtcbiAgICB2YXIgcSA9IHA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuaW50djsgKytpKSB7XG4gICAgICAgIHZhciB2ID0gcmVhZFZvYih1bmNiYSwgcSk7IHEgKz0gODtcbiAgICAgICAgaWYgKHYpIHtcbiAgICAgICAgICAgIHZhciBiaSA9IHYuYmxvY2s7XG4gICAgICAgICAgICBpZiAodi5vZmZzZXQgPiAwKVxuICAgICAgICAgICAgICAgIGJpICs9IDY1NTM2O1xuXG4gICAgICAgICAgICBpZiAoYmkgPCBtaW5CbG9ja0luZGV4KVxuICAgICAgICAgICAgICAgIG1pbkJsb2NrSW5kZXggPSBiaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAgKz0gKG5pbnR2ICogOCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBtaW5CbG9ja0luZGV4OiBtaW5CbG9ja0luZGV4LFxuICAgICAgICBuYmluOiBuYmluLFxuICAgICAgICBsZW5ndGg6IHAgLSBvZmZzZXRcbiAgICB9O1xufVxuXG5cbmZ1bmN0aW9uIG1ha2VCYW0oZGF0YSwgYmFpLCBpbmRleENodW5rcywgY2FsbGJhY2ssIGF0dGVtcHRlZCkge1xuICAgIC8vIERvIGFuIGluaXRpYWwgcHJvYmUgb24gdGhlIEJBTSBmaWxlIHRvIGNhdGNoIGFueSBtaXhlZC1jb250ZW50IGVycm9ycy5cbiAgICBkYXRhLnNsaWNlKDAsIDEwKS5mZXRjaChmdW5jdGlvbihoZWFkZXIpIHtcbiAgICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICAgICAgcmV0dXJuIG1ha2VCYW0yKGRhdGEsIGJhaSwgaW5kZXhDaHVua3MsIGNhbGxiYWNrLCBhdHRlbXB0ZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIFwiQ291bGRuJ3QgYWNjZXNzIEJBTS5cIik7XG4gICAgICAgIH1cbiAgICB9LCB7dGltZW91dDogNTAwMH0pO1xufVxuXG5mdW5jdGlvbiBtYWtlQmFtMihkYXRhLCBiYWksIGluZGV4Q2h1bmtzLCBjYWxsYmFjaywgYXR0ZW1wdGVkKSB7XG4gICAgdmFyIGJhbSA9IG5ldyBCYW1GaWxlKCk7XG4gICAgYmFtLmRhdGEgPSBkYXRhO1xuICAgIGJhbS5iYWkgPSBiYWk7XG4gICAgYmFtLmluZGV4Q2h1bmtzID0gaW5kZXhDaHVua3M7XG5cbiAgICB2YXIgbWluQmxvY2tJbmRleCA9IGJhbS5pbmRleENodW5rcyA/IGJhbS5pbmRleENodW5rcy5taW5CbG9ja0luZGV4IDogMTAwMDAwMDAwMDtcblxuICAgIC8vIEZpbGxzIG91dCBiYW0uY2hyVG9JbmRleCBhbmQgYmFtLmluZGV4VG9DaHIgYmFzZWQgb24gdGhlIGZpcnN0IGZldyBieXRlcyBvZiB0aGUgQkFNLlxuICAgIGZ1bmN0aW9uIHBhcnNlQmFtSGVhZGVyKHIpIHtcbiAgICAgICAgaWYgKCFyKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgXCJDb3VsZG4ndCBhY2Nlc3MgQkFNXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHVuYyA9IHVuYmd6ZihyLCByLmJ5dGVMZW5ndGgpO1xuICAgICAgICB2YXIgdW5jYmEgPSBuZXcgVWludDhBcnJheSh1bmMpO1xuXG4gICAgICAgIHZhciBtYWdpYyA9IHJlYWRJbnQodW5jYmEsIDApO1xuICAgICAgICBpZiAobWFnaWMgIT0gQkFNX01BR0lDKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgXCJOb3QgYSBCQU0gZmlsZSwgbWFnaWM9MHhcIiArIG1hZ2ljLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGhlYWRMZW4gPSByZWFkSW50KHVuY2JhLCA0KTtcbiAgICAgICAgdmFyIGhlYWRlciA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhlYWRMZW47ICsraSkge1xuICAgICAgICAgICAgaGVhZGVyICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodW5jYmFbaSArIDhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuUmVmID0gcmVhZEludCh1bmNiYSwgaGVhZExlbiArIDgpO1xuICAgICAgICB2YXIgcCA9IGhlYWRMZW4gKyAxMjtcblxuICAgICAgICBiYW0uY2hyVG9JbmRleCA9IHt9O1xuICAgICAgICBiYW0uaW5kZXhUb0NociA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5SZWY7ICsraSkge1xuICAgICAgICAgICAgdmFyIGxOYW1lID0gcmVhZEludCh1bmNiYSwgcCk7XG4gICAgICAgICAgICB2YXIgbmFtZSA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsTmFtZS0xOyArK2opIHtcbiAgICAgICAgICAgICAgICBuYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUodW5jYmFbcCArIDQgKyBqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgbFJlZiA9IHJlYWRJbnQodW5jYmEsIHAgKyBsTmFtZSArIDQpO1xuICAgICAgICAgICAgYmFtLmNoclRvSW5kZXhbbmFtZV0gPSBpO1xuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZignY2hyJykgPT0gMCkge1xuICAgICAgICAgICAgICAgIGJhbS5jaHJUb0luZGV4W25hbWUuc3Vic3RyaW5nKDMpXSA9IGk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJhbS5jaHJUb0luZGV4WydjaHInICsgbmFtZV0gPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmFtLmluZGV4VG9DaHIucHVzaChuYW1lKTtcblxuICAgICAgICAgICAgcCA9IHAgKyA4ICsgbE5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYmFtLmluZGljZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhiYW0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VCYWkoaGVhZGVyKSB7XG4gICAgICAgIGlmICghaGVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJDb3VsZG4ndCBhY2Nlc3MgQkFJXCI7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5jYmEgPSBuZXcgVWludDhBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgYmFpTWFnaWMgPSByZWFkSW50KHVuY2JhLCAwKTtcbiAgICAgICAgaWYgKGJhaU1hZ2ljICE9IEJBSV9NQUdJQykge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdOb3QgYSBCQUkgZmlsZSwgbWFnaWM9MHgnICsgYmFpTWFnaWMudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBucmVmID0gcmVhZEludCh1bmNiYSwgNCk7XG5cbiAgICAgICAgYmFtLmluZGljZXMgPSBbXTtcblxuICAgICAgICB2YXIgcCA9IDg7XG4gICAgICAgIGZvciAodmFyIHJlZiA9IDA7IHJlZiA8IG5yZWY7ICsrcmVmKSB7XG4gICAgICAgICAgICB2YXIgYmxvY2tTdGFydCA9IHA7XG4gICAgICAgICAgICB2YXIgbyA9IF9nZXRCYWlSZWZMZW5ndGgodW5jYmEsIGJsb2NrU3RhcnQpO1xuICAgICAgICAgICAgcCArPSBvLmxlbmd0aDtcblxuICAgICAgICAgICAgbWluQmxvY2tJbmRleCA9IE1hdGgubWluKG8ubWluQmxvY2tJbmRleCwgbWluQmxvY2tJbmRleCk7XG5cbiAgICAgICAgICAgIHZhciBuYmluID0gby5uYmluO1xuXG4gICAgICAgICAgICBpZiAobmJpbiA+IDApIHtcbiAgICAgICAgICAgICAgICBiYW0uaW5kaWNlc1tyZWZdID0gbmV3IFVpbnQ4QXJyYXkoaGVhZGVyLCBibG9ja1N0YXJ0LCBwIC0gYmxvY2tTdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIWJhbS5pbmRleENodW5rcykge1xuICAgICAgICBiYW0uYmFpLmZldGNoKGZ1bmN0aW9uKGhlYWRlcikgeyAgIC8vIERvIHdlIHJlYWxseSBuZWVkIHRvIGZldGNoIHRoZSB3aG9sZSB0aGluZz8gOi0oXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gcGFyc2VCYWkoaGVhZGVyKTtcbiAgICAgICAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoYmFtLmJhaS51cmwgJiYgdHlwZW9mKGF0dGVtcHRlZCkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxyZWFkeSBhdHRlbXB0ZWQgeC5iYW0uYmFpIG5vdCB0aGVyZSBzbyBub3cgdHJ5aW5nIHguYmFpXG4gICAgICAgICAgICAgICAgICAgIGJhbS5iYWkudXJsID0gYmFtLmRhdGEudXJsLnJlcGxhY2UobmV3IFJlZ0V4cCgnLmJhbSQnKSwgJy5iYWknKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAvLyBUcnVlIGxldHMgdXMga25vdyB3ZSBhcmUgbWFraW5nIGEgc2Vjb25kIGF0dGVtcHRcbiAgICAgICAgICAgICAgICAgICAgbWFrZUJhbTIoZGF0YSwgYmFtLmJhaSwgaW5kZXhDaHVua3MsIGNhbGxiYWNrLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlJ3ZlIGF0dGVtcHRlZCB4LmJhbS5iYWkgJiB4LmJhaSBhbmQgbm90aGluZyB3b3JrZWRcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBiYW0uZGF0YS5zbGljZSgwLCBtaW5CbG9ja0luZGV4KS5mZXRjaChwYXJzZUJhbUhlYWRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pOyAgIC8vIFRpbWVvdXQgb24gZmlyc3QgcmVxdWVzdCB0byBjYXRjaCBDaHJvbWUgbWl4ZWQtY29udGVudCBlcnJvci5cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2h1bmtzID0gYmFtLmluZGV4Q2h1bmtzLmNodW5rcztcbiAgICAgICAgYmFtLmluZGljZXMgPSBbXVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICBiYW0uaW5kaWNlc1tpXSA9IG51bGw7ICAvLyBUbyBiZSBmaWxsZWQgb3V0IGxhemlseSBhcyBuZWVkZWRcbiAgICAgICAgfVxuICAgICAgICBiYW0uZGF0YS5zbGljZSgwLCBtaW5CbG9ja0luZGV4KS5mZXRjaChwYXJzZUJhbUhlYWRlcik7XG4gICAgfVxufVxuXG5cblxuQmFtRmlsZS5wcm90b3R5cGUuYmxvY2tzRm9yUmFuZ2UgPSBmdW5jdGlvbihyZWZJZCwgbWluLCBtYXgpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGljZXNbcmVmSWRdO1xuICAgIGlmICghaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHZhciBpbnRCaW5zTCA9IHJlZzJiaW5zKG1pbiwgbWF4KTtcbiAgICB2YXIgaW50QmlucyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW50Qmluc0wubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaW50Qmluc1tpbnRCaW5zTFtpXV0gPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgbGVhZkNodW5rcyA9IFtdLCBvdGhlckNodW5rcyA9IFtdO1xuXG4gICAgdmFyIG5iaW4gPSByZWFkSW50KGluZGV4LCAwKTtcbiAgICB2YXIgcCA9IDQ7XG4gICAgZm9yICh2YXIgYiA9IDA7IGIgPCBuYmluOyArK2IpIHtcbiAgICAgICAgdmFyIGJpbiA9IHJlYWRJbnQoaW5kZXgsIHApO1xuICAgICAgICB2YXIgbmNobmsgPSByZWFkSW50KGluZGV4LCBwKzQpO1xuLy8gICAgICAgIGRsb2coJ2Jpbj0nICsgYmluICsgJzsgbmNobms9JyArIG5jaG5rKTtcbiAgICAgICAgcCArPSA4O1xuICAgICAgICBpZiAoaW50Qmluc1tiaW5dKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IG5jaG5rOyArK2MpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3MgPSByZWFkVm9iKGluZGV4LCBwKTtcbiAgICAgICAgICAgICAgICB2YXIgY2UgPSByZWFkVm9iKGluZGV4LCBwICsgOCk7XG4gICAgICAgICAgICAgICAgKGJpbiA8IDQ2ODEgPyBvdGhlckNodW5rcyA6IGxlYWZDaHVua3MpLnB1c2gobmV3IENodW5rKGNzLCBjZSkpO1xuICAgICAgICAgICAgICAgIHAgKz0gMTY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwICs9ICAobmNobmsgKiAxNik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ2xlYWZDaHVua3MgPSAnICsgSlNPTi5zdHJpbmdpZnkobGVhZkNodW5rcykpO1xuICAgIC8vIGNvbnNvbGUubG9nKCdvdGhlckNodW5rcyA9ICcgKyBKU09OLnN0cmluZ2lmeShvdGhlckNodW5rcykpO1xuXG4gICAgdmFyIG5pbnR2ID0gcmVhZEludChpbmRleCwgcCk7XG4gICAgLy8gY29uc29sZS5sb2coJ25pbnR2PScgKyBuaW50dik7XG4gICAgdmFyIGxvd2VzdCA9IG51bGw7XG4gICAgdmFyIG1pbkxpbiA9IE1hdGgubWluKG1pbj4+MTQsIG5pbnR2IC0gMSksIG1heExpbiA9IE1hdGgubWluKG1heD4+MTQsIG5pbnR2IC0gMSk7XG4gICAgZm9yICh2YXIgaSA9IG1pbkxpbjsgaSA8PSBtYXhMaW47ICsraSkge1xuICAgICAgICB2YXIgbGIgPSAgcmVhZFZvYihpbmRleCwgcCArIDQgKyAoaSAqIDgpKTtcbiAgICAgICAgaWYgKCFsYikge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsb3dlc3QgfHwgbGIuYmxvY2sgPCBsb3dlc3QuYmxvY2sgfHwgKGxiLmJsb2NrID09IGxvd2VzdC5ibG9jayAmJiBsYi5vZmZzZXQgPCBsb3dlc3Qub2Zmc2V0KSkge1xuICAgICAgICAgICAgbG93ZXN0ID0gbGI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ0xvd2VzdCBMQiA9ICcgKyBsb3dlc3QpO1xuXG4gICAgdmFyIHBydW5lZE90aGVyQ2h1bmtzID0gW107XG4gICAgaWYgKGxvd2VzdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3RoZXJDaHVua3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaG5rID0gb3RoZXJDaHVua3NbaV07XG4gICAgICAgICAgICBpZiAoY2huay5tYXh2LmJsb2NrID4gbG93ZXN0LmJsb2NrIHx8IChjaG5rLm1heHYuYmxvY2sgPT0gbG93ZXN0LmJsb2NrICYmIGNobmsubWF4di5vZmZzZXQgPj0gbG93ZXN0Lm9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICBwcnVuZWRPdGhlckNodW5rcy5wdXNoKGNobmspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKCdwcnVuZWRPdGhlckNodW5rcyA9ICcgKyBKU09OLnN0cmluZ2lmeShwcnVuZWRPdGhlckNodW5rcykpO1xuICAgIG90aGVyQ2h1bmtzID0gcHJ1bmVkT3RoZXJDaHVua3M7XG5cbiAgICB2YXIgaW50Q2h1bmtzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvdGhlckNodW5rcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpbnRDaHVua3MucHVzaChvdGhlckNodW5rc1tpXSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVhZkNodW5rcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpbnRDaHVua3MucHVzaChsZWFmQ2h1bmtzW2ldKTtcbiAgICB9XG5cbiAgICBpbnRDaHVua3Muc29ydChmdW5jdGlvbihjMCwgYzEpIHtcbiAgICAgICAgdmFyIGRpZiA9IGMwLm1pbnYuYmxvY2sgLSBjMS5taW52LmJsb2NrO1xuICAgICAgICBpZiAoZGlmICE9IDApIHtcbiAgICAgICAgICAgIHJldHVybiBkaWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYzAubWludi5vZmZzZXQgLSBjMS5taW52Lm9mZnNldDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBtZXJnZWRDaHVua3MgPSBbXTtcbiAgICBpZiAoaW50Q2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIGN1ciA9IGludENodW5rc1swXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBpbnRDaHVua3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBuYyA9IGludENodW5rc1tpXTtcbiAgICAgICAgICAgIGlmIChuYy5taW52LmJsb2NrID09IGN1ci5tYXh2LmJsb2NrIC8qICYmIG5jLm1pbnYub2Zmc2V0ID09IGN1ci5tYXh2Lm9mZnNldCAqLykgeyAvLyBubyBwb2ludCBzcGxpdHRpbmcgbWlkLWJsb2NrXG4gICAgICAgICAgICAgICAgY3VyID0gbmV3IENodW5rKGN1ci5taW52LCBuYy5tYXh2KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkQ2h1bmtzLnB1c2goY3VyKTtcbiAgICAgICAgICAgICAgICBjdXIgPSBuYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtZXJnZWRDaHVua3MucHVzaChjdXIpO1xuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygnbWVyZ2VkQ2h1bmtzID0gJyArIEpTT04uc3RyaW5naWZ5KG1lcmdlZENodW5rcykpO1xuXG4gICAgcmV0dXJuIG1lcmdlZENodW5rcztcbn1cblxuQmFtRmlsZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBjYWxsYmFjaywgb3B0cykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG5cbiAgICB2YXIgY2hySWQgPSB0aGlzLmNoclRvSW5kZXhbY2hyXTtcbiAgICB2YXIgY2h1bmtzO1xuICAgIGlmIChjaHJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNodW5rcyA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZldGNoIHRoaXMgcG9ydGlvbiBvZiB0aGUgQkFJIGlmIGl0IGhhc24ndCBiZWVuIGxvYWRlZCB5ZXQuXG4gICAgICAgIGlmICh0aGlzLmluZGljZXNbY2hySWRdID09PSBudWxsICYmIHRoaXMuaW5kZXhDaHVua3MuY2h1bmtzW2NocklkXSkge1xuICAgICAgICAgICAgdmFyIHN0YXJ0X3N0b3AgPSB0aGlzLmluZGV4Q2h1bmtzLmNodW5rc1tjaHJJZF07XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5iYWkuc2xpY2Uoc3RhcnRfc3RvcFswXSwgc3RhcnRfc3RvcFsxXSkuZmV0Y2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljZXNbY2hySWRdID0gYnVmZmVyO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoKGNociwgbWluLCBtYXgsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICAgICAgICAgIH0uYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjaHVua3MgPSB0aGlzLmJsb2Nrc0ZvclJhbmdlKGNocklkLCBtaW4sIG1heCk7XG4gICAgICAgIGlmICghY2h1bmtzKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCAnRXJyb3IgaW4gaW5kZXggZmV0Y2gnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICB2YXIgcmVjb3JkcyA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGRhdGE7XG5cbiAgICBmdW5jdGlvbiB0cmFtcCgpIHtcbiAgICAgICAgaWYgKGluZGV4ID49IGNodW5rcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhyZWNvcmRzKTtcbiAgICAgICAgfSBlbHNlIGlmICghZGF0YSkge1xuICAgICAgICAgICAgdmFyIGMgPSBjaHVua3NbaW5kZXhdO1xuICAgICAgICAgICAgdmFyIGZldGNoTWluID0gYy5taW52LmJsb2NrO1xuICAgICAgICAgICAgdmFyIGZldGNoTWF4ID0gYy5tYXh2LmJsb2NrICsgKDE8PDE2KTsgLy8gKnNpZ2gqXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZmV0Y2hpbmcgJyArIGZldGNoTWluICsgJzonICsgZmV0Y2hNYXgpO1xuICAgICAgICAgICAgdGhpc0IuZGF0YS5zbGljZShmZXRjaE1pbiwgZmV0Y2hNYXggLSBmZXRjaE1pbikuZmV0Y2goZnVuY3Rpb24ocikge1xuICAgICAgICAgICAgICAgIGRhdGEgPSB1bmJnemYociwgYy5tYXh2LmJsb2NrIC0gYy5taW52LmJsb2NrICsgMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW1wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuICAgICAgICAgICAgdmFyIGZpbmlzaGVkID0gdGhpc0IucmVhZEJhbVJlY29yZHMoYmEsIGNodW5rc1tpbmRleF0ubWludi5vZmZzZXQsIHJlY29yZHMsIG1pbiwgbWF4LCBjaHJJZCwgb3B0cyk7XG4gICAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgICAgICsraW5kZXg7XG4gICAgICAgICAgICBpZiAoZmluaXNoZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlY29yZHMpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFtcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRyYW1wKCk7XG59XG5cbnZhciBTRVFSRVRfREVDT0RFUiA9IFsnPScsICdBJywgJ0MnLCAneCcsICdHJywgJ3gnLCAneCcsICd4JywgJ1QnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAnTiddO1xudmFyIENJR0FSX0RFQ09ERVIgPSBbJ00nLCAnSScsICdEJywgJ04nLCAnUycsICdIJywgJ1AnLCAnPScsICdYJywgJz8nLCAnPycsICc/JywgJz8nLCAnPycsICc/JywgJz8nXTtcblxuZnVuY3Rpb24gQmFtUmVjb3JkKCkge1xufVxuXG5CYW1GaWxlLnByb3RvdHlwZS5yZWFkQmFtUmVjb3JkcyA9IGZ1bmN0aW9uKGJhLCBvZmZzZXQsIHNpbmssIG1pbiwgbWF4LCBjaHJJZCwgb3B0cykge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBibG9ja1NpemUgPSByZWFkSW50KGJhLCBvZmZzZXQpO1xuICAgICAgICB2YXIgYmxvY2tFbmQgPSBvZmZzZXQgKyBibG9ja1NpemUgKyA0O1xuICAgICAgICBpZiAoYmxvY2tFbmQgPiBiYS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvcmQgPSBuZXcgQmFtUmVjb3JkKCk7XG5cbiAgICAgICAgdmFyIHJlZklEID0gcmVhZEludChiYSwgb2Zmc2V0ICsgNCk7XG4gICAgICAgIHZhciBwb3MgPSByZWFkSW50KGJhLCBvZmZzZXQgKyA4KTtcbiAgICAgICAgXG4gICAgICAgIHZhciBibW4gPSByZWFkSW50KGJhLCBvZmZzZXQgKyAxMik7XG4gICAgICAgIHZhciBiaW4gPSAoYm1uICYgMHhmZmZmMDAwMCkgPj4gMTY7XG4gICAgICAgIHZhciBtcSA9IChibW4gJiAweGZmMDApID4+IDg7XG4gICAgICAgIHZhciBubCA9IGJtbiAmIDB4ZmY7XG5cbiAgICAgICAgdmFyIGZsYWdfbmMgPSByZWFkSW50KGJhLCBvZmZzZXQgKyAxNik7XG4gICAgICAgIHZhciBmbGFnID0gKGZsYWdfbmMgJiAweGZmZmYwMDAwKSA+PiAxNjtcbiAgICAgICAgdmFyIG5jID0gZmxhZ19uYyAmIDB4ZmZmZjtcbiAgICBcbiAgICAgICAgdmFyIGxzZXEgPSByZWFkSW50KGJhLCBvZmZzZXQgKyAyMCk7XG4gICAgICAgIFxuICAgICAgICB2YXIgbmV4dFJlZiAgPSByZWFkSW50KGJhLCBvZmZzZXQgKyAyNCk7XG4gICAgICAgIHZhciBuZXh0UG9zID0gcmVhZEludChiYSwgb2Zmc2V0ICsgMjgpO1xuICAgICAgICBcbiAgICAgICAgdmFyIHRsZW4gPSByZWFkSW50KGJhLCBvZmZzZXQgKyAzMik7XG4gICAgXG4gICAgICAgIHJlY29yZC5zZWdtZW50ID0gdGhpcy5pbmRleFRvQ2hyW3JlZklEXTtcbiAgICAgICAgcmVjb3JkLmZsYWcgPSBmbGFnO1xuICAgICAgICByZWNvcmQucG9zID0gcG9zO1xuICAgICAgICByZWNvcmQubXEgPSBtcTtcbiAgICAgICAgaWYgKG9wdHMubGlnaHQpXG4gICAgICAgICAgICByZWNvcmQuc2VxTGVuZ3RoID0gbHNlcTtcblxuICAgICAgICBpZiAoIW9wdHMubGlnaHQgfHwgb3B0cy5pbmNsdWRlTmFtZSkge1xuICAgICAgICAgICAgdmFyIHJlYWROYW1lID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5sLTE7ICsraikge1xuICAgICAgICAgICAgICAgIHJlYWROYW1lICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbb2Zmc2V0ICsgMzYgKyBqXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmQucmVhZE5hbWUgPSByZWFkTmFtZTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKCFvcHRzLmxpZ2h0KSB7XG4gICAgICAgICAgICBpZiAobmV4dFJlZiA+PSAwKSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkLm5leHRTZWdtZW50ID0gdGhpcy5pbmRleFRvQ2hyW25leHRSZWZdO1xuICAgICAgICAgICAgICAgIHJlY29yZC5uZXh0UG9zID0gbmV4dFBvcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgcCA9IG9mZnNldCArIDM2ICsgbmw7XG5cbiAgICAgICAgICAgIHZhciBjaWdhciA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBuYzsgKytjKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNpZ29wID0gcmVhZEludChiYSwgcCk7XG4gICAgICAgICAgICAgICAgY2lnYXIgPSBjaWdhciArIChjaWdvcD4+NCkgKyBDSUdBUl9ERUNPREVSW2NpZ29wICYgMHhmXTtcbiAgICAgICAgICAgICAgICBwICs9IDQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWNvcmQuY2lnYXIgPSBjaWdhcjtcbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgc2VxID0gJyc7XG4gICAgICAgICAgICB2YXIgc2VxQnl0ZXMgPSAobHNlcSArIDEpID4+IDE7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlcUJ5dGVzOyArK2opIHtcbiAgICAgICAgICAgICAgICB2YXIgc2IgPSBiYVtwICsgal07XG4gICAgICAgICAgICAgICAgc2VxICs9IFNFUVJFVF9ERUNPREVSWyhzYiAmIDB4ZjApID4+IDRdO1xuICAgICAgICAgICAgICAgIGlmIChzZXEubGVuZ3RoIDwgbHNlcSlcbiAgICAgICAgICAgICAgICAgICAgc2VxICs9IFNFUVJFVF9ERUNPREVSWyhzYiAmIDB4MGYpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHAgKz0gc2VxQnl0ZXM7XG4gICAgICAgICAgICByZWNvcmQuc2VxID0gc2VxO1xuXG4gICAgICAgICAgICB2YXIgcXNlcSA9ICcnO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsc2VxOyArK2opIHtcbiAgICAgICAgICAgICAgICBxc2VxICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbcCArIGpdICsgMzMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCArPSBsc2VxO1xuICAgICAgICAgICAgcmVjb3JkLnF1YWxzID0gcXNlcTtcblxuICAgICAgICAgICAgd2hpbGUgKHAgPCBibG9ja0VuZCkge1xuICAgICAgICAgICAgICAgIHZhciB0YWcgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJhW3BdLCBiYVtwICsgMV0pO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlID0gU3RyaW5nLmZyb21DaGFyQ29kZShiYVtwICsgMl0pO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdBJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbcCArIDNdKTtcbiAgICAgICAgICAgICAgICAgICAgcCArPSA0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnaScgfHwgdHlwZSA9PSAnSScpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZWFkSW50KGJhLCBwICsgMyk7XG4gICAgICAgICAgICAgICAgICAgIHAgKz0gNztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT0gJ2MnIHx8IHR5cGUgPT0gJ0MnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYmFbcCArIDNdO1xuICAgICAgICAgICAgICAgICAgICBwICs9IDQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdzJyB8fCB0eXBlID09ICdTJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlYWRTaG9ydChiYSwgcCArIDMpO1xuICAgICAgICAgICAgICAgICAgICBwICs9IDU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdmJykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHJlYWRGbG9hdChiYSwgcCArIDMpO1xuICAgICAgICAgICAgICAgICAgICBwICs9IDc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09ICdaJyB8fCB0eXBlID09ICdIJykge1xuICAgICAgICAgICAgICAgICAgICBwICs9IDM7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYyA9IGJhW3ArK107XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2MgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNjKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PSAnQicpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF0eXBlID0gU3RyaW5nLmZyb21DaGFyQ29kZShiYVtwICsgM10pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYWxlbiA9IHJlYWRJbnQoYmEsIHAgKyA0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW47XG4gICAgICAgICAgICAgICAgICAgIHZhciByZWFkZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHlwZSA9PSAnaScgfHwgYXR5cGUgPT0gJ0knIHx8IGF0eXBlID09ICdmJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbiA9IDQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR5cGUgPT0gJ2YnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IHJlYWRGbG9hdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkSW50O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0eXBlID09ICdzJyB8fCBhdHlwZSA9PSAnUycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW4gPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZFNob3J0O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0eXBlID09ICdjJyB8fCBhdHlwZSA9PSAnQycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW4gPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZEJ5dGU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyAnVW5rbm93biBhcnJheSB0eXBlICcgKyBhdHlwZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHAgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnB1c2gocmVhZGVyKGJhLCBwKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwICs9IGVsZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnVW5rbm93biB0eXBlICcrIHR5cGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlY29yZFt0YWddID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW1pbiB8fCByZWNvcmQucG9zIDw9IG1heCAmJiByZWNvcmQucG9zICsgbHNlcSA+PSBtaW4pIHtcbiAgICAgICAgICAgIGlmIChjaHJJZCA9PT0gdW5kZWZpbmVkIHx8IHJlZklEID09IGNocklkKSB7XG4gICAgICAgICAgICAgICAgc2luay5wdXNoKHJlY29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlY29yZC5wb3MgPiBtYXgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIG9mZnNldCA9IGJsb2NrRW5kO1xuICAgIH1cblxuICAgIC8vIEV4aXRzIHZpYSB0b3Agb2YgbG9vcC5cbn07XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgbWFrZUJhbTogbWFrZUJhbSxcbiAgICAgICAgQkFNX01BR0lDOiBCQU1fTUFHSUMsXG4gICAgICAgIEJBSV9NQUdJQzogQkFJX01BR0lDLFxuICAgICAgICBCYW1GbGFnczogQmFtRmxhZ3NcbiAgICB9O1xufVxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIGJpZ3dpZy5qczogaW5kZXhlZCBiaW5hcnkgV0lHIChhbmQgQkVEKSBmaWxlc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuaWYgKHR5cGVvZihyZXF1aXJlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgc3BhbnMgPSByZXF1aXJlKCcuL3NwYW5zJyk7XG4gICAgdmFyIFJhbmdlID0gc3BhbnMuUmFuZ2U7XG4gICAgdmFyIHVuaW9uID0gc3BhbnMudW5pb247XG4gICAgdmFyIGludGVyc2VjdGlvbiA9IHNwYW5zLmludGVyc2VjdGlvbjtcblxuICAgIHZhciBkYXMgPSByZXF1aXJlKCcuL2RhcycpO1xuICAgIHZhciBEQVNGZWF0dXJlID0gZGFzLkRBU0ZlYXR1cmU7XG4gICAgdmFyIERBU0dyb3VwID0gZGFzLkRBU0dyb3VwO1xuXG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBzaGFsbG93Q29weSA9IHV0aWxzLnNoYWxsb3dDb3B5O1xuXG4gICAgdmFyIGJpbiA9IHJlcXVpcmUoJy4vYmluJyk7XG4gICAgdmFyIHJlYWRJbnQgPSBiaW4ucmVhZEludDtcblxuICAgIHZhciBqc3psaWIgPSByZXF1aXJlKCdqc3psaWInKTtcbiAgICB2YXIganN6bGliX2luZmxhdGVfYnVmZmVyID0ganN6bGliLmluZmxhdGVCdWZmZXI7XG4gICAgdmFyIGFycmF5Q29weSA9IGpzemxpYi5hcnJheUNvcHk7XG59XG5cbnZhciBCSUdfV0lHX01BR0lDID0gMHg4ODhGRkMyNjtcbnZhciBCSUdfV0lHX01BR0lDX0JFID0gMHgyNkZDOEY4ODtcbnZhciBCSUdfQkVEX01BR0lDID0gMHg4Nzg5RjJFQjtcbnZhciBCSUdfQkVEX01BR0lDX0JFID0gMHhFQkYyODk4NztcblxuXG52YXIgQklHX1dJR19UWVBFX0dSQVBIID0gMTtcbnZhciBCSUdfV0lHX1RZUEVfVlNURVAgPSAyO1xudmFyIEJJR19XSUdfVFlQRV9GU1RFUCA9IDM7XG4gIFxudmFyIE0xID0gMjU2O1xudmFyIE0yID0gMjU2KjI1NjtcbnZhciBNMyA9IDI1NioyNTYqMjU2O1xudmFyIE00ID0gMjU2KjI1NioyNTYqMjU2O1xuXG52YXIgQkVEX0NPTE9SX1JFR0VYUCA9IG5ldyBSZWdFeHAoXCJeWzAtOV0rLFswLTldKyxbMC05XStcIik7XG5cbmZ1bmN0aW9uIGJ3Z19yZWFkT2Zmc2V0KGJhLCBvKSB7XG4gICAgdmFyIG9mZnNldCA9IGJhW29dICsgYmFbbysxXSpNMSArIGJhW28rMl0qTTIgKyBiYVtvKzNdKk0zICsgYmFbbys0XSpNNDtcbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuXG5mdW5jdGlvbiBCaWdXaWcoKSB7XG59XG5cbkJpZ1dpZy5wcm90b3R5cGUucmVhZENocm9tVHJlZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB0aGlzLmNocm9tc1RvSURzID0ge307XG4gICAgdGhpcy5pZHNUb0Nocm9tcyA9IHt9O1xuICAgIHRoaXMubWF4SUQgPSAwO1xuXG4gICAgdmFyIHVkbyA9IHRoaXMudW56b29tZWREYXRhT2Zmc2V0O1xuICAgIHZhciBlYiA9ICh1ZG8gLSB0aGlzLmNocm9tVHJlZU9mZnNldCkgJiAzO1xuICAgIHVkbyA9IHVkbyArIDQgLSBlYjtcblxuICAgIHRoaXMuZGF0YS5zbGljZSh0aGlzLmNocm9tVHJlZU9mZnNldCwgdWRvIC0gdGhpcy5jaHJvbVRyZWVPZmZzZXQpLmZldGNoKGZ1bmN0aW9uKGJwdCkge1xuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShicHQpO1xuICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShicHQpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShicHQpO1xuICAgICAgICB2YXIgYnB0TWFnaWMgPSBsYVswXTtcbiAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGxhWzFdO1xuICAgICAgICB2YXIga2V5U2l6ZSA9IGxhWzJdO1xuICAgICAgICB2YXIgdmFsU2l6ZSA9IGxhWzNdO1xuICAgICAgICB2YXIgaXRlbUNvdW50ID0gYndnX3JlYWRPZmZzZXQoYmEsIDE2KTtcbiAgICAgICAgdmFyIHJvb3ROb2RlT2Zmc2V0ID0gMzI7XG5cbiAgICAgICAgdmFyIGJwdFJlYWROb2RlID0gZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgICAgICB2YXIgbm9kZVR5cGUgPSBiYVtvZmZzZXRdO1xuICAgICAgICAgICAgdmFyIGNudCA9IHNhWyhvZmZzZXQvMikgKyAxXTtcbiAgICAgICAgICAgIG9mZnNldCArPSA0O1xuICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBjbnQ7ICsrbikge1xuICAgICAgICAgICAgICAgIGlmIChub2RlVHlwZSA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG9mZnNldCArPSBrZXlTaXplO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkT2Zmc2V0IC09IHRoaXNCLmNocm9tVHJlZU9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgYnB0UmVhZE5vZGUoY2hpbGRPZmZzZXQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2kgPSAwOyBraSA8IGtleVNpemU7ICsra2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IGJhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHJvbUlkID0gKGJhW29mZnNldCszXTw8MjQpIHwgKGJhW29mZnNldCsyXTw8MTYpIHwgKGJhW29mZnNldCsxXTw8OCkgfCAoYmFbb2Zmc2V0KzBdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNocm9tU2l6ZSA9IChiYVtvZmZzZXQgKyA3XTw8MjQpIHwgKGJhW29mZnNldCs2XTw8MTYpIHwgKGJhW29mZnNldCs1XTw8OCkgfCAoYmFbb2Zmc2V0KzRdKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDg7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpc0IuY2hyb21zVG9JRHNba2V5XSA9IGNocm9tSWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZignY2hyJykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0IuY2hyb21zVG9JRHNba2V5LnN1YnN0cigzKV0gPSBjaHJvbUlkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLmlkc1RvQ2hyb21zW2Nocm9tSWRdID0ga2V5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzQi5tYXhJRCA9IE1hdGgubWF4KHRoaXNCLm1heElELCBjaHJvbUlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGJwdFJlYWROb2RlKHJvb3ROb2RlT2Zmc2V0KTtcblxuICAgICAgICBjYWxsYmFjayh0aGlzQik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIEJpZ1dpZ1ZpZXcoYndnLCBjaXJUcmVlT2Zmc2V0LCBjaXJUcmVlTGVuZ3RoLCBpc1N1bW1hcnkpIHtcbiAgICB0aGlzLmJ3ZyA9IGJ3ZztcbiAgICB0aGlzLmNpclRyZWVPZmZzZXQgPSBjaXJUcmVlT2Zmc2V0O1xuICAgIHRoaXMuY2lyVHJlZUxlbmd0aCA9IGNpclRyZWVMZW5ndGg7XG4gICAgdGhpcy5pc1N1bW1hcnkgPSBpc1N1bW1hcnk7XG59XG5cblxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5yZWFkV2lnRGF0YSA9IGZ1bmN0aW9uKGNock5hbWUsIG1pbiwgbWF4LCBjYWxsYmFjaykge1xuICAgIHZhciBjaHIgPSB0aGlzLmJ3Zy5jaHJvbXNUb0lEc1tjaHJOYW1lXTtcbiAgICBpZiAoY2hyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gTm90IGFuIGVycm9yIGJlY2F1c2Ugc29tZSAuYndncyB3b24ndCBoYXZlIGRhdGEgZm9yIGFsbCBjaHJvbW9zb21lcy5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlYWRXaWdEYXRhQnlJZChjaHIsIG1pbiwgbWF4LCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5yZWFkV2lnRGF0YUJ5SWQgPSBmdW5jdGlvbihjaHIsIG1pbiwgbWF4LCBjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgaWYgKCF0aGlzLmNpckhlYWRlcikge1xuICAgICAgICB0aGlzLmJ3Zy5kYXRhLnNsaWNlKHRoaXMuY2lyVHJlZU9mZnNldCwgNDgpLmZldGNoKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpc0IuY2lySGVhZGVyID0gcmVzdWx0O1xuICAgICAgICAgICAgdmFyIGxhID0gbmV3IEludDMyQXJyYXkodGhpc0IuY2lySGVhZGVyKTtcbiAgICAgICAgICAgIHRoaXNCLmNpckJsb2NrU2l6ZSA9IGxhWzFdO1xuICAgICAgICAgICAgdGhpc0IucmVhZFdpZ0RhdGFCeUlkKGNociwgbWluLCBtYXgsIGNhbGxiYWNrKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYmxvY2tzVG9GZXRjaCA9IFtdO1xuICAgIHZhciBvdXRzdGFuZGluZyA9IDA7XG5cbiAgICB2YXIgYmVmb3JlQldHID0gRGF0ZS5ub3coKTtcblxuICAgIHZhciBmaWx0ZXIgPSBmdW5jdGlvbihjaHJvbUlkLCBmbWluLCBmbWF4LCB0b2tzKSB7XG4gICAgICAgIHJldHVybiAoKGNociA8IDAgfHwgY2hyb21JZCA9PSBjaHIpICYmIGZtaW4gPD0gbWF4ICYmIGZtYXggPj0gbWluKTtcbiAgICB9XG5cbiAgICB2YXIgY2lyRm9iUmVjdXIgPSBmdW5jdGlvbihvZmZzZXQsIGxldmVsKSB7XG4gICAgICAgIGlmICh0aGlzQi5id2cuaW5zdHJ1bWVudClcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdsZXZlbD0nICsgbGV2ZWwgKyAnOyBvZmZzZXQ9JyArIG9mZnNldCArICc7IHRpbWU9JyArIChEYXRlLm5vdygpfDApKTtcblxuICAgICAgICBvdXRzdGFuZGluZyArPSBvZmZzZXQubGVuZ3RoO1xuXG4gICAgICAgIGlmIChvZmZzZXQubGVuZ3RoID09IDEgJiYgb2Zmc2V0WzBdIC0gdGhpc0IuY2lyVHJlZU9mZnNldCA9PSA0OCAmJiB0aGlzQi5jYWNoZWRDaXJSb290KSB7XG4gICAgICAgICAgICBjaXJGb2JSZWN1cjIodGhpc0IuY2FjaGVkQ2lyUm9vdCwgMCwgbGV2ZWwpO1xuICAgICAgICAgICAgLS1vdXRzdGFuZGluZztcbiAgICAgICAgICAgIGlmIChvdXRzdGFuZGluZyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhpc0IuZmV0Y2hGZWF0dXJlcyhmaWx0ZXIsIGJsb2Nrc1RvRmV0Y2gsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXhDaXJCbG9ja1NwYW4gPSA0ICsgICh0aGlzQi5jaXJCbG9ja1NpemUgKiAzMik7ICAgLy8gVXBwZXIgYm91bmQgb24gc2l6ZSwgYmFzZWQgb24gYSBjb21wbGV0ZWx5IGZ1bGwgbGVhZiBub2RlLlxuICAgICAgICB2YXIgc3BhbnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgYmxvY2tTcGFuID0gbmV3IFJhbmdlKG9mZnNldFtpXSwgb2Zmc2V0W2ldICsgbWF4Q2lyQmxvY2tTcGFuKTtcbiAgICAgICAgICAgIHNwYW5zID0gc3BhbnMgPyB1bmlvbihzcGFucywgYmxvY2tTcGFuKSA6IGJsb2NrU3BhbjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgdmFyIGZldGNoUmFuZ2VzID0gc3BhbnMucmFuZ2VzKCk7XG4gICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgZmV0Y2hSYW5nZXMubGVuZ3RoOyArK3IpIHtcbiAgICAgICAgICAgIHZhciBmciA9IGZldGNoUmFuZ2VzW3JdO1xuICAgICAgICAgICAgY2lyRm9iU3RhcnRGZXRjaChvZmZzZXQsIGZyLCBsZXZlbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2lyRm9iU3RhcnRGZXRjaCA9IGZ1bmN0aW9uKG9mZnNldCwgZnIsIGxldmVsLCBhdHRlbXB0cykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnIubWF4KCkgLSBmci5taW4oKTtcbiAgICAgICAgdGhpc0IuYndnLmRhdGEuc2xpY2UoZnIubWluKCksIGZyLm1heCgpIC0gZnIubWluKCkpLmZldGNoKGZ1bmN0aW9uKHJlc3VsdEJ1ZmZlcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvZmZzZXQubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAoZnIuY29udGFpbnMob2Zmc2V0W2ldKSkge1xuICAgICAgICAgICAgICAgICAgICBjaXJGb2JSZWN1cjIocmVzdWx0QnVmZmVyLCBvZmZzZXRbaV0gLSBmci5taW4oKSwgbGV2ZWwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXRbaV0gLSB0aGlzQi5jaXJUcmVlT2Zmc2V0ID09IDQ4ICYmIG9mZnNldFtpXSAtIGZyLm1pbigpID09IDApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5jYWNoZWRDaXJSb290ID0gcmVzdWx0QnVmZmVyO1xuXG4gICAgICAgICAgICAgICAgICAgIC0tb3V0c3RhbmRpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvdXRzdGFuZGluZyA9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzQi5mZXRjaEZlYXR1cmVzKGZpbHRlciwgYmxvY2tzVG9GZXRjaCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgY2lyRm9iUmVjdXIyID0gZnVuY3Rpb24oY2lyQmxvY2tEYXRhLCBvZmZzZXQsIGxldmVsKSB7XG4gICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGNpckJsb2NrRGF0YSk7XG4gICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KGNpckJsb2NrRGF0YSwgMCwgY2lyQmxvY2tEYXRhLmJ5dGVMZW5ndGggPj4gMSk7XG4gICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KGNpckJsb2NrRGF0YSwgMCwgY2lyQmxvY2tEYXRhLmJ5dGVMZW5ndGggPj4gMik7XG5cbiAgICAgICAgdmFyIGlzTGVhZiA9IGJhW29mZnNldF07XG4gICAgICAgIHZhciBjbnQgPSBzYVtvZmZzZXQvMiArIDFdO1xuICAgICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgICBpZiAoaXNMZWFmICE9IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY250OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG8gPSBvZmZzZXQvNDtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDaHJvbSA9IGxhW2xvXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRCYXNlID0gbGFbbG8gKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQ2hyb20gPSBsYVtsbyArIDJdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRCYXNlID0gbGFbbG8gKyAzXTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KzE2KTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gYndnX3JlYWRPZmZzZXQoYmEsIG9mZnNldCsyNCk7XG4gICAgICAgICAgICAgICAgaWYgKCgoY2hyIDwgMCB8fCBzdGFydENocm9tIDwgY2hyKSB8fCAoc3RhcnRDaHJvbSA9PSBjaHIgJiYgc3RhcnRCYXNlIDw9IG1heCkpICYmXG4gICAgICAgICAgICAgICAgICAgICgoY2hyIDwgMCB8fCBlbmRDaHJvbSAgID4gY2hyKSB8fCAoZW5kQ2hyb20gPT0gY2hyICYmIGVuZEJhc2UgPj0gbWluKSkpXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBibG9ja3NUb0ZldGNoLnB1c2goe29mZnNldDogYmxvY2tPZmZzZXQsIHNpemU6IGJsb2NrU2l6ZX0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gMzI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcmVjdXJPZmZzZXRzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxvID0gb2Zmc2V0LzQ7XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0Q2hyb20gPSBsYVtsb107XG4gICAgICAgICAgICAgICAgdmFyIHN0YXJ0QmFzZSA9IGxhW2xvICsgMV07XG4gICAgICAgICAgICAgICAgdmFyIGVuZENocm9tID0gbGFbbG8gKyAyXTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQmFzZSA9IGxhW2xvICsgM107XG4gICAgICAgICAgICAgICAgdmFyIGJsb2NrT2Zmc2V0ID0gYndnX3JlYWRPZmZzZXQoYmEsIG9mZnNldCsxNik7XG4gICAgICAgICAgICAgICAgaWYgKChjaHIgPCAwIHx8IHN0YXJ0Q2hyb20gPCBjaHIgfHwgKHN0YXJ0Q2hyb20gPT0gY2hyICYmIHN0YXJ0QmFzZSA8PSBtYXgpKSAmJlxuICAgICAgICAgICAgICAgICAgICAoY2hyIDwgMCB8fCBlbmRDaHJvbSAgID4gY2hyIHx8IChlbmRDaHJvbSA9PSBjaHIgJiYgZW5kQmFzZSA+PSBtaW4pKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJlY3VyT2Zmc2V0cy5wdXNoKGJsb2NrT2Zmc2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDI0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJlY3VyT2Zmc2V0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY2lyRm9iUmVjdXIocmVjdXJPZmZzZXRzLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNpckZvYlJlY3VyKFt0aGlzQi5jaXJUcmVlT2Zmc2V0ICsgNDhdLCAxKTtcbn1cblxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5mZXRjaEZlYXR1cmVzID0gZnVuY3Rpb24oZmlsdGVyLCBibG9ja3NUb0ZldGNoLCBjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICBibG9ja3NUb0ZldGNoLnNvcnQoZnVuY3Rpb24oYjAsIGIxKSB7XG4gICAgICAgIHJldHVybiAoYjAub2Zmc2V0fDApIC0gKGIxLm9mZnNldHwwKTtcbiAgICB9KTtcblxuICAgIGlmIChibG9ja3NUb0ZldGNoLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIGNhbGxiYWNrKFtdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgdmFyIGNyZWF0ZUZlYXR1cmUgPSBmdW5jdGlvbihjaHIsIGZtaW4sIGZtYXgsIG9wdHMpIHtcbiAgICAgICAgICAgIGlmICghb3B0cykge1xuICAgICAgICAgICAgICAgIG9wdHMgPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgICB2YXIgZiA9IG5ldyBEQVNGZWF0dXJlKCk7XG4gICAgICAgICAgICBmLl9jaHJvbUlkID0gY2hyO1xuICAgICAgICAgICAgZi5zZWdtZW50ID0gdGhpc0IuYndnLmlkc1RvQ2hyb21zW2Nocl07XG4gICAgICAgICAgICBmLm1pbiA9IGZtaW47XG4gICAgICAgICAgICBmLm1heCA9IGZtYXg7XG4gICAgICAgICAgICBmLnR5cGUgPSB0aGlzQi5id2cudHlwZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgayBpbiBvcHRzKSB7XG4gICAgICAgICAgICAgICAgZltrXSA9IG9wdHNba107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goZik7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHRyYW1wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYmxvY2tzVG9GZXRjaC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHZhciBhZnRlckJXRyA9IERhdGUubm93KCk7XG4gICAgICAgICAgICAgICAgLy8gZGxvZygnQldHIGZldGNoIHRvb2sgJyArIChhZnRlckJXRyAtIGJlZm9yZUJXRykgKyAnbXMnKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhmZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuOyAgLy8ganVzdCBpbiBjYXNlLi4uXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBibG9jayA9IGJsb2Nrc1RvRmV0Y2hbMF07XG4gICAgICAgICAgICAgICAgaWYgKGJsb2NrLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpc0IucGFyc2VGZWF0dXJlcyhibG9jay5kYXRhLCBjcmVhdGVGZWF0dXJlLCBmaWx0ZXIpO1xuICAgICAgICAgICAgICAgICAgICBibG9ja3NUb0ZldGNoLnNwbGljZSgwLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdHJhbXAoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmV0Y2hTdGFydCA9IGJsb2NrLm9mZnNldDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZldGNoU2l6ZSA9IGJsb2NrLnNpemU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBiaSA9IDE7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChiaSA8IGJsb2Nrc1RvRmV0Y2gubGVuZ3RoICYmIGJsb2Nrc1RvRmV0Y2hbYmldLm9mZnNldCA9PSAoZmV0Y2hTdGFydCArIGZldGNoU2l6ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoU2l6ZSArPSBibG9ja3NUb0ZldGNoW2JpXS5zaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgKytiaTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXNCLmJ3Zy5kYXRhLnNsaWNlKGZldGNoU3RhcnQsIGZldGNoU2l6ZSkuZmV0Y2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiaSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2V0IDwgZmV0Y2hTaXplKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZiID0gYmxvY2tzVG9GZXRjaFtiaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc0IuYndnLnVuY29tcHJlc3NCdWZTaXplID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0ganN6bGliX2luZmxhdGVfYnVmZmVyKHJlc3VsdCwgb2Zmc2V0ICsgMiwgZmIuc2l6ZSAtIDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBuZXcgVWludDhBcnJheShmYi5zaXplKTsgICAgLy8gRklYTUUgaXMgdGhpcyByZWFsbHkgdGhlIGJlc3Qgd2UgY2FuIGRvP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJheUNvcHkobmV3IFVpbnQ4QXJyYXkocmVzdWx0LCBvZmZzZXQsIGZiLnNpemUpLCAwLCB0bXAsIDAsIGZiLnNpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gdG1wLmJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmIuZGF0YSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ICs9IGZiLnNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKytiaTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW1wKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmFtcCgpO1xuICAgIH1cbn1cblxuQmlnV2lnVmlldy5wcm90b3R5cGUucGFyc2VGZWF0dXJlcyA9IGZ1bmN0aW9uKGRhdGEsIGNyZWF0ZUZlYXR1cmUsIGZpbHRlcikge1xuICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGRhdGEpO1xuXG4gICAgaWYgKHRoaXMuaXNTdW1tYXJ5KSB7XG4gICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KGRhdGEpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShkYXRhKTtcbiAgICAgICAgdmFyIGZhID0gbmV3IEZsb2F0MzJBcnJheShkYXRhKTtcblxuICAgICAgICB2YXIgaXRlbUNvdW50ID0gZGF0YS5ieXRlTGVuZ3RoLzMyO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1Db3VudDsgKytpKSB7XG4gICAgICAgICAgICB2YXIgY2hyb21JZCA9ICAgbGFbKGkqOCldO1xuICAgICAgICAgICAgdmFyIHN0YXJ0ID0gICAgIGxhWyhpKjgpKzFdO1xuICAgICAgICAgICAgdmFyIGVuZCA9ICAgICAgIGxhWyhpKjgpKzJdO1xuICAgICAgICAgICAgdmFyIHZhbGlkQ250ID0gIGxhWyhpKjgpKzNdO1xuICAgICAgICAgICAgdmFyIG1pblZhbCAgICA9IGZhWyhpKjgpKzRdO1xuICAgICAgICAgICAgdmFyIG1heFZhbCAgICA9IGZhWyhpKjgpKzVdO1xuICAgICAgICAgICAgdmFyIHN1bURhdGEgICA9IGZhWyhpKjgpKzZdO1xuICAgICAgICAgICAgdmFyIHN1bVNxRGF0YSA9IGZhWyhpKjgpKzddO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZmlsdGVyKGNocm9tSWQsIHN0YXJ0ICsgMSwgZW5kKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdW1tYXJ5T3B0cyA9IHt0eXBlOiAnYmlnd2lnJywgc2NvcmU6IHN1bURhdGEvdmFsaWRDbnQsIG1heFNjb3JlOiBtYXhWYWx9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmJ3Zy50eXBlID09ICdiaWdiZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1bW1hcnlPcHRzLnR5cGUgPSAnZGVuc2l0eSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNyZWF0ZUZlYXR1cmUoY2hyb21JZCwgc3RhcnQgKyAxLCBlbmQsIHN1bW1hcnlPcHRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5id2cudHlwZSA9PSAnYmlnd2lnJykge1xuICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShkYXRhKTtcbiAgICAgICAgdmFyIGxhID0gbmV3IEludDMyQXJyYXkoZGF0YSk7XG4gICAgICAgIHZhciBmYSA9IG5ldyBGbG9hdDMyQXJyYXkoZGF0YSk7XG5cbiAgICAgICAgdmFyIGNocm9tSWQgPSBsYVswXTtcbiAgICAgICAgdmFyIGJsb2NrU3RhcnQgPSBsYVsxXTtcbiAgICAgICAgdmFyIGJsb2NrRW5kID0gbGFbMl07XG4gICAgICAgIHZhciBpdGVtU3RlcCA9IGxhWzNdO1xuICAgICAgICB2YXIgaXRlbVNwYW4gPSBsYVs0XTtcbiAgICAgICAgdmFyIGJsb2NrVHlwZSA9IGJhWzIwXTtcbiAgICAgICAgdmFyIGl0ZW1Db3VudCA9IHNhWzExXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChibG9ja1R5cGUgPT0gQklHX1dJR19UWVBFX0ZTVEVQKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1Db3VudDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlID0gZmFbaSArIDZdO1xuICAgICAgICAgICAgICAgIHZhciBmbWluID0gYmxvY2tTdGFydCArIChpKml0ZW1TdGVwKSArIDEsIGZtYXggPSBibG9ja1N0YXJ0ICsgKGkqaXRlbVN0ZXApICsgaXRlbVNwYW47XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcihjaHJvbUlkLCBmbWluLCBmbWF4KSlcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmVhdHVyZShjaHJvbUlkLCBmbWluLCBmbWF4LCB7c2NvcmU6IHNjb3JlfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoYmxvY2tUeXBlID09IEJJR19XSUdfVFlQRV9WU1RFUCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtQ291bnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGxhWyhpKjIpICsgNl0gKyAxO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBzdGFydCArIGl0ZW1TcGFuIC0gMTtcbiAgICAgICAgICAgICAgICB2YXIgc2NvcmUgPSBmYVsoaSoyKSArIDddO1xuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIoY2hyb21JZCwgc3RhcnQsIGVuZCkpXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZlYXR1cmUoY2hyb21JZCwgc3RhcnQsIGVuZCwge3Njb3JlOiBzY29yZX0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGJsb2NrVHlwZSA9PSBCSUdfV0lHX1RZUEVfR1JBUEgpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbUNvdW50OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBsYVsoaSozKSArIDZdICsgMTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kICAgPSBsYVsoaSozKSArIDddO1xuICAgICAgICAgICAgICAgIHZhciBzY29yZSA9IGZhWyhpKjMpICsgOF07XG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZW5kO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyKGNocm9tSWQsIHN0YXJ0LCBlbmQpKVxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVGZWF0dXJlKGNocm9tSWQsIHN0YXJ0LCBlbmQsIHtzY29yZTogc2NvcmV9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDdXJyZW50bHkgbm90IGhhbmRsaW5nIGJ3Z1R5cGU9JyArIGJsb2NrVHlwZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuYndnLnR5cGUgPT0gJ2JpZ2JlZCcpIHtcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XG4gICAgICAgIHZhciBkZmMgPSB0aGlzLmJ3Zy5kZWZpbmVkRmllbGRDb3VudDtcbiAgICAgICAgdmFyIHNjaGVtYSA9IHRoaXMuYndnLnNjaGVtYTtcblxuICAgICAgICB3aGlsZSAob2Zmc2V0IDwgYmEubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgY2hyb21JZCA9IChiYVtvZmZzZXQrM108PDI0KSB8IChiYVtvZmZzZXQrMl08PDE2KSB8IChiYVtvZmZzZXQrMV08PDgpIHwgKGJhW29mZnNldCswXSk7XG4gICAgICAgICAgICB2YXIgc3RhcnQgPSAoYmFbb2Zmc2V0KzddPDwyNCkgfCAoYmFbb2Zmc2V0KzZdPDwxNikgfCAoYmFbb2Zmc2V0KzVdPDw4KSB8IChiYVtvZmZzZXQrNF0pO1xuICAgICAgICAgICAgdmFyIGVuZCA9IChiYVtvZmZzZXQrMTFdPDwyNCkgfCAoYmFbb2Zmc2V0KzEwXTw8MTYpIHwgKGJhW29mZnNldCs5XTw8OCkgfCAoYmFbb2Zmc2V0KzhdKTtcbiAgICAgICAgICAgIG9mZnNldCArPSAxMjtcbiAgICAgICAgICAgIHZhciByZXN0ID0gJyc7XG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBjaCA9IGJhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXN0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2gpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGZlYXR1cmVPcHRzID0ge307XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBiZWRDb2x1bW5zO1xuICAgICAgICAgICAgaWYgKHJlc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGJlZENvbHVtbnMgPSByZXN0LnNwbGl0KCdcXHQnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYmVkQ29sdW1ucyA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJlZENvbHVtbnMubGVuZ3RoID4gMCAmJiBkZmMgPiAzKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZU9wdHMubGFiZWwgPSBiZWRDb2x1bW5zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJlZENvbHVtbnMubGVuZ3RoID4gMSAmJiBkZmMgPiA0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlID0gcGFyc2VJbnQoYmVkQ29sdW1uc1sxXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihzY29yZSkpXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLnNjb3JlID0gc2NvcmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmVkQ29sdW1ucy5sZW5ndGggPiAyICYmIGRmYyA+IDUpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy5vcmllbnRhdGlvbiA9IGJlZENvbHVtbnNbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYmVkQ29sdW1ucy5sZW5ndGggPiA1ICYmIGRmYyA+IDgpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSBiZWRDb2x1bW5zWzVdO1xuICAgICAgICAgICAgICAgIGlmIChCRURfQ09MT1JfUkVHRVhQLnRlc3QoY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLml0ZW1SZ2IgPSAncmdiKCcgKyBjb2xvciArICcpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChiZWRDb2x1bW5zLmxlbmd0aCA+IGRmYy0zICYmIHNjaGVtYSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbCA9IGRmYyAtIDM7IGNvbCA8IGJlZENvbHVtbnMubGVuZ3RoOyArK2NvbCkge1xuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0c1tzY2hlbWEuZmllbGRzW2NvbCszXS5uYW1lXSA9IGJlZENvbHVtbnNbY29sXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaWx0ZXIoY2hyb21JZCwgc3RhcnQgKyAxLCBlbmQsIGJlZENvbHVtbnMpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRmYyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZlYXR1cmUoY2hyb21JZCwgc3RhcnQgKyAxLCBlbmQsIGZlYXR1cmVPcHRzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpY2tTdGFydCA9IGJlZENvbHVtbnNbM118MDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaWNrRW5kICAgPSBiZWRDb2x1bW5zWzRdfDA7XG4gICAgICAgICAgICAgICAgICAgIHZhciBibG9ja0NvdW50ID0gYmVkQ29sdW1uc1s2XXwwO1xuICAgICAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplcyA9IGJlZENvbHVtbnNbN10uc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrU3RhcnRzID0gYmVkQ29sdW1uc1s4XS5zcGxpdCgnLCcpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlT3B0cy5leG9uRnJhbWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhvbkZyYW1lcyA9IGZlYXR1cmVPcHRzLmV4b25GcmFtZXMuc3BsaXQoJywnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLmV4b25GcmFtZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLnR5cGUgPSAndHJhbnNjcmlwdCdcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdycCA9IG5ldyBEQVNHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrIGluIGZlYXR1cmVPcHRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncnBba10gPSBmZWF0dXJlT3B0c1trXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBncnAuaWQgPSBiZWRDb2x1bW5zWzBdO1xuICAgICAgICAgICAgICAgICAgICBncnAuc2VnbWVudCA9IHRoaXMuYndnLmlkc1RvQ2hyb21zW2Nocm9tSWRdO1xuICAgICAgICAgICAgICAgICAgICBncnAubWluID0gc3RhcnQgKyAxO1xuICAgICAgICAgICAgICAgICAgICBncnAubWF4ID0gZW5kO1xuICAgICAgICAgICAgICAgICAgICBncnAubm90ZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU9wdHMuZ3JvdXBzID0gW2dycF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gTW92aW5nIHRvd2FyZHMgdXNpbmcgYmlnR2VuZVByZWQgbW9kZWwsIGJ1dCB3aWxsXG4gICAgICAgICAgICAgICAgICAgIC8vIHN0aWxsIHN1cHBvcnQgb2xkIERhbGxpYW5jZS1zdHlsZSBCRUQxMitnZW5lLW5hbWUgZm9yIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBmb3Jlc2VlYWJsZSBmdXR1cmUuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWRDb2x1bW5zLmxlbmd0aCA+IDkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZW5lSWQgPSBmZWF0dXJlT3B0cy5nZW5lTmFtZSB8fCBiZWRDb2x1bW5zWzldO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdlbmVOYW1lID0gZ2VuZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlZENvbHVtbnMubGVuZ3RoID4gMTApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lTmFtZSA9IGJlZENvbHVtbnNbMTBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVPcHRzLmdlbmVOYW1lMilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lTmFtZSA9IGZlYXR1cmVPcHRzLmdlbmVOYW1lMjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdnID0gc2hhbGxvd0NvcHkoZ3JwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdnLmlkID0gZ2VuZUlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2cubGFiZWwgPSBnZW5lTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdnLnR5cGUgPSAnZ2VuZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy5ncm91cHMucHVzaChnZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc3Bhbkxpc3QgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCBibG9ja0NvdW50OyArK2IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibWluID0gKGJsb2NrU3RhcnRzW2JdfDApICsgc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm1heCA9IGJtaW4gKyAoYmxvY2tTaXplc1tiXXwwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFuID0gbmV3IFJhbmdlKGJtaW4sIGJtYXgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbkxpc3QucHVzaChzcGFuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbnMgPSB1bmlvbihzcGFuTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgdHNMaXN0ID0gc3BhbnMucmFuZ2VzKCk7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgdHNMaXN0Lmxlbmd0aDsgKytzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHMgPSB0c0xpc3Rbc107XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVGZWF0dXJlKGNocm9tSWQsIHRzLm1pbigpICsgMSwgdHMubWF4KCksIGZlYXR1cmVPcHRzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlja0VuZCA+IHRoaWNrU3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2RpbmdSZWdpb24gPSAoZmVhdHVyZU9wdHMub3JpZW50YXRpb24gPT0gJysnKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJhbmdlKHRoaWNrU3RhcnQsIHRoaWNrRW5kICsgMykgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSYW5nZSh0aGlja1N0YXJ0IC0gMywgdGhpY2tFbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICsvLSAzIHRvIGFjY291bnQgZm9yIHN0b3AgY29kb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRsID0gaW50ZXJzZWN0aW9uKHNwYW5zLCBjb2RpbmdSZWdpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU9wdHMudHlwZSA9ICd0cmFuc2xhdGlvbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRsTGlzdCA9IHRsLnJhbmdlcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFkaW5nRnJhbWUgPSAwO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRsT2Zmc2V0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGxMaXN0WzBdLm1pbigpID4gdHNMaXN0W3RsT2Zmc2V0XS5tYXgoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGxPZmZzZXQrKztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgdGxMaXN0Lmxlbmd0aDsgKytzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCByZWFkaW5nIGZyYW1lIGZvciBldmVyeSBleG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHM7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWF0dXJlT3B0cy5vcmllbnRhdGlvbiA9PSAnLScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHRsTGlzdC5sZW5ndGggLSBzIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRzID0gdGxMaXN0W2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZU9wdHMucmVhZGZyYW1lID0gcmVhZGluZ0ZyYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXhvbkZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJyZiA9IHBhcnNlSW50KGV4b25GcmFtZXNbaW5kZXggKyB0bE9mZnNldF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZihicmYpID09PSAnbnVtYmVyJyAmJiBicmYgPj0gMCAmJiBicmYgPD0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVPcHRzLnJlYWRmcmFtZSA9IGJyZjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlT3B0cy5yZWFkZnJhbWVFeHBsaWNpdCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHRzLm1heCgpIC0gdHMubWluKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRpbmdGcmFtZSA9IChyZWFkaW5nRnJhbWUgKyBsZW5ndGgpICUgMztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRmVhdHVyZShjaHJvbUlkLCB0cy5taW4oKSArIDEsIHRzLm1heCgpLCBmZWF0dXJlT3B0cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJEb24ndCBrbm93IHdoYXQgdG8gZG8gd2l0aCBcIiArIHRoaXMuYndnLnR5cGUpO1xuICAgIH1cbn1cblxuLy9cbi8vIG5hc3R5IGN1dC9wYXN0ZSwgc2hvdWxkIHJvbGwgYmFjayBpbiFcbi8vXG5cbkJpZ1dpZ1ZpZXcucHJvdG90eXBlLmdldEZpcnN0QWRqYWNlbnQgPSBmdW5jdGlvbihjaHJOYW1lLCBwb3MsIGRpciwgY2FsbGJhY2spIHtcbiAgICB2YXIgY2hyID0gdGhpcy5id2cuY2hyb21zVG9JRHNbY2hyTmFtZV07XG4gICAgaWYgKGNociA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIE5vdCBhbiBlcnJvciBiZWNhdXNlIHNvbWUgLmJ3Z3Mgd29uJ3QgaGF2ZSBkYXRhIGZvciBhbGwgY2hyb21vc29tZXMuXG4gICAgICAgIHJldHVybiBjYWxsYmFjayhbXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5nZXRGaXJzdEFkamFjZW50QnlJZChjaHIsIHBvcywgZGlyLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5CaWdXaWdWaWV3LnByb3RvdHlwZS5nZXRGaXJzdEFkamFjZW50QnlJZCA9IGZ1bmN0aW9uKGNociwgcG9zLCBkaXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICBpZiAoIXRoaXMuY2lySGVhZGVyKSB7XG4gICAgICAgIHRoaXMuYndnLmRhdGEuc2xpY2UodGhpcy5jaXJUcmVlT2Zmc2V0LCA0OCkuZmV0Y2goZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICB0aGlzQi5jaXJIZWFkZXIgPSByZXN1bHQ7XG4gICAgICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheSh0aGlzQi5jaXJIZWFkZXIpO1xuICAgICAgICAgICAgdGhpc0IuY2lyQmxvY2tTaXplID0gbGFbMV07XG4gICAgICAgICAgICB0aGlzQi5nZXRGaXJzdEFkamFjZW50QnlJZChjaHIsIHBvcywgZGlyLCBjYWxsYmFjayk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGJsb2NrVG9GZXRjaCA9IG51bGw7XG4gICAgdmFyIGJlc3RCbG9ja0NociA9IC0xO1xuICAgIHZhciBiZXN0QmxvY2tPZmZzZXQgPSAtMTtcblxuICAgIHZhciBvdXRzdGFuZGluZyA9IDA7XG5cbiAgICB2YXIgYmVmb3JlQldHID0gRGF0ZS5ub3coKTtcblxuICAgIHZhciBjaXJGb2JSZWN1ciA9IGZ1bmN0aW9uKG9mZnNldCwgbGV2ZWwpIHtcbiAgICAgICAgb3V0c3RhbmRpbmcgKz0gb2Zmc2V0Lmxlbmd0aDtcblxuICAgICAgICB2YXIgbWF4Q2lyQmxvY2tTcGFuID0gNCArICAodGhpc0IuY2lyQmxvY2tTaXplICogMzIpOyAgIC8vIFVwcGVyIGJvdW5kIG9uIHNpemUsIGJhc2VkIG9uIGEgY29tcGxldGVseSBmdWxsIGxlYWYgbm9kZS5cbiAgICAgICAgdmFyIHNwYW5zO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9mZnNldC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGJsb2NrU3BhbiA9IG5ldyBSYW5nZShvZmZzZXRbaV0sIG9mZnNldFtpXSArIG1heENpckJsb2NrU3Bhbik7XG4gICAgICAgICAgICBzcGFucyA9IHNwYW5zID8gdW5pb24oc3BhbnMsIGJsb2NrU3BhbikgOiBibG9ja1NwYW47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHZhciBmZXRjaFJhbmdlcyA9IHNwYW5zLnJhbmdlcygpO1xuICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IGZldGNoUmFuZ2VzLmxlbmd0aDsgKytyKSB7XG4gICAgICAgICAgICB2YXIgZnIgPSBmZXRjaFJhbmdlc1tyXTtcbiAgICAgICAgICAgIGNpckZvYlN0YXJ0RmV0Y2gob2Zmc2V0LCBmciwgbGV2ZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGNpckZvYlN0YXJ0RmV0Y2ggPSBmdW5jdGlvbihvZmZzZXQsIGZyLCBsZXZlbCwgYXR0ZW1wdHMpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IGZyLm1heCgpIC0gZnIubWluKCk7XG4gICAgICAgIHRoaXNCLmJ3Zy5kYXRhLnNsaWNlKGZyLm1pbigpLCBmci5tYXgoKSAtIGZyLm1pbigpKS5mZXRjaChmdW5jdGlvbihyZXN1bHRCdWZmZXIpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2Zmc2V0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZyLmNvbnRhaW5zKG9mZnNldFtpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2lyRm9iUmVjdXIyKHJlc3VsdEJ1ZmZlciwgb2Zmc2V0W2ldIC0gZnIubWluKCksIGxldmVsKTtcbiAgICAgICAgICAgICAgICAgICAgLS1vdXRzdGFuZGluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHN0YW5kaW5nID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYmxvY2tUb0ZldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpciA+IDAgJiYgKGNociAhPSAwIHx8IHBvcyA+IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5nZXRGaXJzdEFkamFjZW50QnlJZCgwLCAwLCBkaXIsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRpciA8IDAgJiYgKGNociAhPSB0aGlzQi5id2cubWF4SUQgfHwgcG9zIDwgMTAwMDAwMDAwMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNCLmdldEZpcnN0QWRqYWNlbnRCeUlkKHRoaXNCLmJ3Zy5tYXhJRCwgMTAwMDAwMDAwMCwgZGlyLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhbXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNCLmZldGNoRmVhdHVyZXMoZnVuY3Rpb24oY2hyeCwgZm1pbiwgZm1heCwgdG9rcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZGlyIDwgMCAmJiAoY2hyeCA8IGNociB8fCBmbWF4IDwgcG9zKSkgfHwgKGRpciA+IDAgJiYgKGNocnggPiBjaHIgfHwgZm1pbiA+IHBvcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSwgW2Jsb2NrVG9GZXRjaF0sIGZ1bmN0aW9uKGZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJlc3RGZWF0dXJlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmVzdENociA9IC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBiZXN0UG9zID0gLTE7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZmkgPSAwOyBmaSA8IGZlYXR1cmVzLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IGZlYXR1cmVzW2ZpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNocnggPSBmLl9jaHJvbUlkLCBmbWluID0gZi5taW4sIGZtYXggPSBmLm1heDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJlc3RGZWF0dXJlID09IG51bGwgfHwgKChkaXIgPCAwKSAmJiAoY2hyeCA+IGJlc3RDaHIgfHwgZm1heCA+IGJlc3RQb3MpKSB8fCAoKGRpciA+IDApICYmIChjaHJ4IDwgYmVzdENociB8fCBmbWluIDwgYmVzdFBvcykpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0RmVhdHVyZSA9IGY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0UG9zID0gKGRpciA8IDApID8gZm1heCA6IGZtaW47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZXN0Q2hyID0gY2hyeDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiZXN0RmVhdHVyZSAhPSBudWxsKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtiZXN0RmVhdHVyZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgY2lyRm9iUmVjdXIyID0gZnVuY3Rpb24oY2lyQmxvY2tEYXRhLCBvZmZzZXQsIGxldmVsKSB7XG4gICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGNpckJsb2NrRGF0YSk7XG4gICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KGNpckJsb2NrRGF0YSk7XG4gICAgICAgIHZhciBsYSA9IG5ldyBJbnQzMkFycmF5KGNpckJsb2NrRGF0YSk7XG5cbiAgICAgICAgdmFyIGlzTGVhZiA9IGJhW29mZnNldF07XG4gICAgICAgIHZhciBjbnQgPSBzYVtvZmZzZXQvMiArIDFdO1xuICAgICAgICBvZmZzZXQgKz0gNDtcblxuICAgICAgICBpZiAoaXNMZWFmICE9IDApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY250OyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgbG8gPSBvZmZzZXQvNDtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRDaHJvbSA9IGxhW2xvXTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRCYXNlID0gbGFbbG8gKyAxXTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQ2hyb20gPSBsYVtsbyArIDJdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRCYXNlID0gbGFbbG8gKyAzXTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KzE2KTtcbiAgICAgICAgICAgICAgICB2YXIgYmxvY2tTaXplID0gYndnX3JlYWRPZmZzZXQoYmEsIG9mZnNldCsyNCk7XG4gICAgICAgICAgICAgICAgaWYgKChkaXIgPCAwICYmICgoc3RhcnRDaHJvbSA8IGNociB8fCAoc3RhcnRDaHJvbSA9PSBjaHIgJiYgc3RhcnRCYXNlIDw9IHBvcykpKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKGRpciA+IDAgJiYgKChlbmRDaHJvbSA+IGNociB8fCAoZW5kQ2hyb20gPT0gY2hyICYmIGVuZEJhc2UgPj0gcG9zKSkpKSlcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdHb3QgYW4gaW50ZXJlc3RpbmcgYmxvY2s6IHN0YXJ0QmFzZT0nICsgc3RhcnRDaHJvbSArICc6JyArIHN0YXJ0QmFzZSArICc7IGVuZEJhc2U9JyArIGVuZENocm9tICsgJzonICsgZW5kQmFzZSArICc7IG9mZnNldD0nICsgYmxvY2tPZmZzZXQgKyAnOyBzaXplPScgKyBibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoL19yYW5kb20vLmV4ZWModGhpc0IuYndnLmlkc1RvQ2hyb21zW3N0YXJ0Q2hyb21dKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGxvZygnc2tpcHBpbmcgcmFuZG9tOiAnICsgdGhpc0IuYndnLmlkc1RvQ2hyb21zW3N0YXJ0Q2hyb21dKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChibG9ja1RvRmV0Y2ggPT0gbnVsbCB8fCAoKGRpciA8IDApICYmIChlbmRDaHJvbSA+IGJlc3RCbG9ja0NociB8fCAoZW5kQ2hyb20gPT0gYmVzdEJsb2NrQ2hyICYmIGVuZEJhc2UgPiBiZXN0QmxvY2tPZmZzZXQpKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkaXIgPiAwKSAmJiAoc3RhcnRDaHJvbSA8IGJlc3RCbG9ja0NociB8fCAoc3RhcnRDaHJvbSA9PSBiZXN0QmxvY2tDaHIgJiYgc3RhcnRCYXNlIDwgYmVzdEJsb2NrT2Zmc2V0KSkpKVxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIGRsb2coJ2Jlc3QgaXM6IHN0YXJ0QmFzZT0nICsgc3RhcnRDaHJvbSArICc6JyArIHN0YXJ0QmFzZSArICc7IGVuZEJhc2U9JyArIGVuZENocm9tICsgJzonICsgZW5kQmFzZSArICc7IG9mZnNldD0nICsgYmxvY2tPZmZzZXQgKyAnOyBzaXplPScgKyBibG9ja1NpemUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tUb0ZldGNoID0ge29mZnNldDogYmxvY2tPZmZzZXQsIHNpemU6IGJsb2NrU2l6ZX07XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0QmxvY2tPZmZzZXQgPSAoZGlyIDwgMCkgPyBlbmRCYXNlIDogc3RhcnRCYXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdEJsb2NrQ2hyID0gKGRpciA8IDApID8gZW5kQ2hyb20gOiBzdGFydENocm9tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCArPSAzMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBiZXN0UmVjdXIgPSAtMTtcbiAgICAgICAgICAgIHZhciBiZXN0UG9zID0gLTE7XG4gICAgICAgICAgICB2YXIgYmVzdENociA9IC0xO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbnQ7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBsbyA9IG9mZnNldC80O1xuICAgICAgICAgICAgICAgIHZhciBzdGFydENocm9tID0gbGFbbG9dO1xuICAgICAgICAgICAgICAgIHZhciBzdGFydEJhc2UgPSBsYVtsbyArIDFdO1xuICAgICAgICAgICAgICAgIHZhciBlbmRDaHJvbSA9IGxhW2xvICsgMl07XG4gICAgICAgICAgICAgICAgdmFyIGVuZEJhc2UgPSBsYVtsbyArIDNdO1xuICAgICAgICAgICAgICAgIHZhciBibG9ja09mZnNldCA9IChsYVtsbyArIDRdPDwzMikgfCAobGFbbG8gKyA1XSk7XG4gICAgICAgICAgICAgICAgaWYgKChkaXIgPCAwICYmICgoc3RhcnRDaHJvbSA8IGNociB8fCAoc3RhcnRDaHJvbSA9PSBjaHIgJiYgc3RhcnRCYXNlIDw9IHBvcykpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZW5kQ2hyb20gICA+PSBjaHIpKSkgfHxcbiAgICAgICAgICAgICAgICAgICAgIChkaXIgPiAwICYmICgoZW5kQ2hyb20gPiBjaHIgfHwgKGVuZENocm9tID09IGNociAmJiBlbmRCYXNlID49IHBvcykpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXJ0Q2hyb20gPD0gY2hyKSkpKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlc3RSZWN1ciA8IDAgfHwgZW5kQmFzZSA+IGJlc3RQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RSZWN1ciA9IGJsb2NrT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgICAgYmVzdFBvcyA9IChkaXIgPCAwKSA/IGVuZEJhc2UgOiBzdGFydEJhc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0Q2hyID0gKGRpciA8IDApID8gZW5kQ2hyb20gOiBzdGFydENocm9tO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG9mZnNldCArPSAyNDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiZXN0UmVjdXIgPj0gMCkge1xuICAgICAgICAgICAgICAgIGNpckZvYlJlY3VyKFtiZXN0UmVjdXJdLCBsZXZlbCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBcblxuICAgIGNpckZvYlJlY3VyKFt0aGlzQi5jaXJUcmVlT2Zmc2V0ICsgNDhdLCAxKTtcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5yZWFkV2lnRGF0YSA9IGZ1bmN0aW9uKGNock5hbWUsIG1pbiwgbWF4LCBjYWxsYmFjaykge1xuICAgIHRoaXMuZ2V0VW56b29tZWRWaWV3KCkucmVhZFdpZ0RhdGEoY2hyTmFtZSwgbWluLCBtYXgsIGNhbGxiYWNrKTtcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5nZXRVbnpvb21lZFZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMudW56b29tZWRWaWV3KSB7XG4gICAgICAgIHZhciBjaXJMZW4gPSA0MDAwO1xuICAgICAgICB2YXIgbnpsID0gdGhpcy56b29tTGV2ZWxzWzBdO1xuICAgICAgICBpZiAobnpsKSB7XG4gICAgICAgICAgICBjaXJMZW4gPSB0aGlzLnpvb21MZXZlbHNbMF0uZGF0YU9mZnNldCAtIHRoaXMudW56b29tZWRJbmRleE9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVuem9vbWVkVmlldyA9IG5ldyBCaWdXaWdWaWV3KHRoaXMsIHRoaXMudW56b29tZWRJbmRleE9mZnNldCwgY2lyTGVuLCBmYWxzZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnVuem9vbWVkVmlldztcbn1cblxuQmlnV2lnLnByb3RvdHlwZS5nZXRab29tZWRWaWV3ID0gZnVuY3Rpb24oeikge1xuICAgIHZhciB6aCA9IHRoaXMuem9vbUxldmVsc1t6XTtcbiAgICBpZiAoIXpoLnZpZXcpIHtcbiAgICAgICAgemgudmlldyA9IG5ldyBCaWdXaWdWaWV3KHRoaXMsIHpoLmluZGV4T2Zmc2V0LCAvKiB0aGlzLnpvb21MZXZlbHNbeiArIDFdLmRhdGFPZmZzZXQgLSB6aC5pbmRleE9mZnNldCAqLyA0MDAwLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHpoLnZpZXc7XG59XG5cbmZ1bmN0aW9uIG1ha2VCd2coZGF0YSwgY2FsbGJhY2ssIG5hbWUpIHtcbiAgICB2YXIgYndnID0gbmV3IEJpZ1dpZygpO1xuICAgIGJ3Zy5kYXRhID0gZGF0YTtcbiAgICBid2cubmFtZSA9IG5hbWU7XG4gICAgYndnLmRhdGEuc2xpY2UoMCwgNTEyKS5zYWx0ZWQoKS5mZXRjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIkNvdWxkbid0IGZldGNoIGZpbGVcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGVhZGVyID0gcmVzdWx0O1xuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShoZWFkZXIpO1xuICAgICAgICB2YXIgbWFnaWMgPSBiYVswXSArIChNMSAqIGJhWzFdKSArIChNMiAqIGJhWzJdKSArIChNMyAqIGJhWzNdKTtcbiAgICAgICAgaWYgKG1hZ2ljID09IEJJR19XSUdfTUFHSUMpIHtcbiAgICAgICAgICAgIGJ3Zy50eXBlID0gJ2JpZ3dpZyc7XG4gICAgICAgIH0gZWxzZSBpZiAobWFnaWMgPT0gQklHX0JFRF9NQUdJQykge1xuICAgICAgICAgICAgYndnLnR5cGUgPSAnYmlnYmVkJztcbiAgICAgICAgfSBlbHNlIGlmIChtYWdpYyA9PSBCSUdfV0lHX01BR0lDX0JFIHx8IG1hZ2ljID09IEJJR19CRURfTUFHSUNfQkUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBcIkN1cnJlbnRseSBkb24ndCBzdXBwb3J0IGJpZy1lbmRpYW4gQkJJIGZpbGVzXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgXCJOb3QgYSBzdXBwb3J0ZWQgZm9ybWF0LCBtYWdpYz0weFwiICsgbWFnaWMudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgYndnLnZlcnNpb24gPSBzYVsyXTsgICAgICAgICAgICAgLy8gNFxuICAgICAgICBid2cubnVtWm9vbUxldmVscyA9IHNhWzNdOyAgICAgICAvLyA2XG4gICAgICAgIGJ3Zy5jaHJvbVRyZWVPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgOCk7XG4gICAgICAgIGJ3Zy51bnpvb21lZERhdGFPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgMTYpO1xuICAgICAgICBid2cudW56b29tZWRJbmRleE9mZnNldCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCAyNCk7XG4gICAgICAgIGJ3Zy5maWVsZENvdW50ID0gc2FbMTZdOyAgICAgICAgIC8vIDMyXG4gICAgICAgIGJ3Zy5kZWZpbmVkRmllbGRDb3VudCA9IHNhWzE3XTsgIC8vIDM0XG4gICAgICAgIGJ3Zy5hc09mZnNldCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCAzNik7XG4gICAgICAgIGJ3Zy50b3RhbFN1bW1hcnlPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgNDQpO1xuICAgICAgICBid2cudW5jb21wcmVzc0J1ZlNpemUgPSBsYVsxM107ICAvLyA1MlxuICAgICAgICBid2cuZXh0SGVhZGVyT2Zmc2V0ID0gYndnX3JlYWRPZmZzZXQoYmEsIDU2KTtcblxuICAgICAgICBid2cuem9vbUxldmVscyA9IFtdO1xuICAgICAgICBmb3IgKHZhciB6bCA9IDA7IHpsIDwgYndnLm51bVpvb21MZXZlbHM7ICsremwpIHtcbiAgICAgICAgICAgIHZhciB6bFJlZHVjdGlvbiA9IGxhW3psKjYgKyAxNl1cbiAgICAgICAgICAgIHZhciB6bERhdGEgPSBid2dfcmVhZE9mZnNldChiYSwgemwqMjQgKyA3Mik7XG4gICAgICAgICAgICB2YXIgemxJbmRleCA9IGJ3Z19yZWFkT2Zmc2V0KGJhLCB6bCoyNCArIDgwKTtcbiAgICAgICAgICAgIGJ3Zy56b29tTGV2ZWxzLnB1c2goe3JlZHVjdGlvbjogemxSZWR1Y3Rpb24sIGRhdGFPZmZzZXQ6IHpsRGF0YSwgaW5kZXhPZmZzZXQ6IHpsSW5kZXh9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ3Zy5yZWFkQ2hyb21UcmVlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgYndnLmdldEF1dG9TUUwoZnVuY3Rpb24oYXMpIHtcbiAgICAgICAgICAgICAgICBid2cuc2NoZW1hID0gYXM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGJ3Zyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSwge3RpbWVvdXQ6IDUwMDB9KTsgICAgLy8gUG90ZW50aWFsIHRpbWVvdXQgb24gZmlyc3QgcmVxdWVzdCB0byBjYXRjaCBtaXhlZC1jb250ZW50IGVycm9ycyBvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENocm9taXVtLlxufVxuXG5cbkJpZ1dpZy5wcm90b3R5cGUuX3RzRmV0Y2ggPSBmdW5jdGlvbih6b29tLCBjaHIsIG1pbiwgbWF4LCBjYWxsYmFjaykge1xuICAgIHZhciBid2cgPSB0aGlzO1xuICAgIGlmICh6b29tID49IHRoaXMuem9vbUxldmVscy5sZW5ndGggLSAxKSB7XG4gICAgICAgIGlmICghdGhpcy50b3BMZXZlbFJlZHVjdGlvbkNhY2hlKSB7XG4gICAgICAgICAgICB0aGlzLmdldFpvb21lZFZpZXcodGhpcy56b29tTGV2ZWxzLmxlbmd0aCAtIDEpLnJlYWRXaWdEYXRhQnlJZCgtMSwgMCwgMzAwMDAwMDAwLCBmdW5jdGlvbihmZWF0cykge1xuICAgICAgICAgICAgICAgIGJ3Zy50b3BMZXZlbFJlZHVjdGlvbkNhY2hlID0gZmVhdHM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJ3Zy5fdHNGZXRjaCh6b29tLCBjaHIsIG1pbiwgbWF4LCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmID0gW107XG4gICAgICAgICAgICB2YXIgYyA9IHRoaXMudG9wTGV2ZWxSZWR1Y3Rpb25DYWNoZTtcbiAgICAgICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBjLmxlbmd0aDsgKytmaSkge1xuICAgICAgICAgICAgICAgIGlmIChjW2ZpXS5fY2hyb21JZCA9PSBjaHIpIHtcbiAgICAgICAgICAgICAgICAgICAgZi5wdXNoKGNbZmldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdmlldztcbiAgICAgICAgaWYgKHpvb20gPCAwKSB7XG4gICAgICAgICAgICB2aWV3ID0gdGhpcy5nZXRVbnpvb21lZFZpZXcoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZpZXcgPSB0aGlzLmdldFpvb21lZFZpZXcoem9vbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZpZXcucmVhZFdpZ0RhdGFCeUlkKGNociwgbWluLCBtYXgsIGNhbGxiYWNrKTtcbiAgICB9XG59XG5cbkJpZ1dpZy5wcm90b3R5cGUudGhyZXNob2xkU2VhcmNoID0gZnVuY3Rpb24oY2hyTmFtZSwgcmVmZXJlbmNlUG9pbnQsIGRpciwgdGhyZXNob2xkLCBjYWxsYmFjaykge1xuICAgIGRpciA9IChkaXI8MCkgPyAtMSA6IDE7XG4gICAgdmFyIGJ3ZyA9IHRoaXM7XG4gICAgdmFyIGluaXRpYWxDaHIgPSB0aGlzLmNocm9tc1RvSURzW2Nock5hbWVdO1xuICAgIHZhciBjYW5kaWRhdGVzID0gW3tjaHJPcmQ6IDAsIGNocjogaW5pdGlhbENociwgem9vbTogYndnLnpvb21MZXZlbHMubGVuZ3RoIC0gNCwgbWluOiAwLCBtYXg6IDMwMDAwMDAwMCwgZnJvbVJlZjogdHJ1ZX1dXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gdGhpcy5tYXhJRCArIDE7ICsraSkge1xuICAgICAgICB2YXIgY2hySWQgPSAoaW5pdGlhbENociArIChkaXIqaSkpICUgKHRoaXMubWF4SUQgKyAxKTtcbiAgICAgICAgaWYgKGNocklkIDwgMCkgXG4gICAgICAgICAgICBjaHJJZCArPSAodGhpcy5tYXhJRCArIDEpO1xuICAgICAgICBjYW5kaWRhdGVzLnB1c2goe2Nock9yZDogaSwgY2hyOiBjaHJJZCwgem9vbTogYndnLnpvb21MZXZlbHMubGVuZ3RoIC0gMSwgbWluOiAwLCBtYXg6IDMwMDAwMDAwMH0pXG4gICAgfVxuICAgICAgIFxuICAgIGZ1bmN0aW9uIGZiVGhyZXNob2xkU2VhcmNoUmVjdXIoKSB7XG4gICAgXHRpZiAoY2FuZGlkYXRlcy5sZW5ndGggPT0gMCkge1xuICAgIFx0ICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICBcdH1cbiAgICBcdGNhbmRpZGF0ZXMuc29ydChmdW5jdGlvbihjMSwgYzIpIHtcbiAgICBcdCAgICB2YXIgZCA9IGMxLnpvb20gLSBjMi56b29tO1xuICAgIFx0ICAgIGlmIChkICE9IDApXG4gICAgXHRcdCAgICByZXR1cm4gZDtcblxuICAgICAgICAgICAgZCA9IGMxLmNock9yZCAtIGMyLmNock9yZDtcbiAgICAgICAgICAgIGlmIChkICE9IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgXHQgICAgZWxzZVxuICAgIFx0XHQgICAgcmV0dXJuIGMxLm1pbiAtIGMyLm1pbiAqIGRpcjtcbiAgICBcdH0pO1xuXG5cdCAgICB2YXIgY2FuZGlkYXRlID0gY2FuZGlkYXRlcy5zcGxpY2UoMCwgMSlbMF07XG4gICAgICAgIGJ3Zy5fdHNGZXRjaChjYW5kaWRhdGUuem9vbSwgY2FuZGlkYXRlLmNociwgY2FuZGlkYXRlLm1pbiwgY2FuZGlkYXRlLm1heCwgZnVuY3Rpb24oZmVhdHMpIHtcbiAgICAgICAgICAgIHZhciBycCA9IGRpciA+IDAgPyAwIDogMzAwMDAwMDAwO1xuICAgICAgICAgICAgaWYgKGNhbmRpZGF0ZS5mcm9tUmVmKVxuICAgICAgICAgICAgICAgIHJwID0gcmVmZXJlbmNlUG9pbnQ7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAodmFyIGZpID0gMDsgZmkgPCBmZWF0cy5sZW5ndGg7ICsrZmkpIHtcbiAgICBcdCAgICAgICAgdmFyIGYgPSBmZWF0c1tmaV07XG4gICAgICAgICAgICAgICAgdmFyIHNjb3JlO1xuICAgICAgICAgICAgICAgIGlmIChmLm1heFNjb3JlICE9IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgc2NvcmUgPSBmLm1heFNjb3JlO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgc2NvcmUgPSBmLnNjb3JlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRpciA+IDApIHtcbiAgICBcdCAgICAgICAgICAgIGlmIChzY29yZSA+IHRocmVzaG9sZCkge1xuICAgICAgICBcdFx0ICAgICAgICBpZiAoY2FuZGlkYXRlLnpvb20gPCAwKSB7XG4gICAgICAgIFx0XHQgICAgICAgICAgICBpZiAoZi5taW4gPiBycClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGYpO1xuICAgICAgICBcdFx0ICAgICAgICB9IGVsc2UgaWYgKGYubWF4ID4gcnApIHtcbiAgICAgICAgXHRcdCAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7Y2hyOiBjYW5kaWRhdGUuY2hyLCBjaHJPcmQ6IGNhbmRpZGF0ZS5jaHJPcmQsIHpvb206IGNhbmRpZGF0ZS56b29tIC0gMiwgbWluOiBmLm1pbiwgbWF4OiBmLm1heCwgZnJvbVJlZjogY2FuZGlkYXRlLmZyb21SZWZ9KTtcbiAgICAgICAgXHRcdCAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNjb3JlID4gdGhyZXNob2xkKSB7XG4gICAgICAgICAgICBcdFx0ICAgIGlmIChjYW5kaWRhdGUuem9vbSA8IDApIHtcbiAgICAgICAgICAgICAgICBcdCAgICAgICAgaWYgKGYubWF4IDwgcnApXG4gICAgICAgICAgICAgICAgXHRcdFx0ICAgIHJldHVybiBjYWxsYmFjayhmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZi5taW4gPCBycCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7Y2hyOiBjYW5kaWRhdGUuY2hyLCBjaHJPcmQ6IGNhbmRpZGF0ZS5jaHJPcmQsIHpvb206IGNhbmRpZGF0ZS56b29tIC0gMiwgbWluOiBmLm1pbiwgbWF4OiBmLm1heCwgZnJvbVJlZjogY2FuZGlkYXRlLmZyb21SZWZ9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICBcdCAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgXHQgICAgfVxuICAgICAgICAgICAgZmJUaHJlc2hvbGRTZWFyY2hSZWN1cigpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgZmJUaHJlc2hvbGRTZWFyY2hSZWN1cigpO1xufVxuXG5CaWdXaWcucHJvdG90eXBlLmdldEF1dG9TUUwgPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG4gICAgaWYgKCF0aGlzLmFzT2Zmc2V0KVxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG5cblxuICAgIHRoaXMuZGF0YS5zbGljZSh0aGlzLmFzT2Zmc2V0LCAyMDQ4KS5mZXRjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbiAgICAgICAgdmFyIHMgPSAnJztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGJhW2ldID09IDApXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYmFbaV0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvKiBcbiAgICAgICAgICogUXVpY2snbidkaXJ0eSBhdHRlbXB0IHRvIHBhcnNlIGF1dG9TcWwgZm9ybWF0LlxuICAgICAgICAgKiBTZWU6IGh0dHA6Ly93d3cubGludXhqb3VybmFsLmNvbS9maWxlcy9saW51eGpvdXJuYWwuY29tL2xpbnV4am91cm5hbC9hcnRpY2xlcy8wNTkvNTk0OS81OTQ5bDIuaHRtbFxuICAgICAgICAgKi9cblxuICAgICAgICB2YXIgaGVhZGVyX3JlID0gLyhcXHcrKVxccysoXFx3KylcXHMrKFwiKFteXCJdKylcIik/XFxzK1xcKFxccyovO1xuICAgICAgICB2YXIgZmllbGRfcmUgPSAvKFtcXHdcXFtcXF1dKylcXHMrKFxcdyspXFxzKjtcXHMqKFwiKFteXCJdKylcIik/XFxzKi9nO1xuXG4gICAgICAgIHZhciBoZWFkZXJNYXRjaCA9IGhlYWRlcl9yZS5leGVjKHMpO1xuICAgICAgICBpZiAoaGVhZGVyTWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBhcyA9IHtcbiAgICAgICAgICAgICAgICBkZWNsVHlwZTogaGVhZGVyTWF0Y2hbMV0sXG4gICAgICAgICAgICAgICAgbmFtZTogaGVhZGVyTWF0Y2hbMl0sXG4gICAgICAgICAgICAgICAgY29tbWVudDogaGVhZGVyTWF0Y2hbNF0sXG5cbiAgICAgICAgICAgICAgICBmaWVsZHM6IFtdXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzID0gcy5zdWJzdHJpbmcoaGVhZGVyTWF0Y2hbMF0pO1xuICAgICAgICAgICAgZm9yICh2YXIgbSA9IGZpZWxkX3JlLmV4ZWMocyk7IG0gIT0gbnVsbDsgbSA9IGZpZWxkX3JlLmV4ZWMocykpIHtcbiAgICAgICAgICAgICAgICBhcy5maWVsZHMucHVzaCh7dHlwZTogbVsxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogbVsyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudDogbVs0XX0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soYXMpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbkJpZ1dpZy5wcm90b3R5cGUuZ2V0RXh0cmFJbmRpY2VzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuICAgIGlmICh0aGlzLnZlcnNpb24gPCA0IHx8IHRoaXMuZXh0SGVhZGVyT2Zmc2V0ID09IDAgfHwgdGhpcy50eXBlICE9ICdiaWdiZWQnKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRhdGEuc2xpY2UodGhpcy5leHRIZWFkZXJPZmZzZXQsIDY0KS5mZXRjaChmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIFwiQ291bGRuJ3QgZmV0Y2ggZXh0ZW5zaW9uIGhlYWRlclwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0KTtcbiAgICAgICAgICAgIHZhciBzYSA9IG5ldyBJbnQxNkFycmF5KHJlc3VsdCk7XG4gICAgICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShyZXN1bHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgZXh0SGVhZGVyU2l6ZSA9IHNhWzBdO1xuICAgICAgICAgICAgdmFyIGV4dHJhSW5kZXhDb3VudCA9IHNhWzFdO1xuICAgICAgICAgICAgdmFyIGV4dHJhSW5kZXhMaXN0T2Zmc2V0ID0gYndnX3JlYWRPZmZzZXQoYmEsIDQpO1xuXG4gICAgICAgICAgICBpZiAoZXh0cmFJbmRleENvdW50ID09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZJWE1FIDIwYnl0ZSByZWNvcmRzIG9ubHkgbWFrZSBzZW5zZSBmb3Igc2luZ2xlLWZpZWxkIGluZGljZXMuXG4gICAgICAgICAgICAvLyBSaWdodCBub3csIHRoZXNlIHNlZW0gdG8gYmUgdGhlIG9ubHkgdGhpbmdzIGFyb3VuZCwgYnV0IHRoZSBmb3JtYXRcbiAgICAgICAgICAgIC8vIGlzIGFjdHVhbGx5IG1vcmUgZ2VuZXJhbC5cbiAgICAgICAgICAgIHRoaXNCLmRhdGEuc2xpY2UoZXh0cmFJbmRleExpc3RPZmZzZXQsIGV4dHJhSW5kZXhDb3VudCAqIDIwKS5mZXRjaChmdW5jdGlvbihlaWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVpbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgXCJDb3VsZG4ndCBmZXRjaCBpbmRleCBpbmZvXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KGVpbCk7XG4gICAgICAgICAgICAgICAgdmFyIHNhID0gbmV3IEludDE2QXJyYXkoZWlsKTtcbiAgICAgICAgICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShlaWwpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGluZGljZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgZXh0cmFJbmRleENvdW50OyArK2lpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlaVR5cGUgPSBzYVtpaSoxMF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBlaUZpZWxkQ291bnQgPSBzYVtpaSoxMCArIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZWlPZmZzZXQgPSBid2dfcmVhZE9mZnNldChiYSwgaWkqMjAgKyA0KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVpRmllbGQgPSBzYVtpaSoxMCArIDhdXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IG5ldyBCQklFeHRyYUluZGV4KHRoaXNCLCBlaVR5cGUsIGVpRmllbGRDb3VudCwgZWlPZmZzZXQsIGVpRmllbGQpO1xuICAgICAgICAgICAgICAgICAgICBpbmRpY2VzLnB1c2goaW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpbmRpY2VzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIEJCSUV4dHJhSW5kZXgoYmJpLCB0eXBlLCBmaWVsZENvdW50LCBvZmZzZXQsIGZpZWxkKSB7XG4gICAgdGhpcy5iYmkgPSBiYmk7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmZpZWxkQ291bnQgPSBmaWVsZENvdW50O1xuICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIHRoaXMuZmllbGQgPSBmaWVsZDtcbn1cblxuQkJJRXh0cmFJbmRleC5wcm90b3R5cGUubG9va3VwID0gZnVuY3Rpb24obmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuXG4gICAgdGhpcy5iYmkuZGF0YS5zbGljZSh0aGlzLm9mZnNldCwgMzIpLmZldGNoKGZ1bmN0aW9uKGJwdCkge1xuICAgICAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShicHQpO1xuICAgICAgICB2YXIgc2EgPSBuZXcgSW50MTZBcnJheShicHQpO1xuICAgICAgICB2YXIgbGEgPSBuZXcgSW50MzJBcnJheShicHQpO1xuICAgICAgICB2YXIgYnB0TWFnaWMgPSBsYVswXTtcbiAgICAgICAgdmFyIGJsb2NrU2l6ZSA9IGxhWzFdO1xuICAgICAgICB2YXIga2V5U2l6ZSA9IGxhWzJdO1xuICAgICAgICB2YXIgdmFsU2l6ZSA9IGxhWzNdO1xuICAgICAgICB2YXIgaXRlbUNvdW50ID0gYndnX3JlYWRPZmZzZXQoYmEsIDE2KTtcbiAgICAgICAgdmFyIHJvb3ROb2RlT2Zmc2V0ID0gMzI7XG5cbiAgICAgICAgZnVuY3Rpb24gYnB0UmVhZE5vZGUobm9kZU9mZnNldCkge1xuICAgICAgICAgICAgdGhpc0IuYmJpLmRhdGEuc2xpY2Uobm9kZU9mZnNldCwgNCArIChibG9ja1NpemUgKiAoa2V5U2l6ZSArIHZhbFNpemUpKSkuZmV0Y2goZnVuY3Rpb24obm9kZSkge1xuICAgICAgICAgICAgICAgIHZhciBiYSA9IG5ldyBVaW50OEFycmF5KG5vZGUpO1xuICAgICAgICAgICAgICAgIHZhciBzYSA9IG5ldyBVaW50MTZBcnJheShub2RlKTtcbiAgICAgICAgICAgICAgICB2YXIgbGEgPSBuZXcgVWludDMyQXJyYXkobm9kZSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9kZVR5cGUgPSBiYVswXTtcbiAgICAgICAgICAgICAgICB2YXIgY250ID0gc2FbMV07XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gNDtcbiAgICAgICAgICAgICAgICBpZiAobm9kZVR5cGUgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdENoaWxkT2Zmc2V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBjbnQ7ICsrbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2kgPSAwOyBraSA8IGtleVNpemU7ICsra2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckNvZGUgPSBiYVtvZmZzZXQrK107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkT2Zmc2V0ID0gYndnX3JlYWRPZmZzZXQoYmEsIG9mZnNldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gODtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUubG9jYWxlQ29tcGFyZShrZXkpIDwgMCAmJiBsYXN0Q2hpbGRPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicHRSZWFkTm9kZShsYXN0Q2hpbGRPZmZzZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RDaGlsZE9mZnNldCA9IGNoaWxkT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJwdFJlYWROb2RlKGxhc3RDaGlsZE9mZnNldCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBjbnQ7ICsrbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2kgPSAwOyBraSA8IGtleVNpemU7ICsra2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckNvZGUgPSBiYVtvZmZzZXQrK107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlICE9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BlY2lmaWMgZm9yIEVJIGNhc2UuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ID09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBid2dfcmVhZE9mZnNldChiYSwgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuZ3RoID0gcmVhZEludChiYSwgb2Zmc2V0ICsgOCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc0IuYmJpLmdldFVuem9vbWVkVmlldygpLmZldGNoRmVhdHVyZXMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKGNociwgbWluLCBtYXgsIHRva3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tzICYmIHRva3MubGVuZ3RoID4gdGhpc0IuZmllbGQgLSAzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2tzW3RoaXNCLmZpZWxkIC0gM10gPT0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFt7b2Zmc2V0OiBzdGFydCwgc2l6ZTogbGVuZ3RofV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgKz0gdmFsU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnB0UmVhZE5vZGUodGhpc0Iub2Zmc2V0ICsgcm9vdE5vZGVPZmZzZXQpO1xuICAgIH0pO1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIG1ha2VCd2c6IG1ha2VCd2csXG4gICAgICAgIEJJR19CRURfTUFHSUM6IEJJR19CRURfTUFHSUMsXG4gICAgICAgIEJJR19XSUdfTUFHSUM6IEJJR19XSUdfTUFHSUNcbiAgICB9XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDExXG4vL1xuLy8gYmluLmpzIGdlbmVyYWwgYmluYXJ5IGRhdGEgc3VwcG9ydFxuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBzaGFsbG93Q29weSA9IHV0aWxzLnNoYWxsb3dDb3B5O1xuXG4gICAgdmFyIHNoYTEgPSByZXF1aXJlKCcuL3NoYTEnKTtcbiAgICB2YXIgYjY0X3NoYTEgPSBzaGExLmI2NF9zaGExO1xuXG4gICAgdmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG59XG5cbmZ1bmN0aW9uIEJsb2JGZXRjaGFibGUoYikge1xuICAgIHRoaXMuYmxvYiA9IGI7XG59XG5cbkJsb2JGZXRjaGFibGUucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24oc3RhcnQsIGxlbmd0aCkge1xuICAgIHZhciBiO1xuXG4gICAgaWYgKHRoaXMuYmxvYi5zbGljZSkge1xuICAgICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgICAgICBiID0gdGhpcy5ibG9iLnNsaWNlKHN0YXJ0LCBzdGFydCArIGxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiID0gdGhpcy5ibG9iLnNsaWNlKHN0YXJ0KTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChsZW5ndGgpIHtcbiAgICAgICAgICAgIGIgPSB0aGlzLmJsb2Iud2Via2l0U2xpY2Uoc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGIgPSB0aGlzLmJsb2Iud2Via2l0U2xpY2Uoc3RhcnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQmxvYkZldGNoYWJsZShiKTtcbn1cblxuQmxvYkZldGNoYWJsZS5wcm90b3R5cGUuc2FsdGVkID0gZnVuY3Rpb24oKSB7cmV0dXJuIHRoaXM7fVxuXG5pZiAodHlwZW9mKEZpbGVSZWFkZXIpICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIGNvbnNvbGUubG9nKCdkZWZpbmluZyBhc3luYyBCbG9iRmV0Y2hhYmxlLmZldGNoJyk7XG5cbiAgICBCbG9iRmV0Y2hhYmxlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24oZXYpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJzdHJpbmdUb0J1ZmZlcihyZWFkZXIucmVzdWx0KSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcodGhpcy5ibG9iKTtcbiAgICB9XG5cbn0gZWxzZSB7XG4gICAgLy8gaWYgKGNvbnNvbGUgJiYgY29uc29sZS5sb2cpXG4gICAgLy8gICAgY29uc29sZS5sb2coJ2RlZmluaW5nIHN5bmMgQmxvYkZldGNoYWJsZS5mZXRjaCcpO1xuXG4gICAgQmxvYkZldGNoYWJsZS5wcm90b3R5cGUuZmV0Y2ggPSBmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXJTeW5jKCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcmVzID0gcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHRoaXMuYmxvYik7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCBlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gVVJMRmV0Y2hhYmxlKHVybCwgc3RhcnQsIGVuZCwgb3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgb3B0cyA9IHN0YXJ0O1xuICAgICAgICAgICAgc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVybCA9IHVybDtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICBpZiAoZW5kKSB7XG4gICAgICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIH1cbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xufVxuXG5VUkxGZXRjaGFibGUucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24ocywgbCkge1xuICAgIGlmIChzIDwgMCkge1xuICAgICAgICB0aHJvdyAnQmFkIHNsaWNlICcgKyBzO1xuICAgIH1cblxuICAgIHZhciBucyA9IHRoaXMuc3RhcnQsIG5lID0gdGhpcy5lbmQ7XG4gICAgaWYgKG5zICYmIHMpIHtcbiAgICAgICAgbnMgPSBucyArIHM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbnMgPSBzIHx8IG5zO1xuICAgIH1cbiAgICBpZiAobCAmJiBucykge1xuICAgICAgICBuZSA9IG5zICsgbCAtIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbmUgPSBuZSB8fCBsIC0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVUkxGZXRjaGFibGUodGhpcy51cmwsIG5zLCBuZSwgdGhpcy5vcHRzKTtcbn1cblxudmFyIHNlZWQ9MDtcbnZhciBpc1NhZmFyaSA9IHR5cGVvZihuYXZpZ2F0b3IpICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignU2FmYXJpJykgPj0gMCAmJlxuICAgIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPCAwIDtcblxuVVJMRmV0Y2hhYmxlLnByb3RvdHlwZS5mZXRjaEFzVGV4dCA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgdmFyIHRoaXNCID0gdGhpcztcblxuICAgIHRoaXMuZ2V0VVJMKCkudGhlbihmdW5jdGlvbih1cmwpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHZhciBsZW5ndGg7XG4gICAgICAgICAgICBpZiAoKGlzU2FmYXJpIHx8IHRoaXNCLm9wdHMuc2FsdCkgJiYgdXJsLmluZGV4T2YoJz8nKSA8IDApIHtcbiAgICAgICAgICAgICAgICB1cmwgPSB1cmwgKyAnP3NhbHQ9JyArIGI2NF9zaGExKCcnICsgRGF0ZS5ub3coKSArICcsJyArICgrK3NlZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAodGhpc0IuZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNCLmVuZCAtIHRoaXNCLnN0YXJ0ID4gMTAwMDAwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdNb25zdGVyIGZldGNoISc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdSYW5nZScsICdieXRlcz0nICsgdGhpc0Iuc3RhcnQgKyAnLScgKyB0aGlzQi5lbmQpO1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXNCLmVuZCAtIHRoaXNCLnN0YXJ0ICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09IDIwMCB8fCByZXEuc3RhdHVzID09IDIwNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh0aGlzQi5vcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgcmVxLndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXEuc2VuZCgpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgICAgIH1cbiAgICB9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIGVycik7XG4gICAgfSk7XG59XG5cblVSTEZldGNoYWJsZS5wcm90b3R5cGUuc2FsdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG8gPSBzaGFsbG93Q29weSh0aGlzLm9wdHMpO1xuICAgIG8uc2FsdCA9IHRydWU7XG4gICAgcmV0dXJuIG5ldyBVUkxGZXRjaGFibGUodGhpcy51cmwsIHRoaXMuc3RhcnQsIHRoaXMuZW5kLCBvKTtcbn1cblxuVVJMRmV0Y2hhYmxlLnByb3RvdHlwZS5nZXRVUkwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5vcHRzLnJlc29sdmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdHMucmVzb2x2ZXIodGhpcy51cmwpLnRoZW4oZnVuY3Rpb24gKHVybE9yT2JqKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHVybE9yT2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmxPck9iajtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVybE9yT2JqLnVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLnVybCk7XG4gICAgfVxufVxuXG5VUkxGZXRjaGFibGUucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIG9wdHMpIHtcbiAgICB2YXIgdGhpc0IgPSB0aGlzO1xuIFxuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHZhciBhdHRlbXB0ID0gb3B0cy5hdHRlbXB0IHx8IDE7XG4gICAgdmFyIHRydW5jYXRlZExlbmd0aCA9IG9wdHMudHJ1bmNhdGVkTGVuZ3RoO1xuICAgIGlmIChhdHRlbXB0ID4gMykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRVUkwoKS50aGVuKGZ1bmN0aW9uKHVybCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIHRpbWVvdXQ7XG4gICAgICAgICAgICBpZiAob3B0cy50aW1lb3V0ICYmICF0aGlzQi5vcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RpbWluZyBvdXQgJyArIHVybCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCAnVGltZW91dCcpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBvcHRzLnRpbWVvdXRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoO1xuICAgICAgICAgICAgaWYgKChpc1NhZmFyaSB8fCB0aGlzQi5vcHRzLnNhbHQpICYmIHVybC5pbmRleE9mKCc/JykgPCAwKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gdXJsICsgJz9zYWx0PScgKyBiNjRfc2hhMSgnJyArIERhdGUubm93KCkgKyAnLCcgKyAoKytzZWVkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXEub3BlbignR0VUJywgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIHJlcS5vdmVycmlkZU1pbWVUeXBlKCd0ZXh0L3BsYWluOyBjaGFyc2V0PXgtdXNlci1kZWZpbmVkJyk7XG4gICAgICAgICAgICBpZiAodGhpc0IuZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXNCLmVuZCAtIHRoaXNCLnN0YXJ0ID4gMTAwMDAwMDAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdNb25zdGVyIGZldGNoISc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdSYW5nZScsICdieXRlcz0nICsgdGhpc0Iuc3RhcnQgKyAnLScgKyB0aGlzQi5lbmQpO1xuICAgICAgICAgICAgICAgIGxlbmd0aCA9IHRoaXNCLmVuZCAtIHRoaXNCLnN0YXJ0ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlcS5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgICAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDAgfHwgcmVxLnN0YXR1cyA9PSAyMDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXEucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmwgPSByZXEucmVzcG9uc2UuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoICYmIGxlbmd0aCAhPSBibCAmJiAoIXRydW5jYXRlZExlbmd0aCB8fCBibCAhPSB0cnVuY2F0ZWRMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5mZXRjaChjYWxsYmFjaywge2F0dGVtcHQ6IGF0dGVtcHQgKyAxLCB0cnVuY2F0ZWRMZW5ndGg6IGJsfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlcS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXEubW96UmVzcG9uc2VBcnJheUJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhyZXEubW96UmVzcG9uc2VBcnJheUJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gcmVxLnJlc3BvbnNlVGV4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoICYmIGxlbmd0aCAhPSByLmxlbmd0aCAmJiAoIXRydW5jYXRlZExlbmd0aCB8fCByLmxlbmd0aCAhPSB0cnVuY2F0ZWRMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzQi5mZXRjaChjYWxsYmFjaywge2F0dGVtcHQ6IGF0dGVtcHQgKyAxLCB0cnVuY2F0ZWRMZW5ndGg6IHIubGVuZ3RofSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGJzdHJpbmdUb0J1ZmZlcihyZXEucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNCLmZldGNoKGNhbGxiYWNrLCB7YXR0ZW1wdDogYXR0ZW1wdCArIDF9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAodGhpc0Iub3B0cy5jcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxLnNlbmQoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICB9XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsLCBlcnIpO1xuICAgIH0pO1xufVxuICAgICAgICAgICAgICAgICAgICAgICBcbmZ1bmN0aW9uIGJzdHJpbmdUb0J1ZmZlcihyZXN1bHQpIHtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgYmEgPSBuZXcgVWludDhBcnJheShyZXN1bHQubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGJhW2ldID0gcmVzdWx0LmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBiYS5idWZmZXI7XG59XG5cbi8vIFJlYWQgZnJvbSBVaW50OEFycmF5XG5cbnZhciBjb252ZXJ0QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xudmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkoY29udmVydEJ1ZmZlcik7XG52YXIgZmEgPSBuZXcgRmxvYXQzMkFycmF5KGNvbnZlcnRCdWZmZXIpO1xuXG5mdW5jdGlvbiByZWFkRmxvYXQoYnVmLCBvZmZzZXQpIHtcbiAgICBiYVswXSA9IGJ1ZltvZmZzZXRdO1xuICAgIGJhWzFdID0gYnVmW29mZnNldCsxXTtcbiAgICBiYVsyXSA9IGJ1ZltvZmZzZXQrMl07XG4gICAgYmFbM10gPSBidWZbb2Zmc2V0KzNdO1xuICAgIHJldHVybiBmYVswXTtcbn1cblxuZnVuY3Rpb24gcmVhZEludDY0KGJhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gKGJhW29mZnNldCArIDddIDw8IDI0KSB8IChiYVtvZmZzZXQgKyA2XSA8PCAxNikgfCAoYmFbb2Zmc2V0ICsgNV0gPDwgOCkgfCAoYmFbb2Zmc2V0ICsgNF0pO1xufVxuXG5jb25zdCBNMSA9IDI1NixcbiAgICAgIE0yID0gTTEgKiAyNTYsXG4gICAgICBNMyA9IE0yICogMjU2LFxuICAgICAgTTQgPSBNMyAqIDI1NixcbiAgICAgIE01ID0gTTQgKiAyNTY7XG5cbmZ1bmN0aW9uIHJlYWRJbnQ2NExFKGJhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gKGJhW29mZnNldF0pICsgKGJhW29mZnNldCArIDFdICogTTEpICsgKGJhW29mZnNldCArIDJdICogTTIpICsgKGJhW29mZnNldCArIDNdICogTTMpICsgKGJhW29mZnNldCArIDRdICogTTQpICsgKGJhW29mZnNldCArIDVdICogTTUpO1xufVxuXG5mdW5jdGlvbiByZWFkSW50NjRCRShiYSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIChiYVtvZmZzZXQgKyA3XSkgKyAoYmFbb2Zmc2V0ICsgNl0gKiBNMSkgKyAoYmFbb2Zmc2V0ICsgNV0gKiBNMikgKyAoYmFbb2Zmc2V0ICsgNF0gKiBNMykgKyAoYmFbb2Zmc2V0ICsgM10gKiBNNCkgKyAoYmFbb2Zmc2V0ICsgMl0gKiBNNSk7XG59XG5cbmZ1bmN0aW9uIHJlYWRJbnQoYmEsIG9mZnNldCkge1xuICAgIHJldHVybiAoYmFbb2Zmc2V0ICsgM10gPDwgMjQpIHwgKGJhW29mZnNldCArIDJdIDw8IDE2KSB8IChiYVtvZmZzZXQgKyAxXSA8PCA4KSB8IChiYVtvZmZzZXRdKTtcbn1cblxuZnVuY3Rpb24gcmVhZFNob3J0KGJhLCBvZmZzZXQpIHtcbiAgICByZXR1cm4gKGJhW29mZnNldCArIDFdIDw8IDgpIHwgKGJhW29mZnNldF0pO1xufVxuXG5mdW5jdGlvbiByZWFkQnl0ZShiYSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIGJhW29mZnNldF07XG59XG5cbmZ1bmN0aW9uIHJlYWRJbnRCRShiYSwgb2Zmc2V0KSB7XG4gICAgcmV0dXJuIChiYVtvZmZzZXRdIDw8IDI0KSB8IChiYVtvZmZzZXQgKyAxXSA8PCAxNikgfCAoYmFbb2Zmc2V0ICsgMl0gPDwgOCkgfCAoYmFbb2Zmc2V0ICsgM10pO1xufVxuXG4vLyBFeHBvcnRzIGlmIHdlIGFyZSBiZWluZyB1c2VkIGFzIGEgbW9kdWxlXG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgQmxvYkZldGNoYWJsZTogQmxvYkZldGNoYWJsZSxcbiAgICAgICAgVVJMRmV0Y2hhYmxlOiBVUkxGZXRjaGFibGUsXG5cbiAgICAgICAgcmVhZEludDogcmVhZEludCxcbiAgICAgICAgcmVhZEludEJFOiByZWFkSW50QkUsXG4gICAgICAgIHJlYWRJbnQ2NDogcmVhZEludDY0LFxuICAgICAgICByZWFkSW50NjRMRTogcmVhZEludDY0TEUsXG4gICAgICAgIHJlYWRJbnQ2NEJFOiByZWFkSW50NjRCRSxcbiAgICAgICAgcmVhZFNob3J0OiByZWFkU2hvcnQsXG4gICAgICAgIHJlYWRCeXRlOiByZWFkQnl0ZSxcbiAgICAgICAgcmVhZEZsb2F0OiByZWFkRmxvYXRcbiAgICB9XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDEwXG4vL1xuLy8gY29sb3IuanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBEQ29sb3VyKHJlZCwgZ3JlZW4sIGJsdWUsIG5hbWUpIHtcbiAgICB0aGlzLnJlZCA9IHJlZHwwO1xuICAgIHRoaXMuZ3JlZW4gPSBncmVlbnwwO1xuICAgIHRoaXMuYmx1ZSA9IGJsdWV8MDtcbiAgICBpZiAobmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbn1cblxuRENvbG91ci5wcm90b3R5cGUudG9TdmdTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMubmFtZSkge1xuICAgICAgICB0aGlzLm5hbWUgPSBcInJnYihcIiArIHRoaXMucmVkICsgXCIsXCIgKyB0aGlzLmdyZWVuICsgXCIsXCIgKyB0aGlzLmJsdWUgKyBcIilcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5uYW1lO1xufVxuXG5mdW5jdGlvbiBoZXgyKHgpIHtcbiAgICB2YXIgeSA9ICcwMCcgKyB4LnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4geS5zdWJzdHJpbmcoeS5sZW5ndGggLSAyKTtcbn1cblxuRENvbG91ci5wcm90b3R5cGUudG9IZXhTdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJyMnICsgaGV4Mih0aGlzLnJlZCkgKyBoZXgyKHRoaXMuZ3JlZW4pICsgaGV4Mih0aGlzLmJsdWUpO1xufVxuXG52YXIgcGFsZXR0ZSA9IHtcbiAgICByZWQ6IG5ldyBEQ29sb3VyKDI1NSwgMCwgMCwgJ3JlZCcpLFxuICAgIGdyZWVuOiBuZXcgRENvbG91cigwLCAyNTUsIDAsICdncmVlbicpLFxuICAgIGJsdWU6IG5ldyBEQ29sb3VyKDAsIDAsIDI1NSwgJ2JsdWUnKSxcbiAgICB5ZWxsb3c6IG5ldyBEQ29sb3VyKDI1NSwgMjU1LCAwLCAneWVsbG93JyksXG4gICAgd2hpdGU6IG5ldyBEQ29sb3VyKDI1NSwgMjU1LCAyNTUsICd3aGl0ZScpLFxuICAgIGJsYWNrOiBuZXcgRENvbG91cigwLCAwLCAwLCAnYmxhY2snKSxcbiAgICBncmF5OiBuZXcgRENvbG91cigxODAsIDE4MCwgMTgwLCAnZ3JheScpLFxuICAgIGdyZXk6IG5ldyBEQ29sb3VyKDE4MCwgMTgwLCAxODAsICdncmV5JyksXG4gICAgbGlnaHRza3libHVlOiBuZXcgRENvbG91cigxMzUsIDIwNiwgMjUwLCAnbGlnaHRza3libHVlJyksXG4gICAgbGlnaHRzYWxtb246IG5ldyBEQ29sb3VyKDI1NSwgMTYwLCAxMjIsICdsaWdodHNhbG1vbicpLFxuICAgIGhvdHBpbms6IG5ldyBEQ29sb3VyKDI1NSwgMTA1LCAxODAsICdob3RwaW5rJylcbn07XG5cbnZhciBDT0xPUl9SRSA9IG5ldyBSZWdFeHAoJ14jKFswLTlBLUZhLWZdezJ9KShbMC05QS1GYS1mXXsyfSkoWzAtOUEtRmEtZl17Mn0pJCcpO1xudmFyIENTU19DT0xPUl9SRSA9IC9yZ2JcXCgoWzAtOV0rKSwoWzAtOV0rKSwoWzAtOV0rKVxcKS9cblxuZnVuY3Rpb24gZGFzQ29sb3VyRm9yTmFtZShuYW1lKSB7XG4gICAgdmFyIGMgPSBwYWxldHRlW25hbWVdO1xuICAgIGlmICghYykge1xuICAgICAgICB2YXIgbWF0Y2ggPSBDT0xPUl9SRS5leGVjKG5hbWUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGMgPSBuZXcgRENvbG91cigoJzB4JyArIG1hdGNoWzFdKXwwLCAoJzB4JyArIG1hdGNoWzJdKXwwLCAoJzB4JyArIG1hdGNoWzNdKXwwLCBuYW1lKTtcbiAgICAgICAgICAgIHBhbGV0dGVbbmFtZV0gPSBjO1xuICAgICAgICB9IGVsc2Uge1xuICAgIFx0ICAgIG1hdGNoID0gQ1NTX0NPTE9SX1JFLmV4ZWMobmFtZSk7XG4gICAgXHQgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIFx0XHRjID0gbmV3IERDb2xvdXIobWF0Y2hbMV18MCwgbWF0Y2hbMl18MCwgbWF0Y2hbM118MCwgbmFtZSk7XG4gICAgICAgIFx0XHRwYWxldHRlW25hbWVdID0gYztcblx0ICAgICAgIH0gZWxzZSB7XG5cdFx0ICAgICAgY29uc29sZS5sb2coXCJjb3VsZG4ndCBoYW5kbGUgY29sb3I6IFwiICsgbmFtZSk7XG5cdFx0ICAgICAgYyA9IHBhbGV0dGUuYmxhY2s7XG5cdFx0ICAgICAgcGFsZXR0ZVtuYW1lXSA9IGM7XG5cdCAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGM7XG59XG5cbmZ1bmN0aW9uIG1ha2VDb2xvdXJTdGVwcyhzdGVwcywgc3RvcHMsIGNvbG91cnMpIHtcbiAgICB2YXIgZGNvbG91cnMgPSBbXTtcbiAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgY29sb3Vycy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgZGNvbG91cnMucHVzaChkYXNDb2xvdXJGb3JOYW1lKGNvbG91cnNbY2ldKSk7XG4gICAgfVxuXG4gICAgdmFyIGdyYWQgPSBbXTtcbiAgU1RFUF9MT09QOlxuICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzdGVwczsgKytzaSkge1xuICAgICAgICB2YXIgcnMgPSAoMS4wICogc2kpIC8gKHN0ZXBzLTEpO1xuICAgICAgICB2YXIgc2NvcmUgPSBzdG9wc1swXSArIChzdG9wc1tzdG9wcy5sZW5ndGggLTFdIC0gc3RvcHNbMF0pICogcnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RvcHMubGVuZ3RoIC0gMTsgKytpKSB7XG4gICAgICAgICAgICBpZiAoc2NvcmUgPj0gc3RvcHNbaV0gJiYgc2NvcmUgPD0gc3RvcHNbaSsxXSkge1xuICAgICAgICAgICAgICAgIHZhciBmcmFjID0gKHNjb3JlIC0gc3RvcHNbaV0pIC8gKHN0b3BzW2krMV0gLSBzdG9wc1tpXSk7XG4gICAgICAgICAgICAgICAgdmFyIGNhID0gZGNvbG91cnNbaV07XG4gICAgICAgICAgICAgICAgdmFyIGNiID0gZGNvbG91cnNbaSsxXTtcblxuICAgICAgICAgICAgICAgIHZhciBmaWxsID0gbmV3IERDb2xvdXIoXG4gICAgICAgICAgICAgICAgICAgICgoY2EucmVkICogKDEuMCAtIGZyYWMpKSArIChjYi5yZWQgKiBmcmFjKSl8MCxcbiAgICAgICAgICAgICAgICAgICAgKChjYS5ncmVlbiAqICgxLjAgLSBmcmFjKSkgKyAoY2IuZ3JlZW4gKiBmcmFjKSl8MCxcbiAgICAgICAgICAgICAgICAgICAgKChjYS5ibHVlICogKDEuMCAtIGZyYWMpKSArIChjYi5ibHVlICogZnJhYykpfDBcbiAgICAgICAgICAgICAgICApLnRvU3ZnU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgZ3JhZC5wdXNoKGZpbGwpO1xuXG4gICAgICAgICAgICAgICAgY29udGludWUgU1RFUF9MT09QO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93ICdCYWQgc3RlcCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdyYWQ7XG59XG5cbmZ1bmN0aW9uIG1ha2VHcmFkaWVudChzdGVwcywgY29sb3IxLCBjb2xvcjIsIGNvbG9yMykge1xuICAgIGlmIChjb2xvcjMpIHtcbiAgICAgICAgcmV0dXJuIG1ha2VDb2xvdXJTdGVwcyhzdGVwcywgWzAsIDAuNSwgMV0sIFtjb2xvcjEsIGNvbG9yMiwgY29sb3IzXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1ha2VDb2xvdXJTdGVwcyhzdGVwcywgWzAsIDFdLCBbY29sb3IxLCBjb2xvcjJdKTtcbiAgICB9XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgbWFrZUNvbG91clN0ZXBzOiBtYWtlQ29sb3VyU3RlcHMsXG4gICAgICAgIG1ha2VHcmFkaWVudDogbWFrZUdyYWRpZW50LFxuICAgICAgICBkYXNDb2xvdXJGb3JOYW1lOiBkYXNDb2xvdXJGb3JOYW1lXG4gICAgfTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTBcbi8vXG4vLyBkYXMuanM6IHF1ZXJpZXMgYW5kIGxvdy1sZXZlbCBkYXRhIG1vZGVsLlxuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuICAgIHZhciBzaGFsbG93Q29weSA9IHV0aWxzLnNoYWxsb3dDb3B5O1xuICAgIHZhciBwdXNobyA9IHV0aWxzLnB1c2hvO1xuXG4gICAgdmFyIGNvbG9yID0gcmVxdWlyZSgnLi9jb2xvcicpO1xuICAgIHZhciBtYWtlQ29sb3VyU3RlcHMgPSBjb2xvci5tYWtlQ29sb3VyU3RlcHM7XG59XG5cbnZhciBkYXNMaWJFcnJvckhhbmRsZXIgPSBmdW5jdGlvbihlcnJNc2cpIHtcbiAgICBhbGVydChlcnJNc2cpO1xufVxudmFyIGRhc0xpYlJlcXVlc3RRdWV1ZSA9IG5ldyBBcnJheSgpO1xuXG5mdW5jdGlvbiBEQVNTZWdtZW50KG5hbWUsIHN0YXJ0LCBlbmQsIGRlc2NyaXB0aW9uKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xufVxuREFTU2VnbWVudC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lICsgJzonICsgdGhpcy5zdGFydCArICcuLicgKyB0aGlzLmVuZDtcbn07XG5EQVNTZWdtZW50LnByb3RvdHlwZS5pc0JvdW5kZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGFydCAmJiB0aGlzLmVuZDtcbn1cbkRBU1NlZ21lbnQucHJvdG90eXBlLnRvREFTUXVlcnkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcSA9ICdzZWdtZW50PScgKyB0aGlzLm5hbWU7XG4gICAgaWYgKHRoaXMuc3RhcnQgJiYgdGhpcy5lbmQpIHtcbiAgICAgICAgcSArPSAoJzonICsgdGhpcy5zdGFydCArICcsJyArIHRoaXMuZW5kKTtcbiAgICB9XG4gICAgcmV0dXJuIHE7XG59XG5cblxuZnVuY3Rpb24gREFTU291cmNlKGExLCBhMikge1xuICAgIHZhciBvcHRpb25zO1xuICAgIGlmICh0eXBlb2YgYTEgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy51cmkgPSBhMTtcbiAgICAgICAgb3B0aW9ucyA9IGEyIHx8IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdGlvbnMgPSBhMSB8fCB7fTtcbiAgICB9XG4gICAgZm9yICh2YXIgayBpbiBvcHRpb25zKSB7XG4gICAgICAgIHRoaXNba10gPSBvcHRpb25zW2tdO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5jb29yZHMpIHtcbiAgICAgICAgdGhpcy5jb29yZHMgPSBbXTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLnByb3BzKSB7XG4gICAgICAgIHRoaXMucHJvcHMgPSB7fTtcbiAgICB9XG5cbiAgICB0aGlzLmRhc0Jhc2VVUkkgPSB0aGlzLnVyaTtcbiAgICBpZiAodGhpcy5kYXNCYXNlVVJJICYmIHRoaXMuZGFzQmFzZVVSSS5zdWJzdHIodGhpcy51cmkubGVuZ3RoIC0gMSkgIT0gJy8nKSB7XG4gICAgICAgIHRoaXMuZGFzQmFzZVVSSSA9IHRoaXMuZGFzQmFzZVVSSSArICcvJztcbiAgICB9XG59XG5cbkRBU1NvdXJjZS5wcm90b3R5cGUuZ2V0VVJJID0gZnVuY3Rpb24odXJpKSB7XG4gICAgaWYgKHRoaXMucmVzb2x2ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZXIodXJpKS50aGVuKGZ1bmN0aW9uICh1cmxPck9iaikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmxPck9iaiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXJsT3JPYmo7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB1cmxPck9iai51cmw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXJpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIERBU0Nvb3JkcygpIHtcbn1cblxuZnVuY3Rpb24gY29vcmRzTWF0Y2goYzEsIGMyKSB7XG4gICAgcmV0dXJuIGMxLnRheG9uID09IGMyLnRheG9uICYmIGMxLmF1dGggPT0gYzIuYXV0aCAmJiBjMS52ZXJzaW9uID09IGMyLnZlcnNpb247XG59XG5cbi8vXG4vLyBEQVMgMS42IGVudHJ5X3BvaW50cyBjb21tYW5kXG4vL1xuXG5EQVNTb3VyY2UucHJvdG90eXBlLmVudHJ5UG9pbnRzID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgZGFzVVJJID0gdGhpcy5kYXNCYXNlVVJJICsgJ2VudHJ5X3BvaW50cyc7XG4gICAgdGhpcy5kb0Nyb3NzRG9tYWluUmVxdWVzdChkYXNVUkksIGZ1bmN0aW9uKHJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKFtdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBlbnRyeVBvaW50cyA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBzZWdzID0gcmVzcG9uc2VYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1NFR01FTlQnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdJZCA9IHNlZy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnU2l6ZSA9IHNlZy5nZXRBdHRyaWJ1dGUoJ3NpemUnKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ01pbiwgc2VnTWF4O1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VnU2l6ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnTWluID0gMTsgc2VnTWF4ID0gc2VnU2l6ZXwwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnTWluID0gc2VnLmdldEF0dHJpYnV0ZSgnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdNaW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdNaW4gfD0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ01heCA9IHNlZy5nZXRBdHRyaWJ1dGUoJ3N0b3AnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdNYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdNYXggfD0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnRGVzYyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWcuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnRGVzYyA9IHNlZy5maXJzdENoaWxkLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbnRyeVBvaW50cy5wdXNoKG5ldyBEQVNTZWdtZW50KHNlZ0lkLCBzZWdNaW4sIHNlZ01heCwgc2VnRGVzYykpO1xuICAgICAgICAgICAgICAgIH0gICAgICAgICAgXG4gICAgICAgICAgICAgICBjYWxsYmFjayhlbnRyeVBvaW50cyk7XG4gICAgfSk7ICAgICAgICAgXG59XG5cbi8vXG4vLyBEQVMgMS42IHNlcXVlbmNlIGNvbW1hbmRcbi8vIERvIHdlIG5lZWQgYW4gb3B0aW9uIHRvIGZhbGwgYmFjayB0byB0aGUgZG5hIGNvbW1hbmQ/XG4vL1xuXG5mdW5jdGlvbiBEQVNTZXF1ZW5jZShuYW1lLCBzdGFydCwgZW5kLCBhbHBoYSwgc2VxKSB7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnN0YXJ0ID0gc3RhcnQ7XG4gICAgdGhpcy5lbmQgPSBlbmQ7XG4gICAgdGhpcy5hbHBoYWJldCA9IGFscGhhO1xuICAgIHRoaXMuc2VxID0gc2VxO1xufVxuXG5EQVNTb3VyY2UucHJvdG90eXBlLnNlcXVlbmNlID0gZnVuY3Rpb24oc2VnbWVudCwgY2FsbGJhY2spIHtcbiAgICB2YXIgZGFzVVJJID0gdGhpcy5kYXNCYXNlVVJJICsgJ3NlcXVlbmNlPycgKyBzZWdtZW50LnRvREFTUXVlcnkoKTtcbiAgICB0aGlzLmRvQ3Jvc3NEb21haW5SZXF1ZXN0KGRhc1VSSSwgZnVuY3Rpb24ocmVzcG9uc2VYTUwpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZVhNTCkge1xuICAgICAgICAgICAgY2FsbGJhY2soW10pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBzZXFzID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHNlZ3MgPSByZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU0VRVUVOQ0UnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ3MubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZyA9IHNlZ3NbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdJZCA9IHNlZy5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWdNaW4gPSBzZWcuZ2V0QXR0cmlidXRlKCdzdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnTWF4ID0gc2VnLmdldEF0dHJpYnV0ZSgnc3RvcCcpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnQWxwaGEgPSAnRE5BJztcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ1NlcSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWcuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhd1NlcSA9IHNlZy5maXJzdENoaWxkLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ1NlcSA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkeCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFjZSA9IHJhd1NlcS5pbmRleE9mKCdcXG4nLCBpZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGFjZSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ1NlcSArPSByYXdTZXEuc3Vic3RyaW5nKGlkeCwgc3BhY2UpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeCA9IHNwYWNlICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWdTZXEgKz0gcmF3U2VxLnN1YnN0cmluZyhpZHgpLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZXFzLnB1c2gobmV3IERBU1NlcXVlbmNlKHNlZ0lkLCBzZWdNaW4sIHNlZ01heCwgc2VnQWxwaGEsIHNlZ1NlcSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhzZXFzKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG4vL1xuLy8gREFTIDEuNiBmZWF0dXJlcyBjb21tYW5kXG4vL1xuXG5mdW5jdGlvbiBEQVNGZWF0dXJlKCkge1xufVxuXG5mdW5jdGlvbiBEQVNHcm91cChpZCkge1xuICAgIGlmIChpZClcbiAgICAgICAgdGhpcy5pZCA9IGlkO1xufVxuXG5mdW5jdGlvbiBEQVNMaW5rKGRlc2MsIHVyaSkge1xuICAgIHRoaXMuZGVzYyA9IGRlc2M7XG4gICAgdGhpcy51cmkgPSB1cmk7XG59XG5cbkRBU1NvdXJjZS5wcm90b3R5cGUuZmVhdHVyZXMgPSBmdW5jdGlvbihzZWdtZW50LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHZhciB0aGlzQiA9IHRoaXM7XG5cbiAgICB2YXIgZGFzVVJJO1xuICAgIGlmICh0aGlzLmZlYXR1cmVzX3VyaSkge1xuICAgICAgICBkYXNVUkkgPSB0aGlzLmZlYXR1cmVzX3VyaTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZmlsdGVycyA9IFtdO1xuXG4gICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2goc2VnbWVudC50b0RBU1F1ZXJ5KCkpO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuZ3JvdXApIHtcbiAgICAgICAgICAgIHZhciBnID0gb3B0aW9ucy5ncm91cDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZyA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCgnZ3JvdXBfaWQ9JyArIGcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBnaSA9IDA7IGdpIDwgZy5sZW5ndGg7ICsrZ2kpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5wdXNoKCdncm91cF9pZD0nICsgZ1tnaV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmFkamFjZW50KSB7XG4gICAgICAgICAgICB2YXIgYWRqID0gb3B0aW9ucy5hZGphY2VudDtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWRqID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgYWRqID0gW2Fkal07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBhaSA9IDA7IGFpIDwgYWRqLmxlbmd0aDsgKythaSkge1xuICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCgnYWRqYWNlbnQ9JyArIGFkalthaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudHlwZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnR5cGUgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJzLnB1c2goJ3R5cGU9JyArIG9wdGlvbnMudHlwZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHRpID0gMDsgdGkgPCBvcHRpb25zLnR5cGUubGVuZ3RoOyArK3RpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbHRlcnMucHVzaCgndHlwZT0nICsgb3B0aW9ucy50eXBlW3RpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAob3B0aW9ucy5tYXhiaW5zKSB7XG4gICAgICAgICAgICBmaWx0ZXJzLnB1c2goJ21heGJpbnM9JyArIG9wdGlvbnMubWF4Ymlucyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChmaWx0ZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGRhc1VSSSA9IHRoaXMuZGFzQmFzZVVSSSArICdmZWF0dXJlcz8nICsgZmlsdGVycy5qb2luKCc7Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhbXSwgJ05vIGZpbHRlcnMgc3BlY2lmaWVkJyk7XG4gICAgICAgIH1cbiAgICB9IFxuICAgXG5cbiAgICB0aGlzLmRvQ3Jvc3NEb21haW5SZXF1ZXN0KGRhc1VSSSwgZnVuY3Rpb24ocmVzcG9uc2VYTUwsIHJlcSkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICB2YXIgbXNnO1xuICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT0gMCkge1xuICAgICAgICAgICAgICAgIG1zZyA9ICdzZXJ2ZXIgbWF5IG5vdCBzdXBwb3J0IENPUlMnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtc2cgPSAnc3RhdHVzPScgKyByZXEuc3RhdHVzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FsbGJhY2soW10sICdGYWlsZWQgcmVxdWVzdDogJyArIG1zZyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbi8qICAgICAgaWYgKHJlcSkge1xuICAgICAgICAgICAgdmFyIGNhcHMgPSByZXEuZ2V0UmVzcG9uc2VIZWFkZXIoJ1gtREFTLUNhcGFiaWx0aWVzJyk7XG4gICAgICAgICAgICBpZiAoY2Fwcykge1xuICAgICAgICAgICAgICAgIGFsZXJ0KGNhcHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICovXG5cbiAgICAgICAgdmFyIGZlYXR1cmVzID0gbmV3IEFycmF5KCk7XG4gICAgICAgIHZhciBzZWdtZW50TWFwID0ge307XG5cbiAgICAgICAgdmFyIHNlZ3MgPSByZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU0VHTUVOVCcpO1xuICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc2Vncy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgIHZhciBzZWdtZW50WE1MID0gc2Vnc1tzaV07XG4gICAgICAgICAgICB2YXIgc2VnbWVudElEID0gc2VnbWVudFhNTC5nZXRBdHRyaWJ1dGUoJ2lkJyk7XG4gICAgICAgICAgICBzZWdtZW50TWFwW3NlZ21lbnRJRF0gPSB7XG4gICAgICAgICAgICAgICAgbWluOiBzZWdtZW50WE1MLmdldEF0dHJpYnV0ZSgnc3RhcnQnKSxcbiAgICAgICAgICAgICAgICBtYXg6IHNlZ21lbnRYTUwuZ2V0QXR0cmlidXRlKCdzdG9wJylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBmZWF0dXJlWE1McyA9IHNlZ21lbnRYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0ZFQVRVUkUnKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZVhNTHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVYTUxzW2ldO1xuICAgICAgICAgICAgICAgIHZhciBkYXNGZWF0dXJlID0gbmV3IERBU0ZlYXR1cmUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnNlZ21lbnQgPSBzZWdtZW50SUQ7XG4gICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5pZCA9IGZlYXR1cmUuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubGFiZWwgPSBmZWF0dXJlLmdldEF0dHJpYnV0ZSgnbGFiZWwnKTtcblxuXG4vKlxuICAgICAgICAgICAgICAgIHZhciBjaGlsZE5vZGVzID0gZmVhdHVyZS5jaGlsZE5vZGVzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgY2hpbGROb2Rlcy5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY24gPSBjaGlsZE5vZGVzW2NdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY24ubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBjbi50YWdOYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgdmFsID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKGNuLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgdmFsID0gY24uZmlyc3RDaGlsZC5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmVba2V5XSA9ICd4JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKi9cblxuXG4gICAgICAgICAgICAgICAgdmFyIHNwb3MgPSBlbGVtZW50VmFsdWUoZmVhdHVyZSwgXCJTVEFSVFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgZXBvcyA9IGVsZW1lbnRWYWx1ZShmZWF0dXJlLCBcIkVORFwiKTtcbiAgICAgICAgICAgICAgICBpZiAoKHNwb3N8MCkgPiAoZXBvc3wwKSkge1xuICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLm1pbiA9IGVwb3N8MDtcbiAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5tYXggPSBzcG9zfDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5taW4gPSBzcG9zfDA7XG4gICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubWF4ID0gZXBvc3wwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZWMgPSBmZWF0dXJlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdUWVBFJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlID0gdGVjWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnR5cGUgPSB0ZS5maXJzdENoaWxkLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUudHlwZUlkID0gdGUuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS50eXBlQ3YgPSB0ZS5nZXRBdHRyaWJ1dGUoJ2N2SWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnR5cGUgPSBlbGVtZW50VmFsdWUoZmVhdHVyZSwgXCJUWVBFXCIpO1xuICAgICAgICAgICAgICAgIGlmICghZGFzRmVhdHVyZS50eXBlICYmIGRhc0ZlYXR1cmUudHlwZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUudHlwZSA9IGRhc0ZlYXR1cmUudHlwZUlkOyAvLyBGSVhNRT9cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5tZXRob2QgPSBlbGVtZW50VmFsdWUoZmVhdHVyZSwgXCJNRVRIT0RcIik7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3JpID0gZWxlbWVudFZhbHVlKGZlYXR1cmUsIFwiT1JJRU5UQVRJT05cIik7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3JpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvcmkgPSAnMCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5vcmllbnRhdGlvbiA9IG9yaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5zY29yZSA9IGVsZW1lbnRWYWx1ZShmZWF0dXJlLCBcIlNDT1JFXCIpO1xuICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubGlua3MgPSBkYXNMaW5rc09mKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUubm90ZXMgPSBkYXNOb3Rlc09mKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZhciBncm91cHMgPSBmZWF0dXJlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiR1JPVVBcIik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZ2kgID0gMDsgZ2kgPCBncm91cHMubGVuZ3RoOyArK2dpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cFhNTCA9IGdyb3Vwc1tnaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXNHcm91cCA9IG5ldyBEQVNHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICBkYXNHcm91cC50eXBlID0gZ3JvdXBYTUwuZ2V0QXR0cmlidXRlKCd0eXBlJyk7XG4gICAgICAgICAgICAgICAgICAgIGRhc0dyb3VwLmlkID0gZ3JvdXBYTUwuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgICAgICAgICAgICAgICAgICBkYXNHcm91cC5saW5rcyA9IGRhc0xpbmtzT2YoZ3JvdXBYTUwpO1xuICAgICAgICAgICAgICAgICAgICBkYXNHcm91cC5ub3RlcyA9IGRhc05vdGVzT2YoZ3JvdXBYTUwpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWRhc0ZlYXR1cmUuZ3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLmdyb3VwcyA9IG5ldyBBcnJheShkYXNHcm91cCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLmdyb3Vwcy5wdXNoKGRhc0dyb3VwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE1hZ2ljIG5vdGVzLiAgQ2hlY2sgd2l0aCBUQUQgYmVmb3JlIGNoYW5naW5nIHRoaXMuXG4gICAgICAgICAgICAgICAgaWYgKGRhc0ZlYXR1cmUubm90ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmkgPSAwOyBuaSA8IGRhc0ZlYXR1cmUubm90ZXMubGVuZ3RoOyArK25pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbiA9IGRhc0ZlYXR1cmUubm90ZXNbbmldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uaW5kZXhPZignR2VuZW5hbWU9JykgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZyA9IG5ldyBEQVNHcm91cCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdnLnR5cGU9J2dlbmUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdnLmlkID0gbi5zdWJzdHJpbmcoOSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkYXNGZWF0dXJlLmdyb3Vwcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLmdyb3VwcyA9IG5ldyBBcnJheShnZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzRmVhdHVyZS5ncm91cHMucHVzaChnZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlYyA9IGZlYXR1cmUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ1BBUlQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlYy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHBpID0gMDsgcGkgPCBwZWMubGVuZ3RoOyArK3BpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaChwZWNbcGldLmdldEF0dHJpYnV0ZSgnaWQnKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXNGZWF0dXJlLnBhcnRzID0gcGFydHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGVjID0gZmVhdHVyZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnUEFSRU5UJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwZWMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHBpID0gMDsgcGkgPCBwZWMubGVuZ3RoOyArK3BpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50cy5wdXNoKHBlY1twaV0uZ2V0QXR0cmlidXRlKCdpZCcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhc0ZlYXR1cmUucGFyZW50cyA9IHBhcmVudHM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaChkYXNGZWF0dXJlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICBjYWxsYmFjayhmZWF0dXJlcywgdW5kZWZpbmVkLCBzZWdtZW50TWFwKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgY2FsbGJhY2soW10sIGVycik7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIERBU0FsaWdubWVudCh0eXBlKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm9iamVjdHMgPSB7fTtcbiAgICB0aGlzLmJsb2NrcyA9IFtdO1xufVxuXG5EQVNTb3VyY2UucHJvdG90eXBlLmFsaWdubWVudHMgPSBmdW5jdGlvbihzZWdtZW50LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBkYXNVUkkgPSB0aGlzLmRhc0Jhc2VVUkkgKyAnYWxpZ25tZW50P3F1ZXJ5PScgKyBzZWdtZW50O1xuICAgIHRoaXMuZG9Dcm9zc0RvbWFpblJlcXVlc3QoZGFzVVJJLCBmdW5jdGlvbihyZXNwb25zZVhNTCkge1xuICAgICAgICBpZiAoIXJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhbXSwgJ0ZhaWxlZCByZXF1ZXN0ICcgKyBkYXNVUkkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGFsaWdubWVudHMgPSBbXTtcbiAgICAgICAgdmFyIGFsaVhNTHMgPSByZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYWxpZ25tZW50Jyk7XG4gICAgICAgIGZvciAodmFyIGFpID0gMDsgYWkgPCBhbGlYTUxzLmxlbmd0aDsgKythaSkge1xuICAgICAgICAgICAgdmFyIGFsaVhNTCA9IGFsaVhNTHNbYWldO1xuICAgICAgICAgICAgdmFyIGFsaSA9IG5ldyBEQVNBbGlnbm1lbnQoYWxpWE1MLmdldEF0dHJpYnV0ZSgnYWxpZ25UeXBlJykpO1xuICAgICAgICAgICAgdmFyIG9ialhNTHMgPSBhbGlYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2FsaWduT2JqZWN0Jyk7XG4gICAgICAgICAgICBmb3IgKHZhciBvaSA9IDA7IG9pIDwgb2JqWE1Mcy5sZW5ndGg7ICsrb2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgb2JqWE1MID0gb2JqWE1Mc1tvaV07XG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICAgICAgICAgIG9ialhNTC5nZXRBdHRyaWJ1dGUoJ2ludE9iamVjdElkJyksXG4gICAgICAgICAgICAgICAgICAgIGFjY2Vzc2lvbjogICBvYmpYTUwuZ2V0QXR0cmlidXRlKCdkYkFjY2Vzc2lvbklkJyksXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICAgICBvYmpYTUwuZ2V0QXR0cmlidXRlKCdvYmplY3RWZXJzaW9uJyksXG4gICAgICAgICAgICAgICAgICAgIGRiU291cmNlOiAgICBvYmpYTUwuZ2V0QXR0cmlidXRlKCdkYlNvdXJjZScpLFxuICAgICAgICAgICAgICAgICAgICBkYlZlcnNpb246ICAgb2JqWE1MLmdldEF0dHJpYnV0ZSgnZGJWZXJzaW9uJylcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFsaS5vYmplY3RzW29iai5pZF0gPSBvYmo7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBibG9ja1hNTHMgPSBhbGlYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jsb2NrJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBiaSA9IDA7IGJpIDwgYmxvY2tYTUxzLmxlbmd0aDsgKytiaSkge1xuICAgICAgICAgICAgICAgIHZhciBibG9ja1hNTCA9IGJsb2NrWE1Mc1tiaV07XG4gICAgICAgICAgICAgICAgdmFyIGJsb2NrID0ge1xuICAgICAgICAgICAgICAgICAgICBvcmRlcjogICAgICBibG9ja1hNTC5nZXRBdHRyaWJ1dGUoJ2Jsb2NrT3JkZXInKSxcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudHM6ICAgW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBzZWdYTUxzID0gYmxvY2tYTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NlZ21lbnQnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzaSA9IDA7IHNpIDwgc2VnWE1Mcy5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlZ1hNTCA9IHNlZ1hNTHNbc2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiAgICAgIHNlZ1hNTC5nZXRBdHRyaWJ1dGUoJ2ludE9iamVjdElkJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46ICAgICAgICAgc2VnWE1MLmdldEF0dHJpYnV0ZSgnc3RhcnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogICAgICAgICBzZWdYTUwuZ2V0QXR0cmlidXRlKCdlbmQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0cmFuZDogICAgICBzZWdYTUwuZ2V0QXR0cmlidXRlKCdzdHJhbmQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpZ2FyOiAgICAgICBlbGVtZW50VmFsdWUoc2VnWE1MLCAnY2lnYXInKVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBibG9jay5zZWdtZW50cy5wdXNoKHNlZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFsaS5ibG9ja3MucHVzaChibG9jayk7XG4gICAgICAgICAgICB9ICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGFsaWdubWVudHMucHVzaChhbGkpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKGFsaWdubWVudHMpO1xuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIERBU1N0eWxlc2hlZXQoKSB7XG4gICAgdGhpcy5zdHlsZXMgPSBbXTtcbn1cblxuREFTU3R5bGVzaGVldC5wcm90b3R5cGUucHVzaFN0eWxlID0gZnVuY3Rpb24oZmlsdGVycywgem9vbSwgc3R5bGUpIHtcbiAgICBpZiAoIWZpbHRlcnMpIHtcbiAgICAgICAgZmlsdGVycyA9IHt0eXBlOiAnZGVmYXVsdCd9O1xuICAgIH1cbiAgICB2YXIgc3R5bGVIb2xkZXIgPSBzaGFsbG93Q29weShmaWx0ZXJzKTtcbiAgICBpZiAoem9vbSkge1xuICAgICAgICBzdHlsZUhvbGRlci56b29tID0gem9vbTtcbiAgICB9XG4gICAgc3R5bGVIb2xkZXIuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLnN0eWxlcy5wdXNoKHN0eWxlSG9sZGVyKTtcbn1cblxuZnVuY3Rpb24gREFTU3R5bGUoKSB7XG59XG5cbmZ1bmN0aW9uIHBhcnNlR3JhZGllbnQoZ3JhZCkge1xuICAgIHZhciBzdGVwcyA9IGdyYWQuZ2V0QXR0cmlidXRlKCdzdGVwcycpO1xuICAgIGlmIChzdGVwcykge1xuICAgICAgICBzdGVwcyA9IHN0ZXBzfDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcHMgPSA1MDtcbiAgICB9XG5cbiAgICB2YXIgc3RvcHMgPSBbXTtcbiAgICB2YXIgY29sb3JzID0gW107XG4gICAgdmFyIHNlID0gZ3JhZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU1RPUCcpO1xuICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzZS5sZW5ndGg7ICsrc2kpIHtcbiAgICAgICAgdmFyIHN0b3AgPSBzZVtzaV07XG4gICAgICAgIHN0b3BzLnB1c2goMS4wICogc3RvcC5nZXRBdHRyaWJ1dGUoJ3Njb3JlJykpO1xuICAgICAgICBjb2xvcnMucHVzaChzdG9wLmZpcnN0Q2hpbGQubm9kZVZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFrZUNvbG91clN0ZXBzKHN0ZXBzLCBzdG9wcywgY29sb3JzKTtcbn1cblxuREFTU291cmNlLnByb3RvdHlwZS5zdHlsZXNoZWV0ID0gZnVuY3Rpb24oc3VjY2Vzc0NCLCBmYWlsdXJlQ0IpIHtcbiAgICB2YXIgZGFzVVJJLCBjcmVkcyA9IHRoaXMuY3JlZGVudGlhbHM7XG4gICAgaWYgKHRoaXMuc3R5bGVzaGVldF91cmkpIHtcbiAgICAgICAgZGFzVVJJID0gdGhpcy5zdHlsZXNoZWV0X3VyaTtcbiAgICAgICAgY3JlZHMgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkYXNVUkkgPSB0aGlzLmRhc0Jhc2VVUkkgKyAnc3R5bGVzaGVldCc7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRVUkkoZGFzVVJJKS50aGVuKGZ1bmN0aW9uKGRhc1VSSSkge1xuICAgICAgICBkb0Nyb3NzRG9tYWluUmVxdWVzdChkYXNVUkksIGZ1bmN0aW9uKHJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlWE1MKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZhaWx1cmVDQikge1xuICAgICAgICAgICAgICAgICAgICBmYWlsdXJlQ0IoKTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBzdHlsZXNoZWV0ID0gbmV3IERBU1N0eWxlc2hlZXQoKTtcbiAgICAgICAgICAgIHZhciB0eXBlWE1McyA9IHJlc3BvbnNlWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdUWVBFJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVYTUxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHR5cGVTdHlsZSA9IHR5cGVYTUxzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIGZpbHRlciA9IHt9O1xuICAgICAgICAgICAgICAgIGZpbHRlci50eXBlID0gdHlwZVN0eWxlLmdldEF0dHJpYnV0ZSgnaWQnKTsgLy8gQW0gSSByaWdodCBpbiB0aGlua2luZyB0aGF0IHRoaXMgbWFrZXMgREFTU1RZTEUgWE1MIGludmFsaWQ/ICBVZ2guXG4gICAgICAgICAgICAgICAgZmlsdGVyLmxhYmVsID0gdHlwZVN0eWxlLmdldEF0dHJpYnV0ZSgnbGFiZWwnKTtcbiAgICAgICAgICAgICAgICBmaWx0ZXIubWV0aG9kID0gdHlwZVN0eWxlLmdldEF0dHJpYnV0ZSgnbWV0aG9kJyk7XG4gICAgICAgICAgICAgICAgdmFyIGdseXBoWE1McyA9IHR5cGVTdHlsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnR0xZUEgnKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBnaSA9IDA7IGdpIDwgZ2x5cGhYTUxzLmxlbmd0aDsgKytnaSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2x5cGhYTUwgPSBnbHlwaFhNTHNbZ2ldO1xuICAgICAgICAgICAgICAgICAgICB2YXIgem9vbSA9IGdseXBoWE1MLmdldEF0dHJpYnV0ZSgnem9vbScpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZ2x5cGggPSBjaGlsZEVsZW1lbnRPZihnbHlwaFhNTCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IG5ldyBEQVNTdHlsZSgpO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZS5nbHlwaCA9IGdseXBoLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gZ2x5cGguZmlyc3RDaGlsZDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoaWxkLmxvY2FsTmFtZSA9PSAnQkdHUkFEJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZVtjaGlsZC5sb2NhbE5hbWVdID0gcGFyc2VHcmFkaWVudChjaGlsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVbY2hpbGQubG9jYWxOYW1lXSA9IGNoaWxkLmZpcnN0Q2hpbGQubm9kZVZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzaGVldC5wdXNoU3R5bGUoZmlsdGVyLCB6b29tLCBzdHlsZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3VjY2Vzc0NCKHN0eWxlc2hlZXQpO1xuICAgICAgICB9LCBjcmVkcyk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIGZhaWx1cmVDQigpO1xuICAgIH0pO1xufVxuXG4vL1xuLy8gc291cmNlcyBjb21tYW5kXG4vLyBcblxuZnVuY3Rpb24gREFTUmVnaXN0cnkodXJpLCBvcHRzKVxue1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIHRoaXMudXJpID0gdXJpO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7ICAgXG59XG5cbkRBU1JlZ2lzdHJ5LnByb3RvdHlwZS5zb3VyY2VzID0gZnVuY3Rpb24oY2FsbGJhY2ssIGZhaWx1cmUsIG9wdHMpXG57XG4gICAgaWYgKCFvcHRzKSB7XG4gICAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgZmlsdGVycyA9IFtdO1xuICAgIGlmIChvcHRzLnRheG9uKSB7XG4gICAgICAgIGZpbHRlcnMucHVzaCgnb3JnYW5pc209JyArIG9wdHMudGF4b24pO1xuICAgIH1cbiAgICBpZiAob3B0cy5hdXRoKSB7XG4gICAgICAgIGZpbHRlcnMucHVzaCgnYXV0aG9yaXR5PScgKyBvcHRzLmF1dGgpO1xuICAgIH1cbiAgICBpZiAob3B0cy52ZXJzaW9uKSB7XG4gICAgICAgIGZpbHRlcnMucHVzaCgndmVyc2lvbj0nICsgb3B0cy52ZXJzaW9uKTtcbiAgICB9XG4gICAgdmFyIHF1cmkgPSB0aGlzLnVyaTtcbiAgICBpZiAoZmlsdGVycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIHF1cmkgPSBxdXJpICsgJz8nICsgZmlsdGVycy5qb2luKCcmJyk7ICAgLy8gJyYnIGFzIGEgc2VwYXJhdG9yIHRvIGhhY2sgYXJvdW5kIGRhc3JlZ2lzdHJ5Lm9yZyBidWcuXG4gICAgfVxuXG4gICAgZG9Dcm9zc0RvbWFpblJlcXVlc3QocXVyaSwgZnVuY3Rpb24ocmVzcG9uc2VYTUwpIHtcbiAgICAgICAgaWYgKCFyZXNwb25zZVhNTCAmJiBmYWlsdXJlKSB7XG4gICAgICAgICAgICBmYWlsdXJlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc291cmNlcyA9IFtdOyAgICAgICBcbiAgICAgICAgdmFyIHNvdXJjZVhNTHMgPSByZXNwb25zZVhNTC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnU09VUkNFJyk7XG4gICAgICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzb3VyY2VYTUxzLmxlbmd0aDsgKytzaSkge1xuICAgICAgICAgICAgdmFyIHNvdXJjZVhNTCA9IHNvdXJjZVhNTHNbc2ldO1xuICAgICAgICAgICAgdmFyIHZlcnNpb25YTUxzID0gc291cmNlWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdWRVJTSU9OJyk7XG4gICAgICAgICAgICBpZiAodmVyc2lvblhNTHMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZlcnNpb25YTUwgPSB2ZXJzaW9uWE1Mc1swXTtcblxuICAgICAgICAgICAgdmFyIGNvb3JkWE1McyA9IHZlcnNpb25YTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0NPT1JESU5BVEVTJyk7XG4gICAgICAgICAgICB2YXIgY29vcmRzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgY29vcmRYTUxzLmxlbmd0aDsgKytjaSkge1xuICAgICAgICAgICAgICAgIHZhciBjb29yZFhNTCA9IGNvb3JkWE1Mc1tjaV07XG4gICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gbmV3IERBU0Nvb3JkcygpO1xuICAgICAgICAgICAgICAgIGNvb3JkLmF1dGggPSBjb29yZFhNTC5nZXRBdHRyaWJ1dGUoJ2F1dGhvcml0eScpO1xuICAgICAgICAgICAgICAgIGNvb3JkLnRheG9uID0gY29vcmRYTUwuZ2V0QXR0cmlidXRlKCd0YXhpZCcpO1xuICAgICAgICAgICAgICAgIGNvb3JkLnZlcnNpb24gPSBjb29yZFhNTC5nZXRBdHRyaWJ1dGUoJ3ZlcnNpb24nKTtcbiAgICAgICAgICAgICAgICBjb29yZHMucHVzaChjb29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjYXBzID0gW107XG4gICAgICAgICAgICB2YXIgY2FwWE1McyA9IHZlcnNpb25YTUwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ0NBUEFCSUxJVFknKTtcbiAgICAgICAgICAgIHZhciB1cmk7XG4gICAgICAgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgY2FwWE1Mcy5sZW5ndGg7ICsrY2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2FwWE1MID0gY2FwWE1Mc1tjaV07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2Fwcy5wdXNoKGNhcFhNTC5nZXRBdHRyaWJ1dGUoJ3R5cGUnKSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FwWE1MLmdldEF0dHJpYnV0ZSgndHlwZScpID09ICdkYXMxOmZlYXR1cmVzJykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZmVwID0gY2FwWE1MLmdldEF0dHJpYnV0ZSgncXVlcnlfdXJpJyk7XG4gICAgICAgICAgICAgICAgICAgIHVyaSA9IGZlcC5zdWJzdHJpbmcoMCwgZmVwLmxlbmd0aCAtICgnZmVhdHVyZXMnLmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHByb3BzID0ge307XG4gICAgICAgICAgICB2YXIgcHJvcFhNTHMgPSB2ZXJzaW9uWE1MLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdQUk9QJyk7XG4gICAgICAgICAgICBmb3IgKHZhciBwaSA9IDA7IHBpIDwgcHJvcFhNTHMubGVuZ3RoOyArK3BpKSB7XG4gICAgICAgICAgICAgICAgcHVzaG8ocHJvcHMsIHByb3BYTUxzW3BpXS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSwgcHJvcFhNTHNbcGldLmdldEF0dHJpYnV0ZSgndmFsdWUnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh1cmkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gbmV3IERBU1NvdXJjZSh1cmksIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlX3VyaTogc291cmNlWE1MLmdldEF0dHJpYnV0ZSgndXJpJyksXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICBzb3VyY2VYTUwuZ2V0QXR0cmlidXRlKCd0aXRsZScpLFxuICAgICAgICAgICAgICAgICAgICBkZXNjOiAgc291cmNlWE1MLmdldEF0dHJpYnV0ZSgnZGVzY3JpcHRpb24nKSxcbiAgICAgICAgICAgICAgICAgICAgY29vcmRzOiBjb29yZHMsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiBwcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgY2FwYWJpbGl0aWVzOiBjYXBzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHNvdXJjZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNhbGxiYWNrKHNvdXJjZXMpO1xuICAgIH0pO1xufVxuXG5cbi8vXG4vLyBVdGlsaXR5IGZ1bmN0aW9uc1xuLy9cblxuZnVuY3Rpb24gZWxlbWVudFZhbHVlKGVsZW1lbnQsIHRhZylcbntcbiAgICB2YXIgY2hpbGRyZW4gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk7XG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDAgJiYgY2hpbGRyZW5bMF0uZmlyc3RDaGlsZCkge1xuICAgICAgICB2YXIgYyA9IGNoaWxkcmVuWzBdO1xuICAgICAgICBpZiAoYy5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gYy5maXJzdENoaWxkLm5vZGVWYWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBzID0gJyc7XG4gICAgICAgICAgICBmb3IgKHZhciBuaSA9IDA7IG5pIDwgYy5jaGlsZE5vZGVzLmxlbmd0aDsgKytuaSkge1xuICAgICAgICAgICAgICAgIHMgKz0gYy5jaGlsZE5vZGVzW25pXS5ub2RlVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGlsZEVsZW1lbnRPZihlbGVtZW50KVxue1xuICAgIGlmIChlbGVtZW50Lmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBlbGVtZW50LmZpcnN0Q2hpbGQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PSBOb2RlLkVMRU1FTlRfTk9ERSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgICAgIH0gXG4gICAgICAgICAgICBjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9IHdoaWxlIChjaGlsZCAhPSBudWxsKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cblxuZnVuY3Rpb24gZGFzTGlua3NPZihlbGVtZW50KVxue1xuICAgIHZhciBsaW5rcyA9IG5ldyBBcnJheSgpO1xuICAgIHZhciBtYXliZUxpbmtDaGlsZGVuID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnTElOSycpO1xuICAgIGZvciAodmFyIGNpID0gMDsgY2kgPCBtYXliZUxpbmtDaGlsZGVuLmxlbmd0aDsgKytjaSkge1xuICAgICAgICB2YXIgbGlua1hNTCA9IG1heWJlTGlua0NoaWxkZW5bY2ldO1xuICAgICAgICBpZiAobGlua1hNTC5wYXJlbnROb2RlID09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGxpbmtzLnB1c2gobmV3IERBU0xpbmsobGlua1hNTC5maXJzdENoaWxkID8gbGlua1hNTC5maXJzdENoaWxkLm5vZGVWYWx1ZSA6ICdVbmtub3duJywgbGlua1hNTC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBsaW5rcztcbn1cblxuZnVuY3Rpb24gZGFzTm90ZXNPZihlbGVtZW50KVxue1xuICAgIHZhciBub3RlcyA9IFtdO1xuICAgIHZhciBtYXliZU5vdGVzID0gZWxlbWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnTk9URScpO1xuICAgIGZvciAodmFyIG5pID0gMDsgbmkgPCBtYXliZU5vdGVzLmxlbmd0aDsgKytuaSkge1xuICAgICAgICBpZiAobWF5YmVOb3Rlc1tuaV0uZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgbm90ZXMucHVzaChtYXliZU5vdGVzW25pXS5maXJzdENoaWxkLm5vZGVWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vdGVzO1xufVxuXG5mdW5jdGlvbiBkb0Nyb3NzRG9tYWluUmVxdWVzdCh1cmwsIGhhbmRsZXIsIGNyZWRlbnRpYWxzLCBjdXN0QXV0aCkge1xuICAgIC8vIFRPRE86IGV4cGxpY2l0IGVycm9yIGhhbmRsZXJzP1xuXG4gICAgaWYgKHdpbmRvdy5YRG9tYWluUmVxdWVzdCkge1xuICAgICAgICB2YXIgcmVxID0gbmV3IFhEb21haW5SZXF1ZXN0KCk7XG4gICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkb20gPSBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIik7XG4gICAgICAgICAgICBkb20uYXN5bmMgPSBmYWxzZTtcbiAgICAgICAgICAgIGRvbS5sb2FkWE1MKHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgaGFuZGxlcihkb20pO1xuICAgICAgICB9XG4gICAgICAgIHJlcS5vcGVuKFwiZ2V0XCIsIHVybCk7XG4gICAgICAgIHJlcS5zZW5kKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RpbWluZyBvdXQgJyAgKyB1cmwpO1xuICAgICAgICAgICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihudWxsLCByZXEpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgNTAwMFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgcmVxLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aW1lb3V0IG9uICcgKyB1cmwpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPj0gMjAwIHx8IHJlcS5zdGF0dXMgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlcihyZXEucmVzcG9uc2VYTUwsIHJlcSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVxLm9wZW4oXCJnZXRcIiwgdXJsLCB0cnVlKTtcbiAgICAgICAgICAgIC8vIElFMTAvMTEgZml4OiBUaGUgdGltZW91dCBwcm9wZXJ0eSBtYXkgYmUgc2V0IG9ubHkgaW4gdGhlIHRpbWUgaW50ZXJ2YWwgYmV0d2VlbiBhIGNhbGwgdG8gdGhlIG9wZW4gbWV0aG9kXG4gICAgICAgICAgICAvLyAgICAgICAgICAgICAgYW5kIHRoZSBmaXJzdCBjYWxsIHRvIHRoZSBzZW5kIG1ldGhvZC5cbiAgICAgICAgICAgIHJlcS50aW1lb3V0ID0gNTAwMDtcbiAgICAgICAgICAgIGlmIChjcmVkZW50aWFscykge1xuICAgICAgICAgICAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGN1c3RBdXRoKSB7XG4gICAgICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoJ1gtREFTLUF1dGhvcmlzYXRpb24nLCBjdXN0QXV0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXEub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC94bWwnKTtcbiAgICAgICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24veG1sLCovKicpO1xuICAgICAgICAgICAgcmVxLnNlbmQoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaGFuZGxlcihudWxsLCByZXEsIGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5EQVNTb3VyY2UucHJvdG90eXBlLmRvQ3Jvc3NEb21haW5SZXF1ZXN0ID0gZnVuY3Rpb24odXJsLCBoYW5kbGVyLCBlcnJIYW5kbGVyKSB7XG4gICAgdmFyIGN1c3RBdXRoO1xuICAgIGlmICh0aGlzLnhVc2VyKSB7XG4gICAgICAgIGN1c3RBdXRoID0gJ0Jhc2ljICcgKyBidG9hKHRoaXMueFVzZXIgKyAnOicgKyB0aGlzLnhQYXNzKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZG9Dcm9zc0RvbWFpblJlcXVlc3QodXJsLCBoYW5kbGVyLCB0aGlzLmNyZWRlbnRpYWxzLCBjdXN0QXV0aCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmIChlcnJIYW5kbGVyKSB7XG4gICAgICAgICAgICBlcnJIYW5kbGVyKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRGFzQm9vbGVhblRydWUocykge1xuICAgIHMgPSAoJycgKyBzKS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBzPT09J3llcycgfHwgcz09PSd0cnVlJztcbn1cblxuZnVuY3Rpb24gaXNEYXNCb29sZWFuTm90RmFsc2Uocykge1xuICAgIGlmICghcylcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcyA9ICgnJyArIHMpLnRvTG93ZXJDYXNlKCk7XG4gICAgcmV0dXJuIHMhPT0nbm8nIHx8IHMhPT0nZmFsc2UnO1xufVxuXG5mdW5jdGlvbiBjb3B5U3R5bGVzaGVldChzcykge1xuICAgIHZhciBuc3MgPSBzaGFsbG93Q29weShzcyk7XG4gICAgbnNzLnN0eWxlcyA9IFtdO1xuICAgIGZvciAodmFyIHNpID0gMDsgc2kgPCBzcy5zdHlsZXMubGVuZ3RoOyArK3NpKSB7XG4gICAgICAgIHZhciBzaCA9IG5zcy5zdHlsZXNbc2ldID0gc2hhbGxvd0NvcHkoc3Muc3R5bGVzW3NpXSk7XG4gICAgICAgIHNoLl9tZXRob2RSRSA9IHNoLl9sYWJlbFJFID0gc2guX3R5cGVSRSA9IHVuZGVmaW5lZDtcbiAgICAgICAgc2guc3R5bGUgPSBzaGFsbG93Q29weShzaC5zdHlsZSk7XG4gICAgICAgIHNoLnN0eWxlLmlkID0gdW5kZWZpbmVkO1xuICAgICAgICBzaC5zdHlsZS5fZ3JhZGllbnQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiBuc3M7XG59XG5cbmlmICh0eXBlb2YobW9kdWxlKSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAgICAgREFTR3JvdXA6IERBU0dyb3VwLFxuICAgICAgICBEQVNGZWF0dXJlOiBEQVNGZWF0dXJlLFxuICAgICAgICBEQVNTdHlsZXNoZWV0OiBEQVNTdHlsZXNoZWV0LFxuICAgICAgICBEQVNTdHlsZTogREFTU3R5bGUsXG4gICAgICAgIERBU1NvdXJjZTogREFTU291cmNlLFxuICAgICAgICBEQVNTZWdtZW50OiBEQVNTZWdtZW50LFxuICAgICAgICBEQVNSZWdpc3RyeTogREFTUmVnaXN0cnksXG4gICAgICAgIERBU1NlcXVlbmNlOiBEQVNTZXF1ZW5jZSxcbiAgICAgICAgREFTTGluazogREFTTGluayxcblxuICAgICAgICBpc0Rhc0Jvb2xlYW5UcnVlOiBpc0Rhc0Jvb2xlYW5UcnVlLFxuICAgICAgICBpc0Rhc0Jvb2xlYW5Ob3RGYWxzZTogaXNEYXNCb29sZWFuTm90RmFsc2UsXG4gICAgICAgIGNvcHlTdHlsZXNoZWV0OiBjb3B5U3R5bGVzaGVldCxcbiAgICAgICAgY29vcmRzTWF0Y2g6IGNvb3Jkc01hdGNoXG4gICAgfTtcbn1cbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTRcbi8vXG4vLyBlbmNvZGUuanM6IGludGVyZmFjZSBmb3IgRU5DT0RFIERDQyBzZXJ2aWNlc1xuLy9cblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG59XG5cbmZ1bmN0aW9uIGxvb2t1cEVuY29kZVVSSSh1cmksIGpzb24pIHtcbiAgICBpZiAodXJpLmluZGV4T2YoJz8nKSA8IDApXG4gICAgICAgIHVyaSA9IHVyaSArICc/c29mdD10cnVlJztcblxuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihhY2NlcHQsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChyZXEucmVhZHlTdGF0ZSA9PSA0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPj0gMzAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgnRXJyb3IgY29kZSAnICsgcmVxLnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3AgPSBKU09OLnBhcnNlKHJlcS5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdChqc29uID8gcmVzcCA6IHJlc3AubG9jYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICBcbiAgICAgICAgcmVxLm9wZW4oJ0dFVCcsIHVyaSwgdHJ1ZSk7XG4gICAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICByZXEucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuICAgICAgICByZXEuc2VuZCgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBFbmNvZGVVUkxIb2xkZXIodXJsKSB7XG4gICAgdGhpcy5yYXd1cmwgPSB1cmw7XG59XG5cbkVuY29kZVVSTEhvbGRlci5wcm90b3R5cGUuZ2V0VVJMUHJvbWlzZSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLnVybFByb21pc2UgJiYgdGhpcy51cmxQcm9taXNlVmFsaWRpdHkgPiBEYXRlLm5vdygpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVybFByb21pc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51cmxQcm9taXNlID0gbG9va3VwRW5jb2RlVVJJKHRoaXMucmF3dXJsLCB0cnVlKS50aGVuKGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwLmxvY2F0aW9uO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51cmxQcm9taXNlVmFsaWRpdHkgPSBEYXRlLm5vdygpICsgKDEyICogMzYwMCAqIDEwMDApO1xuICAgICAgICByZXR1cm4gdGhpcy51cmxQcm9taXNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gRW5jb2RlRmV0Y2hhYmxlKHVybCwgc3RhcnQsIGVuZCwgb3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgb3B0cyA9IHN0YXJ0O1xuICAgICAgICAgICAgc3RhcnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRzID0ge307XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVybCA9ICh0eXBlb2YgdXJsID09PSAnc3RyaW5nJyA/IG5ldyBFbmNvZGVVUkxIb2xkZXIodXJsKSA6IHVybCk7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0IHx8IDA7XG4gICAgaWYgKGVuZCkge1xuICAgICAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB9XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbn1cblxuXG5cbkVuY29kZUZldGNoYWJsZS5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzLCBsKSB7XG4gICAgaWYgKHMgPCAwKSB7XG4gICAgICAgIHRocm93ICdCYWQgc2xpY2UgJyArIHM7XG4gICAgfVxuXG4gICAgdmFyIG5zID0gdGhpcy5zdGFydCwgbmUgPSB0aGlzLmVuZDtcbiAgICBpZiAobnMgJiYgcykge1xuICAgICAgICBucyA9IG5zICsgcztcbiAgICB9IGVsc2Uge1xuICAgICAgICBucyA9IHMgfHwgbnM7XG4gICAgfVxuICAgIGlmIChsICYmIG5zKSB7XG4gICAgICAgIG5lID0gbnMgKyBsIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBuZSA9IG5lIHx8IGwgLSAxO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEVuY29kZUZldGNoYWJsZSh0aGlzLnVybCwgbnMsIG5lLCB0aGlzLm9wdHMpO1xufVxuXG5FbmNvZGVGZXRjaGFibGUucHJvdG90eXBlLmZldGNoQXNUZXh0ID0gZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHJlcSA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsZW5ndGg7XG4gICAgc2VsZi51cmwuZ2V0VVJMUHJvbWlzZSgpLnRoZW4oZnVuY3Rpb24odXJsKSB7XG4gICAgICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuXG4gICAgICAgIGlmIChzZWxmLmVuZCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuZW5kIC0gc2VsZi5zdGFydCA+IDEwMDAwMDAwMCkge1xuICAgICAgICAgICAgICAgIHRocm93ICdNb25zdGVyIGZldGNoISc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcignUmFuZ2UnLCAnYnl0ZXM9JyArIHNlbGYuc3RhcnQgKyAnLScgKyBzZWxmLmVuZCk7XG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmVuZCAtIHNlbGYuc3RhcnQgKyAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDAgfHwgcmVxLnN0YXR1cyA9PSAyMDYpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmIChzZWxmLm9wdHMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlcS5zZW5kKCk7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICB9KTtcbn1cblxuRW5jb2RlRmV0Y2hhYmxlLnByb3RvdHlwZS5zYWx0ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbn1cblxuRW5jb2RlRmV0Y2hhYmxlLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCBhdHRlbXB0LCB0cnVuY2F0ZWRMZW5ndGgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgICBhdHRlbXB0ID0gYXR0ZW1wdCB8fCAxO1xuICAgIGlmIChhdHRlbXB0ID4gMykge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCk7XG4gICAgfVxuXG4gICAgc2VsZi51cmwuZ2V0VVJMUHJvbWlzZSgpLnRoZW4oZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHZhciBsZW5ndGg7XG4gICAgICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICByZXEub3ZlcnJpZGVNaW1lVHlwZSgndGV4dC9wbGFpbjsgY2hhcnNldD14LXVzZXItZGVmaW5lZCcpO1xuICAgICAgICBpZiAoc2VsZi5lbmQpIHtcbiAgICAgICAgICAgIGlmIChzZWxmLmVuZCAtIHNlbGYuc3RhcnQgPiAxMDAwMDAwMDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAnTW9uc3RlciBmZXRjaCEnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoJ1JhbmdlJywgJ2J5dGVzPScgKyBzZWxmLnN0YXJ0ICsgJy0nICsgc2VsZi5lbmQpO1xuICAgICAgICAgICAgbGVuZ3RoID0gc2VsZi5lbmQgLSBzZWxmLnN0YXJ0ICsgMTtcbiAgICAgICAgfVxuICAgICAgICByZXEucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcbiAgICAgICAgcmVxLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgaWYgKHJlcS5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PSAyMDAgfHwgcmVxLnN0YXR1cyA9PSAyMDYpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcS5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJsID0gcmVxLnJlc3BvbnNlLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoICYmIGxlbmd0aCAhPSBibCAmJiAoIXRydW5jYXRlZExlbmd0aCB8fCBibCAhPSB0cnVuY2F0ZWRMZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuZmV0Y2goY2FsbGJhY2ssIGF0dGVtcHQgKyAxLCBibCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhyZXEucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcS5tb3pSZXNwb25zZUFycmF5QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2socmVxLm1velJlc3BvbnNlQXJyYXlCdWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSByZXEucmVzcG9uc2VUZXh0O1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCAmJiBsZW5ndGggIT0gci5sZW5ndGggJiYgKCF0cnVuY2F0ZWRMZW5ndGggfHwgci5sZW5ndGggIT0gdHJ1bmNhdGVkTGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmZldGNoKGNhbGxiYWNrLCBhdHRlbXB0ICsgMSwgci5sZW5ndGgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soYnN0cmluZ1RvQnVmZmVyKHJlcS5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmZldGNoKGNhbGxiYWNrLCBhdHRlbXB0ICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoc2VsZi5vcHRzLmNyZWRlbnRpYWxzKSB7XG4gICAgICAgICAgICByZXEud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXEuc2VuZCgpO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBic3RyaW5nVG9CdWZmZXIocmVzdWx0KSB7XG4gICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0Lmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiYS5sZW5ndGg7ICsraSkge1xuICAgICAgICBiYVtpXSA9IHJlc3VsdC5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgICByZXR1cm4gYmEuYnVmZmVyO1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGxvb2t1cEVuY29kZVVSSTogbG9va3VwRW5jb2RlVVJJLFxuICAgICAgICBFbmNvZGVGZXRjaGFibGU6IEVuY29kZUZldGNoYWJsZVxuICAgIH07XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDE0XG4vL1xuLy8gZmV0Y2h3b3JrZXIuanNcbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYmluID0gcmVxdWlyZSgnLi9iaW4nKTtcbnZhciBiYW0gPSByZXF1aXJlKCcuL2JhbScpO1xudmFyIGJpZ3dpZyA9IHJlcXVpcmUoJy4vYmlnd2lnJyk7XG52YXIgZW5jb2RlID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxudmFyIFByb21pc2UgPSByZXF1aXJlKCdlczYtcHJvbWlzZScpLlByb21pc2U7XG5cbnZhciBjb25uZWN0aW9ucyA9IHt9O1xudmFyIHJlc29sdmVSZXNvbHZlcnMgPSB7fTtcblxudmFyIGlkU2VlZCA9IDA7XG5cbmdsb2JhbC5uZXdJRCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnY24nICsgKCsraWRTZWVkKTtcbn1cblxucG9zdE1lc3NhZ2Uoe3RhZzogJ2luaXQnfSk7XG5cbnNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICB2YXIgZCA9IGV2ZW50LmRhdGE7XG4gICAgdmFyIGNvbW1hbmQgPSBldmVudC5kYXRhLmNvbW1hbmQ7XG4gICAgdmFyIHRhZyA9IGV2ZW50LmRhdGEudGFnO1xuXG4gICAgaWYgKCFjb21tYW5kKSB7XG4gICAgICAgIHZhciByciA9IHJlc29sdmVSZXNvbHZlcnNbdGFnXTtcbiAgICAgICAgaWYgKHJyKSB7XG4gICAgICAgICAgICBpZiAoZC5lcnIpIHtcbiAgICAgICAgICAgICAgICByci5yZWplY3QoZC5lcnIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByci5yZXNvbHZlKGQudXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGRlbGV0ZSByZXNvbHZlUmVzb2x2ZXJzW3RhZ107XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09ICdjb25uZWN0QkFNJykge1xuICAgICAgICB2YXIgaWQgPSBuZXdJRCgpO1xuICAgICAgICB2YXIgcmVzb2x2ZXI7XG4gICAgICAgIGlmIChkLnJlc29sdmVyKSB7XG4gICAgICAgICAgICByZXNvbHZlciA9IHByb3h5UmVzb2x2ZXIoZC5yZXNvbHZlcik7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGJhbUYsIGJhaUYsIGluZGV4Q2h1bmtzO1xuICAgICAgICBpZiAoZC5ibG9iKSB7XG4gICAgICAgICAgICBiYW1GID0gbmV3IGJpbi5CbG9iRmV0Y2hhYmxlKGQuYmxvYik7XG4gICAgICAgICAgICBiYWlGID0gbmV3IGJpbi5CbG9iRmV0Y2hhYmxlKGQuaW5kZXhCbG9iKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJhbUYgPSBuZXcgYmluLlVSTEZldGNoYWJsZShkLnVyaSwge2NyZWRlbnRpYWxzOiBkLmNyZWRlbnRpYWxzLCByZXNvbHZlcjogcmVzb2x2ZXJ9KTtcbiAgICAgICAgICAgIGJhaUYgPSBuZXcgYmluLlVSTEZldGNoYWJsZShkLmluZGV4VXJpLCB7Y3JlZGVudGlhbHM6IGQuY3JlZGVudGlhbHMsIHJlc29sdmVyOiByZXNvbHZlcn0pO1xuICAgICAgICAgICAgaW5kZXhDaHVua3MgPSBkLmluZGV4Q2h1bmtzO1xuICAgICAgICB9XG5cbiAgICAgICAgYmFtLm1ha2VCYW0oYmFtRiwgYmFpRiwgaW5kZXhDaHVua3MsIGZ1bmN0aW9uKGJhbU9iaiwgZXJyKSB7XG4gICAgICAgICAgICBpZiAoYmFtT2JqKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvbnNbaWRdID0gbmV3IEJBTVdvcmtlckZldGNoZXIoYmFtT2JqKTtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIHJlc3VsdDogaWR9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2Uoe3RhZzogdGFnLCBlcnJvcjogZXJyIHx8IFwiQ291bGRuJ3QgZmV0Y2ggQkFNXCJ9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSAnY29ubmVjdEJCSScpIHtcbiAgICAgICAgdmFyIGlkID0gbmV3SUQoKTtcbiAgICAgICAgdmFyIHJlc29sdmVyO1xuICAgICAgICBpZiAoZC5yZXNvbHZlcikge1xuICAgICAgICAgICAgcmVzb2x2ZXIgPSBwcm94eVJlc29sdmVyKGQucmVzb2x2ZXIpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBiYmk7XG4gICAgICAgIGlmIChkLmJsb2IpIHtcbiAgICAgICAgICAgIGJiaSA9IG5ldyBiaW4uQmxvYkZldGNoYWJsZShkLmJsb2IpO1xuICAgICAgICB9IGVsc2UgaWYgKGQudHJhbnNwb3J0ID09ICdlbmNvZGUnKSB7XG4gICAgICAgICAgICBiYmkgPSBuZXcgZW5jb2RlLkVuY29kZUZldGNoYWJsZShkLnVyaSwge2NyZWRlbnRpYWxzOiBkLmNyZWRlbnRpYWxzfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYmkgPSBuZXcgYmluLlVSTEZldGNoYWJsZShkLnVyaSwge2NyZWRlbnRpYWxzOiBkLmNyZWRlbnRpYWxzLCByZXNvbHZlcjogcmVzb2x2ZXJ9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpZ3dpZy5tYWtlQndnKGJiaSwgZnVuY3Rpb24oYndnLCBlcnIpIHtcbiAgICAgICAgICAgIGlmIChid2cpIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uc1tpZF0gPSBuZXcgQkJJV29ya2VyRmV0Y2hlcihid2cpO1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHt0YWc6IHRhZywgcmVzdWx0OiBpZH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIGVycm9yOiBlcnIgfHwgXCJDb3VsZG4ndCBmZXRjaCBCQklcIn0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBkLnVyaSk7XG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSAndGV4dHhocicpIHtcbiAgICAgICAgdXRpbHMudGV4dFhIUihkLnVyaSwgZnVuY3Rpb24ocmVzcCwgZXJyKSB7XG4gICAgICAgICAgICBpZiAocmVzcCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHt0YWc6IHRhZywgcmVzdWx0OiByZXNwfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlKHt0YWc6IHRhZywgZXJyOiBlcnIgfHwgXCJDb3VsZG4ndCBmZXRjaCByZXNvdXJjZVwifSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gJ2ZldGNoJykge1xuICAgICAgICB2YXIgY29uID0gY29ubmVjdGlvbnNbZXZlbnQuZGF0YS5jb25uZWN0aW9uXTtcbiAgICAgICAgaWYgKCFjb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIGVycm9yOiAnTm8gc3VjaCBjb25uZWN0aW9uOiAnICsgZXZlbnQuZGF0YS5jb25uZWN0aW9ufSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb24uZmV0Y2goZC50YWcsIGQuY2hyLCBkLm1pbiwgZC5tYXgsIGQuem9vbSwgZC5vcHRzKTtcbiAgICB9IGVsc2UgaWYgKGNvbW1hbmQgPT09ICdsZWFwJykge1xuICAgICAgICB2YXIgY29uID0gY29ubmVjdGlvbnNbZXZlbnQuZGF0YS5jb25uZWN0aW9uXTtcbiAgICAgICAgaWYgKCFjb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIGVycm9yOiAnTm8gc3VjaCBjb25uZWN0aW9uOiAnICsgZXZlbnQuZGF0YS5jb25uZWN0aW9ufSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb24ubGVhcChkLnRhZywgZC5jaHIsIGQucG9zLCBkLmRpcik7XG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSAncXVhbnRMZWFwJykge1xuICAgICAgICB2YXIgY29uID0gY29ubmVjdGlvbnNbZXZlbnQuZGF0YS5jb25uZWN0aW9uXTtcbiAgICAgICAgaWYgKCFjb24pIHtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIGVycm9yOiAnTm8gc3VjaCBjb25uZWN0aW9uOiAnICsgZXZlbnQuZGF0YS5jb25uZWN0aW9ufSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb24ucXVhbnRMZWFwKGQudGFnLCBkLmNociwgZC5wb3MsIGQuZGlyLCBkLnRocmVzaG9sZCwgZC51bmRlcik7XG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSAnbWV0YScpIHtcbiAgICAgICAgdmFyIGNvbiA9IGNvbm5lY3Rpb25zW2V2ZW50LmRhdGEuY29ubmVjdGlvbl07XG4gICAgICAgIGlmICghY29uKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2Uoe3RhZzogdGFnLCBlcnJvcjogJ05vIHN1Y2ggY29ubmVjdGlvbjogJyArIGV2ZW50LmRhdGEuY29ubmVjdGlvbn0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uLm1ldGEoZC50YWcpO1xuICAgIH0gZWxzZSBpZiAoY29tbWFuZCA9PT0gJ3NlYXJjaCcpIHtcbiAgICAgICAgdmFyIGNvbiA9IGNvbm5lY3Rpb25zW2V2ZW50LmRhdGEuY29ubmVjdGlvbl07XG4gICAgICAgIGlmICghY29uKSB7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2Uoe3RhZzogdGFnLCBlcnJvcjogJ05vIHN1Y2ggY29ubmVjdGlvbjogJyArIGV2ZW50LmRhdGEuY29ubmVjdGlvbn0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uLnNlYXJjaChkLnRhZywgZC5xdWVyeSwgZC5pbmRleCk7XG4gICAgfSBlbHNlIGlmIChjb21tYW5kID09PSAnZGF0ZScpIHtcbiAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlKHt0YWc6IHRhZywgcmVzdWx0OiBEYXRlLm5vdygpfDB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIGVycm9yOiAnQmFkIGNvbW1hbmQgJyArIGNvbW1hbmR9KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIEJBTVdvcmtlckZldGNoZXIoYmFtKSB7XG4gICAgdGhpcy5iYW0gPSBiYW07XG59XG5cbkJBTVdvcmtlckZldGNoZXIucHJvdG90eXBlLmZldGNoID0gZnVuY3Rpb24odGFnLCBjaHIsIG1pbiwgbWF4LCB6b29tLCBvcHRzKSB7XG4gICAgb3B0cyA9IG9wdHMgfHwge307XG4gICAgdGhpcy5iYW0uZmV0Y2goY2hyLCBtaW4sIG1heCwgZnVuY3Rpb24ocmVjb3JkcywgZXJyKSB7XG4gICAgICAgIGlmIChyZWNvcmRzKSB7XG4gICAgICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIHJlc3VsdDogcmVjb3JkcywgdGltZTogRGF0ZS5ub3coKXwwfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIGVycm9yOiBlcnJ9KTtcbiAgICAgICAgfVxuICAgIH0sIG9wdHMpO1xufVxuXG5mdW5jdGlvbiBCQklXb3JrZXJGZXRjaGVyKGJiaSkge1xuICAgIHRoaXMuYmJpID0gYmJpO1xufVxuXG5CQklXb3JrZXJGZXRjaGVyLnByb3RvdHlwZS5mZXRjaCA9IGZ1bmN0aW9uKHRhZywgY2hyLCBtaW4sIG1heCwgem9vbSkge1xuICAgIGlmICh0eXBlb2Yoem9vbSkgIT09ICdudW1iZXInKVxuICAgICAgICB6b29tID0gLTE7XG5cbiAgICB2YXIgZGF0YTtcbiAgICBpZiAoem9vbSA8IDApIHtcbiAgICAgICAgZGF0YSA9IHRoaXMuYmJpLmdldFVuem9vbWVkVmlldygpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLmJiaS5nZXRab29tZWRWaWV3KHpvb20pO1xuICAgIH1cblxuICAgIGRhdGEucmVhZFdpZ0RhdGEoY2hyLCBtaW4sIG1heCwgZnVuY3Rpb24oZmVhdHVyZXMpIHtcbiAgICAgICAgcG9zdE1lc3NhZ2Uoe3RhZzogdGFnLCByZXN1bHQ6IGZlYXR1cmVzfSk7XG4gICAgfSk7XG59XG5cbkJCSVdvcmtlckZldGNoZXIucHJvdG90eXBlLm1ldGEgPSBmdW5jdGlvbih0YWcpIHtcbiAgICB2YXIgc2NhbGVzID0gWzFdO1xuICAgIGZvciAodmFyIHogPSAwOyB6IDwgdGhpcy5iYmkuem9vbUxldmVscy5sZW5ndGg7ICsreikge1xuICAgICAgICBzY2FsZXMucHVzaCh0aGlzLmJiaS56b29tTGV2ZWxzW3pdLnJlZHVjdGlvbik7XG4gICAgfVxuXG4gICAgdmFyIHRoaXNCID0gdGhpcztcbiAgICB2YXIgbWV0YSA9IHt0eXBlOiB0aGlzLmJiaS50eXBlLFxuICAgICAgICAgICAgICAgIHpvb21MZXZlbHM6IHNjYWxlcyxcbiAgICAgICAgICAgICAgICBmaWVsZENvdW50OiB0aGlzLmJiaS5maWVsZENvdW50LFxuICAgICAgICAgICAgICAgIGRlZmluZWRGaWVsZENvdW50OiB0aGlzLmJiaS5kZWZpbmVkRmllbGRDb3VudCxcbiAgICAgICAgICAgICAgICBzY2hlbWE6IHRoaXMuYmJpLnNjaGVtYX07XG4gICAgaWYgKHRoaXMuYmJpLnR5cGUgPT09ICdiaWdiZWQnKSB7XG4gICAgICAgIHRoaXMuYmJpLmdldEV4dHJhSW5kaWNlcyhmdW5jdGlvbihlaSkge1xuICAgICAgICAgICAgaWYgKGVpKSB7XG4gICAgICAgICAgICAgICAgdGhpc0IuZXh0cmFJbmRpY2VzID0gZWk7XG4gICAgICAgICAgICAgICAgbWV0YS5leHRyYUluZGljZXMgPSBlaS5tYXAoZnVuY3Rpb24oaSkge3JldHVybiBpLmZpZWxkfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIHJlc3VsdDogbWV0YX0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIHJlc3VsdDogbWV0YX0pO1xuICAgIH1cbn1cblxuQkJJV29ya2VyRmV0Y2hlci5wcm90b3R5cGUubGVhcCA9IGZ1bmN0aW9uKHRhZywgY2hyLCBwb3MsIGRpcikge1xuICAgIHRoaXMuYmJpLmdldFVuem9vbWVkVmlldygpLmdldEZpcnN0QWRqYWNlbnQoY2hyLCBwb3MsIGRpciwgZnVuY3Rpb24ocmVzdWx0LCBlcnIpIHtcbiAgICAgICAgcG9zdE1lc3NhZ2Uoe3RhZzogdGFnLCByZXN1bHQ6IHJlc3VsdCwgZXJyb3I6IGVycn0pO1xuICAgIH0pO1xufVxuXG5CQklXb3JrZXJGZXRjaGVyLnByb3RvdHlwZS5xdWFudExlYXAgPSBmdW5jdGlvbih0YWcsIGNociwgcG9zLCBkaXIsIHRocmVzaG9sZCwgdW5kZXIpIHtcbiAgICB0aGlzLmJiaS50aHJlc2hvbGRTZWFyY2goY2hyLCBwb3MsIGRpciwgdGhyZXNob2xkLCBmdW5jdGlvbihyZXN1bHQsIGVycikge1xuICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIHJlc3VsdDogcmVzdWx0LCBlcnJvcjogZXJyfSk7XG4gICAgfSk7XG59XG5cbkJCSVdvcmtlckZldGNoZXIucHJvdG90eXBlLnNlYXJjaCA9IGZ1bmN0aW9uKHRhZywgcXVlcnksIGluZGV4KSB7XG4gICAgdmFyIGlzID0gdGhpcy5leHRyYUluZGljZXNbMF07XG4gICAgaXMubG9va3VwKHF1ZXJ5LCBmdW5jdGlvbihyZXN1bHQsIGVycikge1xuICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiB0YWcsIHJlc3VsdDogcmVzdWx0LCBlcnJvcjogZXJyfSk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb3h5UmVzb2x2ZXIodGFnKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHVybCkge1xuICAgICAgICB2YXIgbGlkID0gbmV3SUQoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHJlc29sdmVSZXNvbHZlcnNbbGlkXSA9IHtyZXNvbHZlOiByZXNvbHZlLCByZWplY3Q6IHJlamVjdH07XG4gICAgICAgICAgICBwb3N0TWVzc2FnZSh7dGFnOiBsaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgY21kOiAncmVzb2x2ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZXI6IHRhZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVybH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKiAtKi0gbW9kZTogamF2YXNjcmlwdDsgYy1iYXNpYy1vZmZzZXQ6IDQ7IGluZGVudC10YWJzLW1vZGU6IG5pbCAtKi0gKi9cblxuLy8gXG4vLyBEYWxsaWFuY2UgR2Vub21lIEV4cGxvcmVyXG4vLyAoYykgVGhvbWFzIERvd24gMjAwNi0yMDExXG4vL1xuLy8gbGgzdXRpbHMuanM6IGNvbW1vbiBzdXBwb3J0IGZvciBsaDMncyBmaWxlIGZvcm1hdHNcbi8vXG5cbmlmICh0eXBlb2YocmVxdWlyZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgdmFyIGpzemxpYiA9IHJlcXVpcmUoJ2pzemxpYicpO1xuICAgIHZhciBqc3psaWJfaW5mbGF0ZV9idWZmZXIgPSBqc3psaWIuaW5mbGF0ZUJ1ZmZlcjtcbiAgICB2YXIgYXJyYXlDb3B5ID0ganN6bGliLmFycmF5Q29weTtcbn1cblxuZnVuY3Rpb24gVm9iKGIsIG8pIHtcbiAgICB0aGlzLmJsb2NrID0gYjtcbiAgICB0aGlzLm9mZnNldCA9IG87XG59XG5cblZvYi5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLmJsb2NrICsgJzonICsgdGhpcy5vZmZzZXQ7XG59XG5cbmZ1bmN0aW9uIHJlYWRWb2IoYmEsIG9mZnNldCwgYWxsb3daZXJvKSB7XG4gICAgdmFyIGJsb2NrID0gKChiYVtvZmZzZXQrNl0gJiAweGZmKSAqIDB4MTAwMDAwMDAwKSArICgoYmFbb2Zmc2V0KzVdICYgMHhmZikgKiAweDEwMDAwMDApICsgKChiYVtvZmZzZXQrNF0gJiAweGZmKSAqIDB4MTAwMDApICsgKChiYVtvZmZzZXQrM10gJiAweGZmKSAqIDB4MTAwKSArICgoYmFbb2Zmc2V0KzJdICYgMHhmZikpO1xuICAgIHZhciBiaW50ID0gKGJhW29mZnNldCsxXSA8PCA4KSB8IChiYVtvZmZzZXRdKTtcbiAgICBpZiAoYmxvY2sgPT0gMCAmJiBiaW50ID09IDAgJiYgIWFsbG93WmVybykge1xuICAgICAgICByZXR1cm4gbnVsbDsgIC8vIFNob3VsZCBvbmx5IGhhcHBlbiBpbiB0aGUgbGluZWFyIGluZGV4P1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgVm9iKGJsb2NrLCBiaW50KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVuYmd6ZihkYXRhLCBsaW0pIHtcbiAgICBsaW0gPSBNYXRoLm1pbihsaW0gfHwgMSwgZGF0YS5ieXRlTGVuZ3RoIC0gNTApO1xuICAgIHZhciBvQmxvY2tMaXN0ID0gW107XG4gICAgdmFyIHB0ciA9IFswXTtcbiAgICB2YXIgdG90YWxTaXplID0gMDtcblxuICAgIHdoaWxlIChwdHJbMF0gPCBsaW0pIHtcbiAgICAgICAgdmFyIGJhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSwgcHRyWzBdLCAxMik7IC8vIEZJWE1FIGlzIHRoaXMgZW5vdWdoIGZvciBhbGwgY3JlZGlibGUgQkdaRiBibG9jayBoZWFkZXJzP1xuICAgICAgICB2YXIgeGxlbiA9IChiYVsxMV0gPDwgOCkgfCAoYmFbMTBdKTtcbiAgICAgICAgLy8gZGxvZygneGxlblsnICsgKHB0clswXSkgKyddPScgKyB4bGVuKTtcbiAgICAgICAgdmFyIHVuYyA9IGpzemxpYl9pbmZsYXRlX2J1ZmZlcihkYXRhLCAxMiArIHhsZW4gKyBwdHJbMF0sIE1hdGgubWluKDY1NTM2LCBkYXRhLmJ5dGVMZW5ndGggLSAxMiAtIHhsZW4gLSBwdHJbMF0pLCBwdHIpO1xuICAgICAgICBwdHJbMF0gKz0gODtcbiAgICAgICAgdG90YWxTaXplICs9IHVuYy5ieXRlTGVuZ3RoO1xuICAgICAgICBvQmxvY2tMaXN0LnB1c2godW5jKTtcbiAgICB9XG5cbiAgICBpZiAob0Jsb2NrTGlzdC5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXR1cm4gb0Jsb2NrTGlzdFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxTaXplKTtcbiAgICAgICAgdmFyIGN1cnNvciA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb0Jsb2NrTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGIgPSBuZXcgVWludDhBcnJheShvQmxvY2tMaXN0W2ldKTtcbiAgICAgICAgICAgIGFycmF5Q29weShiLCAwLCBvdXQsIGN1cnNvciwgYi5sZW5ndGgpO1xuICAgICAgICAgICAgY3Vyc29yICs9IGIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQuYnVmZmVyO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gQ2h1bmsobWludiwgbWF4dikge1xuICAgIHRoaXMubWludiA9IG1pbnY7IHRoaXMubWF4diA9IG1heHY7XG59XG5cblxuLy9cbi8vIEJpbm5pbmcgKHRyYW5zbGl0ZXJhdGVkIGZyb20gU0FNMS4zIHNwZWMpXG4vL1xuXG4vKiBjYWxjdWxhdGUgYmluIGdpdmVuIGFuIGFsaWdubWVudCBjb3ZlcmluZyBbYmVnLGVuZCkgKHplcm8tYmFzZWQsIGhhbGYtY2xvc2UtaGFsZi1vcGVuKSAqL1xuZnVuY3Rpb24gcmVnMmJpbihiZWcsIGVuZClcbntcbiAgICAtLWVuZDtcbiAgICBpZiAoYmVnPj4xNCA9PSBlbmQ+PjE0KSByZXR1cm4gKCgxPDwxNSktMSkvNyArIChiZWc+PjE0KTtcbiAgICBpZiAoYmVnPj4xNyA9PSBlbmQ+PjE3KSByZXR1cm4gKCgxPDwxMiktMSkvNyArIChiZWc+PjE3KTtcbiAgICBpZiAoYmVnPj4yMCA9PSBlbmQ+PjIwKSByZXR1cm4gKCgxPDw5KS0xKS83ICsgKGJlZz4+MjApO1xuICAgIGlmIChiZWc+PjIzID09IGVuZD4+MjMpIHJldHVybiAoKDE8PDYpLTEpLzcgKyAoYmVnPj4yMyk7XG4gICAgaWYgKGJlZz4+MjYgPT0gZW5kPj4yNikgcmV0dXJuICgoMTw8MyktMSkvNyArIChiZWc+PjI2KTtcbiAgICByZXR1cm4gMDtcbn1cblxuLyogY2FsY3VsYXRlIHRoZSBsaXN0IG9mIGJpbnMgdGhhdCBtYXkgb3ZlcmxhcCB3aXRoIHJlZ2lvbiBbYmVnLGVuZCkgKHplcm8tYmFzZWQpICovXG52YXIgTUFYX0JJTiA9ICgoKDE8PDE4KS0xKS83KTtcbmZ1bmN0aW9uIHJlZzJiaW5zKGJlZywgZW5kKSBcbntcbiAgICB2YXIgaSA9IDAsIGssIGxpc3QgPSBbXTtcbiAgICAtLWVuZDtcbiAgICBsaXN0LnB1c2goMCk7XG4gICAgZm9yIChrID0gMSArIChiZWc+PjI2KTsgayA8PSAxICsgKGVuZD4+MjYpOyArK2spIGxpc3QucHVzaChrKTtcbiAgICBmb3IgKGsgPSA5ICsgKGJlZz4+MjMpOyBrIDw9IDkgKyAoZW5kPj4yMyk7ICsraykgbGlzdC5wdXNoKGspO1xuICAgIGZvciAoayA9IDczICsgKGJlZz4+MjApOyBrIDw9IDczICsgKGVuZD4+MjApOyArK2spIGxpc3QucHVzaChrKTtcbiAgICBmb3IgKGsgPSA1ODUgKyAoYmVnPj4xNyk7IGsgPD0gNTg1ICsgKGVuZD4+MTcpOyArK2spIGxpc3QucHVzaChrKTtcbiAgICBmb3IgKGsgPSA0NjgxICsgKGJlZz4+MTQpOyBrIDw9IDQ2ODEgKyAoZW5kPj4xNCk7ICsraykgbGlzdC5wdXNoKGspO1xuICAgIHJldHVybiBsaXN0O1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHVuYmd6ZjogdW5iZ3pmLFxuICAgICAgICByZWFkVm9iOiByZWFkVm9iLFxuICAgICAgICByZWcyYmluOiByZWcyYmluLFxuICAgICAgICByZWcyYmluczogcmVnMmJpbnMsXG4gICAgICAgIENodW5rOiBDaHVua1xuICAgIH07XG59XG4iLCIvKlxyXG4gKiBBIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24gb2YgdGhlIFNlY3VyZSBIYXNoIEFsZ29yaXRobSwgU0hBLTEsIGFzIGRlZmluZWRcclxuICogaW4gRklQUyAxODAtMVxyXG4gKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgUGF1bCBKb2huc3RvbiAyMDAwIC0gMjAwOS5cclxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxyXG4gKiBEaXN0cmlidXRlZCB1bmRlciB0aGUgQlNEIExpY2Vuc2VcclxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIGRldGFpbHMuXHJcbiAqL1xyXG5cclxuIFwidXNlIHN0cmljdFwiO1xyXG5cclxuLypcclxuICogQ29uZmlndXJhYmxlIHZhcmlhYmxlcy4gWW91IG1heSBuZWVkIHRvIHR3ZWFrIHRoZXNlIHRvIGJlIGNvbXBhdGlibGUgd2l0aFxyXG4gKiB0aGUgc2VydmVyLXNpZGUsIGJ1dCB0aGUgZGVmYXVsdHMgd29yayBpbiBtb3N0IGNhc2VzLlxyXG4gKi9cclxudmFyIGhleGNhc2UgPSAwOyAgLyogaGV4IG91dHB1dCBmb3JtYXQuIDAgLSBsb3dlcmNhc2U7IDEgLSB1cHBlcmNhc2UgICAgICAgICovXHJcbnZhciBiNjRwYWQgID0gXCJcIjsgLyogYmFzZS02NCBwYWQgY2hhcmFjdGVyLiBcIj1cIiBmb3Igc3RyaWN0IFJGQyBjb21wbGlhbmNlICAgKi9cclxuXHJcbi8qXHJcbiAqIFRoZXNlIGFyZSB0aGUgZnVuY3Rpb25zIHlvdSdsbCB1c3VhbGx5IHdhbnQgdG8gY2FsbFxyXG4gKiBUaGV5IHRha2Ugc3RyaW5nIGFyZ3VtZW50cyBhbmQgcmV0dXJuIGVpdGhlciBoZXggb3IgYmFzZS02NCBlbmNvZGVkIHN0cmluZ3NcclxuICovXHJcbmZ1bmN0aW9uIGhleF9zaGExKHMpICAgIHsgcmV0dXJuIHJzdHIyaGV4KHJzdHJfc2hhMShzdHIycnN0cl91dGY4KHMpKSk7IH1cclxuZnVuY3Rpb24gYjY0X3NoYTEocykgICAgeyByZXR1cm4gcnN0cjJiNjQocnN0cl9zaGExKHN0cjJyc3RyX3V0ZjgocykpKTsgfVxyXG5mdW5jdGlvbiBhbnlfc2hhMShzLCBlKSB7IHJldHVybiByc3RyMmFueShyc3RyX3NoYTEoc3RyMnJzdHJfdXRmOChzKSksIGUpOyB9XHJcbmZ1bmN0aW9uIGhleF9obWFjX3NoYTEoaywgZClcclxuICB7IHJldHVybiByc3RyMmhleChyc3RyX2htYWNfc2hhMShzdHIycnN0cl91dGY4KGspLCBzdHIycnN0cl91dGY4KGQpKSk7IH1cclxuZnVuY3Rpb24gYjY0X2htYWNfc2hhMShrLCBkKVxyXG4gIHsgcmV0dXJuIHJzdHIyYjY0KHJzdHJfaG1hY19zaGExKHN0cjJyc3RyX3V0ZjgoayksIHN0cjJyc3RyX3V0ZjgoZCkpKTsgfVxyXG5mdW5jdGlvbiBhbnlfaG1hY19zaGExKGssIGQsIGUpXHJcbiAgeyByZXR1cm4gcnN0cjJhbnkocnN0cl9obWFjX3NoYTEoc3RyMnJzdHJfdXRmOChrKSwgc3RyMnJzdHJfdXRmOChkKSksIGUpOyB9XHJcblxyXG4vKlxyXG4gKiBQZXJmb3JtIGEgc2ltcGxlIHNlbGYtdGVzdCB0byBzZWUgaWYgdGhlIFZNIGlzIHdvcmtpbmdcclxuICovXHJcbmZ1bmN0aW9uIHNoYTFfdm1fdGVzdCgpXHJcbntcclxuICByZXR1cm4gaGV4X3NoYTEoXCJhYmNcIikudG9Mb3dlckNhc2UoKSA9PSBcImE5OTkzZTM2NDcwNjgxNmFiYTNlMjU3MTc4NTBjMjZjOWNkMGQ4OWRcIjtcclxufVxyXG5cclxuLypcclxuICogQ2FsY3VsYXRlIHRoZSBTSEExIG9mIGEgcmF3IHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gcnN0cl9zaGExKHMpXHJcbntcclxuICByZXR1cm4gYmluYjJyc3RyKGJpbmJfc2hhMShyc3RyMmJpbmIocyksIHMubGVuZ3RoICogOCkpO1xyXG59XHJcblxyXG4vKlxyXG4gKiBDYWxjdWxhdGUgdGhlIEhNQUMtU0hBMSBvZiBhIGtleSBhbmQgc29tZSBkYXRhIChyYXcgc3RyaW5ncylcclxuICovXHJcbmZ1bmN0aW9uIHJzdHJfaG1hY19zaGExKGtleSwgZGF0YSlcclxue1xyXG4gIHZhciBia2V5ID0gcnN0cjJiaW5iKGtleSk7XHJcbiAgaWYoYmtleS5sZW5ndGggPiAxNikgYmtleSA9IGJpbmJfc2hhMShia2V5LCBrZXkubGVuZ3RoICogOCk7XHJcblxyXG4gIHZhciBpcGFkID0gQXJyYXkoMTYpLCBvcGFkID0gQXJyYXkoMTYpO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxyXG4gIHtcclxuICAgIGlwYWRbaV0gPSBia2V5W2ldIF4gMHgzNjM2MzYzNjtcclxuICAgIG9wYWRbaV0gPSBia2V5W2ldIF4gMHg1QzVDNUM1QztcclxuICB9XHJcblxyXG4gIHZhciBoYXNoID0gYmluYl9zaGExKGlwYWQuY29uY2F0KHJzdHIyYmluYihkYXRhKSksIDUxMiArIGRhdGEubGVuZ3RoICogOCk7XHJcbiAgcmV0dXJuIGJpbmIycnN0cihiaW5iX3NoYTEob3BhZC5jb25jYXQoaGFzaCksIDUxMiArIDE2MCkpO1xyXG59XHJcblxyXG4vKlxyXG4gKiBDb252ZXJ0IGEgcmF3IHN0cmluZyB0byBhIGhleCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIHJzdHIyaGV4KGlucHV0KVxyXG57XHJcbiAgLy8gdHJ5IHsgaGV4Y2FzZSB9IGNhdGNoKGUpIHsgaGV4Y2FzZT0wOyB9XHJcbiAgdmFyIGhleF90YWIgPSBoZXhjYXNlID8gXCIwMTIzNDU2Nzg5QUJDREVGXCIgOiBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcclxuICB2YXIgb3V0cHV0ID0gXCJcIjtcclxuICB2YXIgeDtcclxuICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspXHJcbiAge1xyXG4gICAgeCA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XHJcbiAgICBvdXRwdXQgKz0gaGV4X3RhYi5jaGFyQXQoKHggPj4+IDQpICYgMHgwRilcclxuICAgICAgICAgICArICBoZXhfdGFiLmNoYXJBdCggeCAgICAgICAgJiAweDBGKTtcclxuICB9XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuLypcclxuICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYSBiYXNlLTY0IHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gcnN0cjJiNjQoaW5wdXQpXHJcbntcclxuICAvLyB0cnkgeyBiNjRwYWQgfSBjYXRjaChlKSB7IGI2NHBhZD0nJzsgfVxyXG4gIHZhciB0YWIgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcclxuICB2YXIgb3V0cHV0ID0gXCJcIjtcclxuICB2YXIgbGVuID0gaW5wdXQubGVuZ3RoO1xyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMylcclxuICB7XHJcbiAgICB2YXIgdHJpcGxldCA9IChpbnB1dC5jaGFyQ29kZUF0KGkpIDw8IDE2KVxyXG4gICAgICAgICAgICAgICAgfCAoaSArIDEgPCBsZW4gPyBpbnB1dC5jaGFyQ29kZUF0KGkrMSkgPDwgOCA6IDApXHJcbiAgICAgICAgICAgICAgICB8IChpICsgMiA8IGxlbiA/IGlucHV0LmNoYXJDb2RlQXQoaSsyKSAgICAgIDogMCk7XHJcbiAgICBmb3IodmFyIGogPSAwOyBqIDwgNDsgaisrKVxyXG4gICAge1xyXG4gICAgICBpZihpICogOCArIGogKiA2ID4gaW5wdXQubGVuZ3RoICogOCkgb3V0cHV0ICs9IGI2NHBhZDtcclxuICAgICAgZWxzZSBvdXRwdXQgKz0gdGFiLmNoYXJBdCgodHJpcGxldCA+Pj4gNiooMy1qKSkgJiAweDNGKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuLypcclxuICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYW4gYXJiaXRyYXJ5IHN0cmluZyBlbmNvZGluZ1xyXG4gKi9cclxuZnVuY3Rpb24gcnN0cjJhbnkoaW5wdXQsIGVuY29kaW5nKVxyXG57XHJcbiAgdmFyIGRpdmlzb3IgPSBlbmNvZGluZy5sZW5ndGg7XHJcbiAgdmFyIHJlbWFpbmRlcnMgPSBBcnJheSgpO1xyXG4gIHZhciBpLCBxLCB4LCBxdW90aWVudDtcclxuXHJcbiAgLyogQ29udmVydCB0byBhbiBhcnJheSBvZiAxNi1iaXQgYmlnLWVuZGlhbiB2YWx1ZXMsIGZvcm1pbmcgdGhlIGRpdmlkZW5kICovXHJcbiAgdmFyIGRpdmlkZW5kID0gQXJyYXkoTWF0aC5jZWlsKGlucHV0Lmxlbmd0aCAvIDIpKTtcclxuICBmb3IoaSA9IDA7IGkgPCBkaXZpZGVuZC5sZW5ndGg7IGkrKylcclxuICB7XHJcbiAgICBkaXZpZGVuZFtpXSA9IChpbnB1dC5jaGFyQ29kZUF0KGkgKiAyKSA8PCA4KSB8IGlucHV0LmNoYXJDb2RlQXQoaSAqIDIgKyAxKTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgICogUmVwZWF0ZWRseSBwZXJmb3JtIGEgbG9uZyBkaXZpc2lvbi4gVGhlIGJpbmFyeSBhcnJheSBmb3JtcyB0aGUgZGl2aWRlbmQsXHJcbiAgICogdGhlIGxlbmd0aCBvZiB0aGUgZW5jb2RpbmcgaXMgdGhlIGRpdmlzb3IuIE9uY2UgY29tcHV0ZWQsIHRoZSBxdW90aWVudFxyXG4gICAqIGZvcm1zIHRoZSBkaXZpZGVuZCBmb3IgdGhlIG5leHQgc3RlcC4gV2Ugc3RvcCB3aGVuIHRoZSBkaXZpZGVuZCBpcyB6ZXJvLlxyXG4gICAqIEFsbCByZW1haW5kZXJzIGFyZSBzdG9yZWQgZm9yIGxhdGVyIHVzZS5cclxuICAgKi9cclxuICB3aGlsZShkaXZpZGVuZC5sZW5ndGggPiAwKVxyXG4gIHtcclxuICAgIHF1b3RpZW50ID0gQXJyYXkoKTtcclxuICAgIHggPSAwO1xyXG4gICAgZm9yKGkgPSAwOyBpIDwgZGl2aWRlbmQubGVuZ3RoOyBpKyspXHJcbiAgICB7XHJcbiAgICAgIHggPSAoeCA8PCAxNikgKyBkaXZpZGVuZFtpXTtcclxuICAgICAgcSA9IE1hdGguZmxvb3IoeCAvIGRpdmlzb3IpO1xyXG4gICAgICB4IC09IHEgKiBkaXZpc29yO1xyXG4gICAgICBpZihxdW90aWVudC5sZW5ndGggPiAwIHx8IHEgPiAwKVxyXG4gICAgICAgIHF1b3RpZW50W3F1b3RpZW50Lmxlbmd0aF0gPSBxO1xyXG4gICAgfVxyXG4gICAgcmVtYWluZGVyc1tyZW1haW5kZXJzLmxlbmd0aF0gPSB4O1xyXG4gICAgZGl2aWRlbmQgPSBxdW90aWVudDtcclxuICB9XHJcblxyXG4gIC8qIENvbnZlcnQgdGhlIHJlbWFpbmRlcnMgdG8gdGhlIG91dHB1dCBzdHJpbmcgKi9cclxuICB2YXIgb3V0cHV0ID0gXCJcIjtcclxuICBmb3IoaSA9IHJlbWFpbmRlcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pXHJcbiAgICBvdXRwdXQgKz0gZW5jb2RpbmcuY2hhckF0KHJlbWFpbmRlcnNbaV0pO1xyXG5cclxuICAvKiBBcHBlbmQgbGVhZGluZyB6ZXJvIGVxdWl2YWxlbnRzICovXHJcbiAgdmFyIGZ1bGxfbGVuZ3RoID0gTWF0aC5jZWlsKGlucHV0Lmxlbmd0aCAqIDggL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoTWF0aC5sb2coZW5jb2RpbmcubGVuZ3RoKSAvIE1hdGgubG9nKDIpKSlcclxuICBmb3IoaSA9IG91dHB1dC5sZW5ndGg7IGkgPCBmdWxsX2xlbmd0aDsgaSsrKVxyXG4gICAgb3V0cHV0ID0gZW5jb2RpbmdbMF0gKyBvdXRwdXQ7XHJcblxyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEVuY29kZSBhIHN0cmluZyBhcyB1dGYtOC5cclxuICogRm9yIGVmZmljaWVuY3ksIHRoaXMgYXNzdW1lcyB0aGUgaW5wdXQgaXMgdmFsaWQgdXRmLTE2LlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyMnJzdHJfdXRmOChpbnB1dClcclxue1xyXG4gIHZhciBvdXRwdXQgPSBcIlwiO1xyXG4gIHZhciBpID0gLTE7XHJcbiAgdmFyIHgsIHk7XHJcblxyXG4gIHdoaWxlKCsraSA8IGlucHV0Lmxlbmd0aClcclxuICB7XHJcbiAgICAvKiBEZWNvZGUgdXRmLTE2IHN1cnJvZ2F0ZSBwYWlycyAqL1xyXG4gICAgeCA9IGlucHV0LmNoYXJDb2RlQXQoaSk7XHJcbiAgICB5ID0gaSArIDEgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQ29kZUF0KGkgKyAxKSA6IDA7XHJcbiAgICBpZigweEQ4MDAgPD0geCAmJiB4IDw9IDB4REJGRiAmJiAweERDMDAgPD0geSAmJiB5IDw9IDB4REZGRilcclxuICAgIHtcclxuICAgICAgeCA9IDB4MTAwMDAgKyAoKHggJiAweDAzRkYpIDw8IDEwKSArICh5ICYgMHgwM0ZGKTtcclxuICAgICAgaSsrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIEVuY29kZSBvdXRwdXQgYXMgdXRmLTggKi9cclxuICAgIGlmKHggPD0gMHg3RilcclxuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoeCk7XHJcbiAgICBlbHNlIGlmKHggPD0gMHg3RkYpXHJcbiAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4QzAgfCAoKHggPj4+IDYgKSAmIDB4MUYpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCB4ICAgICAgICAgJiAweDNGKSk7XHJcbiAgICBlbHNlIGlmKHggPD0gMHhGRkZGKVxyXG4gICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgweEUwIHwgKCh4ID4+PiAxMikgJiAweDBGKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICgoeCA+Pj4gNiApICYgMHgzRiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoIHggICAgICAgICAmIDB4M0YpKTtcclxuICAgIGVsc2UgaWYoeCA8PSAweDFGRkZGRilcclxuICAgICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhGMCB8ICgoeCA+Pj4gMTgpICYgMHgwNyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDB4ODAgfCAoKHggPj4+IDEyKSAmIDB4M0YpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAweDgwIHwgKCh4ID4+PiA2ICkgJiAweDNGKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMHg4MCB8ICggeCAgICAgICAgICYgMHgzRikpO1xyXG4gIH1cclxuICByZXR1cm4gb3V0cHV0O1xyXG59XHJcblxyXG4vKlxyXG4gKiBFbmNvZGUgYSBzdHJpbmcgYXMgdXRmLTE2XHJcbiAqL1xyXG5mdW5jdGlvbiBzdHIycnN0cl91dGYxNmxlKGlucHV0KVxyXG57XHJcbiAgdmFyIG91dHB1dCA9IFwiXCI7XHJcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKVxyXG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoIGlucHV0LmNoYXJDb2RlQXQoaSkgICAgICAgICYgMHhGRixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChpbnB1dC5jaGFyQ29kZUF0KGkpID4+PiA4KSAmIDB4RkYpO1xyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0cjJyc3RyX3V0ZjE2YmUoaW5wdXQpXHJcbntcclxuICB2YXIgb3V0cHV0ID0gXCJcIjtcclxuICBmb3IodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspXHJcbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoaW5wdXQuY2hhckNvZGVBdChpKSA+Pj4gOCkgJiAweEZGLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmNoYXJDb2RlQXQoaSkgICAgICAgICYgMHhGRik7XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuLypcclxuICogQ29udmVydCBhIHJhdyBzdHJpbmcgdG8gYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3Jkc1xyXG4gKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC5cclxuICovXHJcbmZ1bmN0aW9uIHJzdHIyYmluYihpbnB1dClcclxue1xyXG4gIHZhciBvdXRwdXQgPSBBcnJheShpbnB1dC5sZW5ndGggPj4gMik7XHJcbiAgZm9yKHZhciBpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkrKylcclxuICAgIG91dHB1dFtpXSA9IDA7XHJcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDg7IGkgKz0gOClcclxuICAgIG91dHB1dFtpPj41XSB8PSAoaW5wdXQuY2hhckNvZGVBdChpIC8gOCkgJiAweEZGKSA8PCAoMjQgLSBpICUgMzIpO1xyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgYmlnLWVuZGlhbiB3b3JkcyB0byBhIHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gYmluYjJyc3RyKGlucHV0KVxyXG57XHJcbiAgdmFyIG91dHB1dCA9IFwiXCI7XHJcbiAgZm9yKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aCAqIDMyOyBpICs9IDgpXHJcbiAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoaW5wdXRbaT4+NV0gPj4+ICgyNCAtIGkgJSAzMikpICYgMHhGRik7XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufVxyXG5cclxuLypcclxuICogQ2FsY3VsYXRlIHRoZSBTSEEtMSBvZiBhbiBhcnJheSBvZiBiaWctZW5kaWFuIHdvcmRzLCBhbmQgYSBiaXQgbGVuZ3RoXHJcbiAqL1xyXG5mdW5jdGlvbiBiaW5iX3NoYTEoeCwgbGVuKVxyXG57XHJcbiAgLyogYXBwZW5kIHBhZGRpbmcgKi9cclxuICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8ICgyNCAtIGxlbiAlIDMyKTtcclxuICB4WygobGVuICsgNjQgPj4gOSkgPDwgNCkgKyAxNV0gPSBsZW47XHJcblxyXG4gIHZhciB3ID0gQXJyYXkoODApO1xyXG4gIHZhciBhID0gIDE3MzI1ODQxOTM7XHJcbiAgdmFyIGIgPSAtMjcxNzMzODc5O1xyXG4gIHZhciBjID0gLTE3MzI1ODQxOTQ7XHJcbiAgdmFyIGQgPSAgMjcxNzMzODc4O1xyXG4gIHZhciBlID0gLTEwMDk1ODk3NzY7XHJcblxyXG4gIGZvcih2YXIgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSArPSAxNilcclxuICB7XHJcbiAgICB2YXIgb2xkYSA9IGE7XHJcbiAgICB2YXIgb2xkYiA9IGI7XHJcbiAgICB2YXIgb2xkYyA9IGM7XHJcbiAgICB2YXIgb2xkZCA9IGQ7XHJcbiAgICB2YXIgb2xkZSA9IGU7XHJcblxyXG4gICAgZm9yKHZhciBqID0gMDsgaiA8IDgwOyBqKyspXHJcbiAgICB7XHJcbiAgICAgIGlmKGogPCAxNikgd1tqXSA9IHhbaSArIGpdO1xyXG4gICAgICBlbHNlIHdbal0gPSBiaXRfcm9sKHdbai0zXSBeIHdbai04XSBeIHdbai0xNF0gXiB3W2otMTZdLCAxKTtcclxuICAgICAgdmFyIHQgPSBzYWZlX2FkZChzYWZlX2FkZChiaXRfcm9sKGEsIDUpLCBzaGExX2Z0KGosIGIsIGMsIGQpKSxcclxuICAgICAgICAgICAgICAgICAgICAgICBzYWZlX2FkZChzYWZlX2FkZChlLCB3W2pdKSwgc2hhMV9rdChqKSkpO1xyXG4gICAgICBlID0gZDtcclxuICAgICAgZCA9IGM7XHJcbiAgICAgIGMgPSBiaXRfcm9sKGIsIDMwKTtcclxuICAgICAgYiA9IGE7XHJcbiAgICAgIGEgPSB0O1xyXG4gICAgfVxyXG5cclxuICAgIGEgPSBzYWZlX2FkZChhLCBvbGRhKTtcclxuICAgIGIgPSBzYWZlX2FkZChiLCBvbGRiKTtcclxuICAgIGMgPSBzYWZlX2FkZChjLCBvbGRjKTtcclxuICAgIGQgPSBzYWZlX2FkZChkLCBvbGRkKTtcclxuICAgIGUgPSBzYWZlX2FkZChlLCBvbGRlKTtcclxuICB9XHJcbiAgcmV0dXJuIEFycmF5KGEsIGIsIGMsIGQsIGUpO1xyXG5cclxufVxyXG5cclxuLypcclxuICogUGVyZm9ybSB0aGUgYXBwcm9wcmlhdGUgdHJpcGxldCBjb21iaW5hdGlvbiBmdW5jdGlvbiBmb3IgdGhlIGN1cnJlbnRcclxuICogaXRlcmF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBzaGExX2Z0KHQsIGIsIGMsIGQpXHJcbntcclxuICBpZih0IDwgMjApIHJldHVybiAoYiAmIGMpIHwgKCh+YikgJiBkKTtcclxuICBpZih0IDwgNDApIHJldHVybiBiIF4gYyBeIGQ7XHJcbiAgaWYodCA8IDYwKSByZXR1cm4gKGIgJiBjKSB8IChiICYgZCkgfCAoYyAmIGQpO1xyXG4gIHJldHVybiBiIF4gYyBeIGQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIERldGVybWluZSB0aGUgYXBwcm9wcmlhdGUgYWRkaXRpdmUgY29uc3RhbnQgZm9yIHRoZSBjdXJyZW50IGl0ZXJhdGlvblxyXG4gKi9cclxuZnVuY3Rpb24gc2hhMV9rdCh0KVxyXG57XHJcbiAgcmV0dXJuICh0IDwgMjApID8gIDE1MTg1MDAyNDkgOiAodCA8IDQwKSA/ICAxODU5Nzc1MzkzIDpcclxuICAgICAgICAgKHQgPCA2MCkgPyAtMTg5NDAwNzU4OCA6IC04OTk0OTc1MTQ7XHJcbn1cclxuXHJcbi8qXHJcbiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHlcclxuICogdG8gd29yayBhcm91bmQgYnVncyBpbiBzb21lIEpTIGludGVycHJldGVycy5cclxuICovXHJcbmZ1bmN0aW9uIHNhZmVfYWRkKHgsIHkpXHJcbntcclxuICB2YXIgbHN3ID0gKHggJiAweEZGRkYpICsgKHkgJiAweEZGRkYpO1xyXG4gIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTtcclxuICByZXR1cm4gKG1zdyA8PCAxNikgfCAobHN3ICYgMHhGRkZGKTtcclxufVxyXG5cclxuLypcclxuICogQml0d2lzZSByb3RhdGUgYSAzMi1iaXQgbnVtYmVyIHRvIHRoZSBsZWZ0LlxyXG4gKi9cclxuZnVuY3Rpb24gYml0X3JvbChudW0sIGNudClcclxue1xyXG4gIHJldHVybiAobnVtIDw8IGNudCkgfCAobnVtID4+PiAoMzIgLSBjbnQpKTtcclxufVxyXG5cclxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgYjY0X3NoYTE6IGI2NF9zaGExLFxyXG4gICAgaGV4X3NoYTE6IGhleF9zaGExXHJcbiAgfVxyXG59XHJcbiIsIi8qIC0qLSBtb2RlOiBqYXZhc2NyaXB0OyBjLWJhc2ljLW9mZnNldDogNDsgaW5kZW50LXRhYnMtbW9kZTogbmlsIC0qLSAqL1xuXG4vLyBcbi8vIERhbGxpYW5jZSBHZW5vbWUgRXhwbG9yZXJcbi8vIChjKSBUaG9tYXMgRG93biAyMDA2LTIwMTBcbi8vXG4vLyBzcGFucy5qczogSmF2YVNjcmlwdCBJbnRzZXQvTG9jYXRpb24gcG9ydC5cbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5cbmZ1bmN0aW9uIFJhbmdlKG1pbiwgbWF4KVxue1xuICAgIGlmICh0eXBlb2YobWluKSAhPSAnbnVtYmVyJyB8fCB0eXBlb2YobWF4KSAhPSAnbnVtYmVyJylcbiAgICAgICAgdGhyb3cgJ0JhZCByYW5nZSAnICsgbWluICsgJywnICsgbWF4O1xuICAgIHRoaXMuX21pbiA9IG1pbjtcbiAgICB0aGlzLl9tYXggPSBtYXg7XG59XG5cblJhbmdlLnByb3RvdHlwZS5taW4gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fbWluO1xufVxuXG5SYW5nZS5wcm90b3R5cGUubWF4ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX21heDtcbn1cblxuUmFuZ2UucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgcmV0dXJuIHBvcyA+PSB0aGlzLl9taW4gJiYgcG9zIDw9IHRoaXMuX21heDtcbn1cblxuUmFuZ2UucHJvdG90eXBlLmlzQ29udGlndW91cyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0cnVlO1xufVxuXG5SYW5nZS5wcm90b3R5cGUucmFuZ2VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFt0aGlzXTtcbn1cblxuUmFuZ2UucHJvdG90eXBlLl9wdXNoUmFuZ2VzID0gZnVuY3Rpb24ocmFuZ2VzKSB7XG4gICAgcmFuZ2VzLnB1c2godGhpcyk7XG59XG5cblJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAnWycgKyB0aGlzLl9taW4gKyAnLScgKyB0aGlzLl9tYXggKyAnXSc7XG59XG5cbmZ1bmN0aW9uIF9Db21wb3VuZChyYW5nZXMpIHtcbiAgICAvLyBnaXZlbjogYSBzZXQgb2YgdW5zb3J0ZWQgcG9zc2libHkgb3ZlcmxhcHBpbmcgcmFuZ2VzXG4gICAgLy8gc29ydCB0aGUgaW5wdXQgcmFuZ2VzXG4gICAgdmFyIHNvcnRlZCA9IHJhbmdlcy5zb3J0KF9yYW5nZU9yZGVyKTtcbiAgICAvLyBtZXJnZSBvdmVybGFwcyBiZXR3ZWVuIGFkamFjZW50IHJhbmdlc1xuICAgIHZhciBtZXJnZWQgPSBbXTtcbiAgICB2YXIgY3VycmVudCA9IHNvcnRlZC5zaGlmdCgpO1xuICAgIHNvcnRlZC5mb3JFYWNoKGZ1bmN0aW9uKHJhbmdlKSB7XG4gICAgICAgIGlmIChyYW5nZS5fbWluIDw9IGN1cnJlbnQuX21heCkge1xuICAgICAgICAgICAgaWYgKHJhbmdlLl9tYXggPiBjdXJyZW50Ll9tYXgpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Ll9tYXggPSByYW5nZS5fbWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbWVyZ2VkLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgICBjdXJyZW50ID0gcmFuZ2U7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBtZXJnZWQucHVzaChjdXJyZW50KTtcbiAgICB0aGlzLl9yYW5nZXMgPSBtZXJnZWQ7XG59XG5cbl9Db21wb3VuZC5wcm90b3R5cGUubWluID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jhbmdlc1swXS5taW4oKTtcbn1cblxuX0NvbXBvdW5kLnByb3RvdHlwZS5tYXggPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmFuZ2VzW3RoaXMuX3Jhbmdlcy5sZW5ndGggLSAxXS5tYXgoKTtcbn1cblxuLy8gcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHJhbmdlIHRoYXQgaXMgbm90IGxlc3MgdGhhbiBwb3Ncbl9Db21wb3VuZC5wcm90b3R5cGUubG93ZXJfYm91bmQgPSBmdW5jdGlvbihwb3MpIHtcbiAgICAvLyBmaXJzdCBjaGVjayBpZiBwb3MgaXMgb3V0IG9mIHJhbmdlXG4gICAgdmFyIHIgPSB0aGlzLnJhbmdlcygpO1xuICAgIGlmIChwb3MgPiB0aGlzLm1heCgpKSByZXR1cm4gci5sZW5ndGg7XG4gICAgaWYgKHBvcyA8IHRoaXMubWluKCkpIHJldHVybiAwO1xuICAgIC8vIGRvIGEgYmluYXJ5IHNlYXJjaFxuICAgIHZhciBhPTAsIGI9ci5sZW5ndGggLSAxO1xuICAgIHdoaWxlIChhIDw9IGIpIHtcbiAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKChhK2IpLzIpO1xuICAgICAgICBpZiAocG9zID4gclttXS5fbWF4KSB7XG4gICAgICAgICAgICBhID0gbSsxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBvcyA8IHJbbV0uX21pbikge1xuICAgICAgICAgICAgYiA9IG0tMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBtO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhO1xufVxuXG5fQ29tcG91bmQucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgdmFyIGxiID0gdGhpcy5sb3dlcl9ib3VuZChwb3MpO1xuICAgIGlmIChsYiA8IHRoaXMuX3Jhbmdlcy5sZW5ndGggJiYgdGhpcy5fcmFuZ2VzW2xiXS5jb250YWlucyhwb3MpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbl9Db21wb3VuZC5wcm90b3R5cGUuaW5zZXJ0UmFuZ2UgPSBmdW5jdGlvbihyYW5nZSkge1xuICAgIHZhciBsYiA9IHRoaXMubG93ZXJfYm91bmQocmFuZ2UuX21pbik7XG4gICAgaWYgKGxiID09PSB0aGlzLl9yYW5nZXMubGVuZ3RoKSB7IC8vIHJhbmdlIGZvbGxvd3MgdGhpc1xuICAgICAgICB0aGlzLl9yYW5nZXMucHVzaChyYW5nZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgXG4gICAgdmFyIHIgPSB0aGlzLnJhbmdlcygpO1xuICAgIGlmIChyYW5nZS5fbWF4IDwgcltsYl0uX21pbikgeyAvLyByYW5nZSBwcmVjZWVkcyBsYlxuICAgICAgICB0aGlzLl9yYW5nZXMuc3BsaWNlKGxiLDAscmFuZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gcmFuZ2Ugb3ZlcmxhcHMgbGIgKGF0IGxlYXN0KVxuICAgIGlmIChyW2xiXS5fbWluIDwgcmFuZ2UuX21pbikgcmFuZ2UuX21pbiA9IHJbbGJdLl9taW47XG4gICAgdmFyIHViID0gbGIrMTtcbiAgICB3aGlsZSAodWIgPCByLmxlbmd0aCAmJiByW3ViXS5fbWluIDw9IHJhbmdlLl9tYXgpIHtcbiAgICAgICAgdWIrKztcbiAgICB9XG4gICAgdWItLTtcbiAgICAvLyB1YiBpcyB0aGUgdXBwZXIgYm91bmQgb2YgdGhlIG5ldyByYW5nZVxuICAgIGlmIChyW3ViXS5fbWF4ID4gcmFuZ2UuX21heCkgcmFuZ2UuX21heCA9IHJbdWJdLl9tYXg7XG4gICAgXG4gICAgLy8gc3BsaWNlIHJhbmdlIGludG8gdGhpcy5fcmFuZ2VzXG4gICAgdGhpcy5fcmFuZ2VzLnNwbGljZShsYix1Yi1sYisxLHJhbmdlKTtcbiAgICByZXR1cm47XG59XG5cbl9Db21wb3VuZC5wcm90b3R5cGUuaXNDb250aWd1b3VzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jhbmdlcy5sZW5ndGggPiAxO1xufVxuXG5fQ29tcG91bmQucHJvdG90eXBlLnJhbmdlcyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9yYW5nZXM7XG59XG5cbl9Db21wb3VuZC5wcm90b3R5cGUuX3B1c2hSYW5nZXMgPSBmdW5jdGlvbihyYW5nZXMpIHtcbiAgICBmb3IgKHZhciByaSA9IDA7IHJpIDwgdGhpcy5fcmFuZ2VzLmxlbmd0aDsgKytyaSlcbiAgICAgICAgcmFuZ2VzLnB1c2godGhpcy5fcmFuZ2VzW3JpXSk7XG59XG5cbl9Db21wb3VuZC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcyA9ICcnO1xuICAgIGZvciAodmFyIHIgPSAwOyByIDwgdGhpcy5fcmFuZ2VzLmxlbmd0aDsgKytyKSB7XG4gICAgICAgIGlmIChyPjApIHtcbiAgICAgICAgICAgIHMgPSBzICsgJywnO1xuICAgICAgICB9XG4gICAgICAgIHMgPSBzICsgdGhpcy5fcmFuZ2VzW3JdLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG5mdW5jdGlvbiB1bmlvbihzMCwgczEpIHtcbiAgICBpZiAoISAoczAgaW5zdGFuY2VvZiBfQ29tcG91bmQpKSB7XG4gICAgICAgIGlmICghIChzMCBpbnN0YW5jZW9mIEFycmF5KSlcbiAgICAgICAgICAgIHMwID0gW3MwXTtcbiAgICAgICAgczAgPSBuZXcgX0NvbXBvdW5kKHMwKTtcbiAgICB9XG4gICAgXG4gICAgaWYgKHMxKVxuICAgICAgICBzMC5pbnNlcnRSYW5nZShzMSk7XG5cbiAgICByZXR1cm4gczA7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdGlvbihzMCwgczEpIHtcbiAgICB2YXIgcjAgPSBzMC5yYW5nZXMoKTtcbiAgICB2YXIgcjEgPSBzMS5yYW5nZXMoKTtcbiAgICB2YXIgbDAgPSByMC5sZW5ndGgsIGwxID0gcjEubGVuZ3RoO1xuICAgIHZhciBpMCA9IDAsIGkxID0gMDtcbiAgICB2YXIgb3IgPSBbXTtcblxuICAgIHdoaWxlIChpMCA8IGwwICYmIGkxIDwgbDEpIHtcbiAgICAgICAgdmFyIHMwID0gcjBbaTBdLCBzMSA9IHIxW2kxXTtcbiAgICAgICAgdmFyIGxhcE1pbiA9IE1hdGgubWF4KHMwLm1pbigpLCBzMS5taW4oKSk7XG4gICAgICAgIHZhciBsYXBNYXggPSBNYXRoLm1pbihzMC5tYXgoKSwgczEubWF4KCkpO1xuICAgICAgICBpZiAobGFwTWF4ID49IGxhcE1pbikge1xuICAgICAgICAgICAgb3IucHVzaChuZXcgUmFuZ2UobGFwTWluLCBsYXBNYXgpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoczAubWF4KCkgPiBzMS5tYXgoKSkge1xuICAgICAgICAgICAgKytpMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICsraTA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKG9yLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgIHJldHVybiBudWxsOyAvLyBGSVhNRVxuICAgIH0gZWxzZSBpZiAob3IubGVuZ3RoID09IDEpIHtcbiAgICAgICAgcmV0dXJuIG9yWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgX0NvbXBvdW5kKG9yKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvdmVyYWdlKHMpIHtcbiAgICB2YXIgdG90ID0gMDtcbiAgICB2YXIgcmwgPSBzLnJhbmdlcygpO1xuICAgIGZvciAodmFyIHJpID0gMDsgcmkgPCBybC5sZW5ndGg7ICsrcmkpIHtcbiAgICAgICAgdmFyIHIgPSBybFtyaV07XG4gICAgICAgIHRvdCArPSAoci5tYXgoKSAtIHIubWluKCkgKyAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvdDtcbn1cblxuXG5cbmZ1bmN0aW9uIHJhbmdlT3JkZXIoYSwgYilcbntcbiAgICBpZiAoYS5taW4oKSA8IGIubWluKCkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoYS5taW4oKSA+IGIubWluKCkpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhLm1heCgpIDwgYi5tYXgoKSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChiLm1heCgpID4gYS5tYXgoKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIF9yYW5nZU9yZGVyKGEsIGIpXG57XG4gICAgaWYgKGEuX21pbiA8IGIuX21pbikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlIGlmIChhLl9taW4gPiBiLl9taW4pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChhLl9tYXggPCBiLl9tYXgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH0gZWxzZSBpZiAoYi5fbWF4ID4gYS5fbWF4KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cblxuaWYgKHR5cGVvZihtb2R1bGUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0ge1xuICAgICAgICBSYW5nZTogUmFuZ2UsXG4gICAgICAgIHVuaW9uOiB1bmlvbixcbiAgICAgICAgaW50ZXJzZWN0aW9uOiBpbnRlcnNlY3Rpb24sXG4gICAgICAgIGNvdmVyYWdlOiBjb3ZlcmFnZSxcbiAgICAgICAgcmFuZ2VPdmVyOiByYW5nZU9yZGVyLFxuICAgICAgICBfcmFuZ2VPcmRlcjogX3JhbmdlT3JkZXJcbiAgICB9XG59IiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gRGFsbGlhbmNlIEdlbm9tZSBFeHBsb3JlclxuLy8gKGMpIFRob21hcyBEb3duIDIwMDYtMjAxMFxuLy9cbi8vIHV0aWxzLmpzOiBvZGRzLCBzb2RzLCBhbmQgZW5kcy5cbi8vXG5cblwidXNlIHN0cmljdFwiO1xuXG5pZiAodHlwZW9mKHJlcXVpcmUpICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBzaGExID0gcmVxdWlyZSgnLi9zaGExJyk7XG4gICAgdmFyIGI2NF9zaGExID0gc2hhMS5iNjRfc2hhMTtcbn1cblxudmFyIE5VTV9SRUdFWFAgPSBuZXcgUmVnRXhwKCdbMC05XSsnKTtcblxuZnVuY3Rpb24gc3RyaW5nVG9OdW1iZXJzQXJyYXkoc3RyKSB7XG4gICAgdmFyIG51bXMgPSBuZXcgQXJyYXkoKTtcbiAgICB2YXIgbTtcbiAgICB3aGlsZSAobSA9IE5VTV9SRUdFWFAuZXhlYyhzdHIpKSB7XG4gICAgICAgIG51bXMucHVzaChtWzBdKTtcbiAgICAgICAgc3RyPXN0ci5zdWJzdHJpbmcobS5pbmRleCArIChtWzBdLmxlbmd0aCkpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtcztcbn1cblxudmFyIFNUUklDVF9OVU1fUkVHRVhQID0gbmV3IFJlZ0V4cCgnXlswLTldKyQnKTtcblxuZnVuY3Rpb24gc3RyaW5nVG9JbnQoc3RyKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cCgnLCcsICdnJyksICcnKTtcbiAgICBpZiAoIVNUUklDVF9OVU1fUkVHRVhQLnRlc3Qoc3RyKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHN0cnwwO1xufVxuXG5mdW5jdGlvbiBwdXNobmV3KGEsIHYpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKGFbaV0gPT0gdikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGEucHVzaCh2KTtcbn1cblxuZnVuY3Rpb24gcHVzaG8ob2JqLCBrLCB2KSB7XG4gICAgaWYgKG9ialtrXSkge1xuICAgICAgICBvYmpba10ucHVzaCh2KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBvYmpba10gPSBbdl07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwdXNobmV3byhvYmosIGssIHYpIHtcbiAgICB2YXIgYSA9IG9ialtrXTtcbiAgICBpZiAoYSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHsgICAgLy8gaW5kZXhPZiByZXF1aXJlcyBKUzE2IDotKC5cbiAgICAgICAgICAgIGlmIChhW2ldID09IHYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9ialtrXSA9IFt2XTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gcGljayhhLCBiLCBjLCBkKVxue1xuICAgIGlmIChhKSB7XG4gICAgICAgIHJldHVybiBhO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgICByZXR1cm4gYjtcbiAgICB9IGVsc2UgaWYgKGMpIHtcbiAgICAgICAgcmV0dXJuIGM7XG4gICAgfSBlbHNlIGlmIChkKSB7XG4gICAgICAgIHJldHVybiBkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcHVzaG5ldyhsLCBvKVxue1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbC5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAobFtpXSA9PSBvKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgbC5wdXNoKG8pO1xufVxuXG5mdW5jdGlvbiBhcnJheUVxdWFscyhhLCBiKSB7XG4gICAgaWYgKCFhIHx8ICFiIHx8IGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YoYSwgeCkge1xuICAgIGlmICghYSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhW2ldID09PSB4KSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGFycmF5UmVtb3ZlKGEsIHgpIHtcbiAgICB2YXIgaSA9IGFycmF5SW5kZXhPZihhLCB4KTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgIGEuc3BsaWNlKGksIDEpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vL1xuLy8gRE9NIHV0aWxpdGllc1xuLy9cblxuXG5mdW5jdGlvbiBtYWtlRWxlbWVudCh0YWcsIGNoaWxkcmVuLCBhdHRyaWJzLCBzdHlsZXMpXG57XG4gICAgdmFyIGVsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCEgKGNoaWxkcmVuIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBjID09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyArIGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbGUuYXBwZW5kQ2hpbGQoYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgaWYgKGF0dHJpYnMpIHtcbiAgICAgICAgZm9yICh2YXIgbCBpbiBhdHRyaWJzKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGVsZVtsXSA9IGF0dHJpYnNbbF07XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yIHNldHRpbmcgJyArIGwpO1xuICAgICAgICAgICAgICAgIHRocm93KGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdHlsZXMpIHtcbiAgICAgICAgZm9yICh2YXIgbCBpbiBzdHlsZXMpIHtcbiAgICAgICAgICAgIGVsZS5zdHlsZVtsXSA9IHN0eWxlc1tsXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZWxlO1xufVxuXG5mdW5jdGlvbiBtYWtlRWxlbWVudE5TKG5hbWVzcGFjZSwgdGFnLCBjaGlsZHJlbiwgYXR0cmlicylcbntcbiAgICB2YXIgZWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZSwgdGFnKTtcbiAgICBpZiAoY2hpbGRyZW4pIHtcbiAgICAgICAgaWYgKCEgKGNoaWxkcmVuIGluc3RhbmNlb2YgQXJyYXkpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjaGlsZHJlbl07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYyA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGMgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZS5hcHBlbmRDaGlsZChjKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzZXRBdHRycyhlbGUsIGF0dHJpYnMpO1xuICAgIHJldHVybiBlbGU7XG59XG5cbnZhciBhdHRyX25hbWVfY2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gc2V0QXR0cihub2RlLCBrZXksIHZhbHVlKVxue1xuICAgIHZhciBhdHRyID0gYXR0cl9uYW1lX2NhY2hlW2tleV07XG4gICAgaWYgKCFhdHRyKSB7XG4gICAgICAgIHZhciBfYXR0ciA9ICcnO1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IGtleS5sZW5ndGg7ICsrYykge1xuICAgICAgICAgICAgdmFyIGNjID0ga2V5LnN1YnN0cmluZyhjLCBjKzEpO1xuICAgICAgICAgICAgdmFyIGxjYyA9IGNjLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICBpZiAobGNjICE9IGNjKSB7XG4gICAgICAgICAgICAgICAgX2F0dHIgPSBfYXR0ciArICctJyArIGxjYztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgX2F0dHIgPSBfYXR0ciArIGNjO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGF0dHJfbmFtZV9jYWNoZVtrZXldID0gX2F0dHI7XG4gICAgICAgIGF0dHIgPSBfYXR0cjtcbiAgICB9XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzZXRBdHRycyhub2RlLCBhdHRyaWJzKVxue1xuICAgIGlmIChhdHRyaWJzKSB7XG4gICAgICAgIGZvciAodmFyIGwgaW4gYXR0cmlicykge1xuICAgICAgICAgICAgc2V0QXR0cihub2RlLCBsLCBhdHRyaWJzW2xdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkcmVuKG5vZGUpXG57XG4gICAgaWYgKCFub2RlIHx8ICFub2RlLmNoaWxkTm9kZXMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdoaWxlIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxufVxuXG5cblxuLy9cbi8vIFdBUk5JTkc6IG5vdCBmb3IgZ2VuZXJhbCB1c2UhXG4vL1xuXG5mdW5jdGlvbiBtaW5pSlNPTmlmeShvLCBleGMpIHtcbiAgICBpZiAodHlwZW9mIG8gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9IGVsc2UgaWYgKG8gPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG8gPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIFwiJ1wiICsgbyArIFwiJ1wiO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG8gPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBvO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIG8gPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBcIlwiICsgbztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvID09ICdvYmplY3QnKSB7XG4gICAgICAgIGlmIChvIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBzID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgby5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHMgPSAocyA9PSBudWxsID8gJycgOiAocyArICcsICcpKSArIG1pbmlKU09OaWZ5KG9baV0sIGV4Yyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ1snICsgKHM/czonJykgKyAnXSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGMgPSBleGMgfHwge307XG4gICAgICAgICAgICB2YXIgcyA9IG51bGw7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXhjW2tdKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAoayAhPSB1bmRlZmluZWQgJiYgdHlwZW9mKG9ba10pICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgcyA9IChzID09IG51bGwgPyAnJyA6IChzICsgJywgJykpICsgayArICc6ICcgKyBtaW5pSlNPTmlmeShvW2tdLCBleGMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAneycgKyAocz9zOicnKSArICd9JztcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIG8pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2hhbGxvd0NvcHkobykge1xuICAgIHZhciBuID0ge307XG4gICAgZm9yICh2YXIgayBpbiBvKSB7XG4gICAgICAgIG5ba10gPSBvW2tdO1xuICAgIH1cbiAgICByZXR1cm4gbjtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZWQoeCkge1xuICAgIHRoaXMudmFsdWUgPSB4O1xuICAgIHRoaXMubGlzdGVuZXJzID0gW107XG59XG5cbk9ic2VydmVkLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uKGYpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGYpO1xufVxuXG5PYnNlcnZlZC5wcm90b3R5cGUuYWRkTGlzdGVuZXJBbmRGaXJlID0gZnVuY3Rpb24oZikge1xuICAgIHRoaXMubGlzdGVuZXJzLnB1c2goZik7XG4gICAgZih0aGlzLnZhbHVlKTtcbn1cblxuT2JzZXJ2ZWQucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0gZnVuY3Rpb24oZikge1xuICAgIGFycmF5UmVtb3ZlKHRoaXMubGlzdGVuZXJzLCBmKTtcbn1cblxuT2JzZXJ2ZWQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xufVxuXG5PYnNlcnZlZC5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24oeCkge1xuICAgIHRoaXMudmFsdWUgPSB4O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbaV0oeCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBBd2FpdGVkKCkge1xuICAgIHRoaXMucXVldWUgPSBbXTtcbn1cblxuQXdhaXRlZC5wcm90b3R5cGUucHJvdmlkZSA9IGZ1bmN0aW9uKHgpIHtcbiAgICBpZiAodGhpcy5yZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBcIlJlc291cmNlIGhhcyBhbHJlYWR5IGJlZW4gcHJvdmlkZWQuXCI7XG4gICAgfVxuXG4gICAgdGhpcy5yZXMgPSB4O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5xdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICB0aGlzLnF1ZXVlW2ldKHgpO1xuICAgIH1cbiAgICB0aGlzLnF1ZXVlID0gbnVsbDsgICAvLyBhdm9pZCBsZWFraW5nIGNsb3N1cmVzLlxufVxuXG5Bd2FpdGVkLnByb3RvdHlwZS5hd2FpdCA9IGZ1bmN0aW9uKGYpIHtcbiAgICBpZiAodGhpcy5yZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmKHRoaXMucmVzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucXVldWUucHVzaChmKTtcbiAgICB9XG59XG5cbnZhciBfX2RhbGxpYW5jZV9zYWx0U2VlZCA9IDA7XG5cbmZ1bmN0aW9uIHNhbHRVUkwodXJsKSB7XG4gICAgcmV0dXJuIHVybCArICc/c2FsdD0nICsgYjY0X3NoYTEoJycgKyBEYXRlLm5vdygpICsgJywnICsgKCsrX19kYWxsaWFuY2Vfc2FsdFNlZWQpKTtcbn1cblxuZnVuY3Rpb24gdGV4dFhIUih1cmwsIGNhbGxiYWNrLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgJiYgb3B0cy5zYWx0KSBcbiAgICAgICAgdXJsID0gc2FsdFVSTCh1cmwpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHRpbWVvdXQ7XG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMudGltZW91dCkge1xuICAgICAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aW1pbmcgb3V0ICcgKyB1cmwpO1xuICAgICAgICAgICAgICAgICAgICByZXEuYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsICdUaW1lb3V0Jyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRzLnRpbWVvdXRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVxID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgIHJlcS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICBcdCAgICBpZiAocmVxLnJlYWR5U3RhdGUgPT0gNCkge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lb3V0KVxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgXHQgICAgICAgIGlmIChyZXEuc3RhdHVzIDwgMjAwIHx8IHJlcS5zdGF0dXMgPj0gMzAwKSB7XG4gICAgXHRcdCAgICBjYWxsYmFjayhudWxsLCAnRXJyb3IgY29kZSAnICsgcmVxLnN0YXR1cyk7XG4gICAgXHQgICAgICAgIH0gZWxzZSB7XG4gICAgXHRcdCAgICBjYWxsYmFjayhyZXEucmVzcG9uc2VUZXh0KTtcbiAgICBcdCAgICAgICAgfVxuICAgIFx0ICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIHJlcS5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgICAgICByZXEucmVzcG9uc2VUeXBlID0gJ3RleHQnO1xuXG4gICAgICAgIGlmIChvcHRzICYmIG9wdHMuY3JlZGVudGlhbHMpIHtcbiAgICAgICAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlcS5zZW5kKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWxsYmFjayhudWxsLCAnRXhjZXB0aW9uICcgKyBlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlbGF0aXZlVVJMKGJhc2UsIHJlbCkge1xuICAgIC8vIEZJWE1FIHF1aXRlIG5haXZlIC0tIGdvb2QgZW5vdWdoIGZvciB0cmFja2h1YnM/XG5cbiAgICBpZiAocmVsLmluZGV4T2YoJ2h0dHA6JykgPT09IDAgfHwgcmVsLmluZGV4T2YoJ2h0dHBzOicpID09PSAwIHx8IHJlbC5pbmRleE9mKCdmdHA6JykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHJlbDtcbiAgICB9XG5cbiAgICB2YXIgbGkgPSBiYXNlLmxhc3RJbmRleE9mKCcvJyk7XG4gICAgaWYgKGxpID49IDApIHtcbiAgICAgICAgcmV0dXJuIGJhc2Uuc3Vic3RyKDAsIGxpICsgMSkgKyByZWw7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHJlbDtcbiAgICB9XG59XG5cbnZhciBBTUlOT19BQ0lEX1RSQU5TTEFUSU9OID0ge1xuICAgICdUVFQnOiAnRicsXG4gICAgJ1RUQyc6ICdGJyxcbiAgICAnVFRBJzogJ0wnLFxuICAgICdUVEcnOiAnTCcsXG4gICAgJ0NUVCc6ICdMJyxcbiAgICAnQ1RDJzogJ0wnLFxuICAgICdDVEEnOiAnTCcsXG4gICAgJ0NURyc6ICdMJyxcbiAgICAnQVRUJzogJ0knLFxuICAgICdBVEMnOiAnSScsXG4gICAgJ0FUQSc6ICdJJyxcbiAgICAnQVRHJzogJ00nLFxuICAgICdHVFQnOiAnVicsXG4gICAgJ0dUQyc6ICdWJyxcbiAgICAnR1RBJzogJ1YnLFxuICAgICdHVEcnOiAnVicsXG4gICAgJ1RDVCc6ICdTJyxcbiAgICAnVENDJzogJ1MnLFxuICAgICdUQ0EnOiAnUycsXG4gICAgJ1RDRyc6ICdTJyxcbiAgICAnQ0NUJzogJ1AnLFxuICAgICdDQ0MnOiAnUCcsXG4gICAgJ0NDQSc6ICdQJyxcbiAgICAnQ0NHJzogJ1AnLFxuICAgICdBQ1QnOiAnVCcsXG4gICAgJ0FDQyc6ICdUJyxcbiAgICAnQUNBJzogJ1QnLFxuICAgICdBQ0cnOiAnVCcsXG4gICAgJ0dDVCc6ICdBJyxcbiAgICAnR0NDJzogJ0EnLFxuICAgICdHQ0EnOiAnQScsXG4gICAgJ0dDRyc6ICdBJyxcbiAgICAnVEFUJzogJ1knLFxuICAgICdUQUMnOiAnWScsXG4gICAgJ1RBQSc6ICcqJywgIC8vIHN0b3BcbiAgICAnVEFHJzogJyonLCAgLy8gc3RvcFxuICAgICdDQVQnOiAnSCcsXG4gICAgJ0NBQyc6ICdIJyxcbiAgICAnQ0FBJzogJ1EnLFxuICAgICdDQUcnOiAnUScsXG4gICAgJ0FBVCc6ICdOJyxcbiAgICAnQUFDJzogJ04nLFxuICAgICdBQUEnOiAnSycsXG4gICAgJ0FBRyc6ICdLJyxcbiAgICAnR0FUJzogJ0QnLFxuICAgICdHQUMnOiAnRCcsXG4gICAgJ0dBQSc6ICdFJyxcbiAgICAnR0FHJzogJ0UnLFxuICAgICdUR1QnOiAnQycsXG4gICAgJ1RHQyc6ICdDJyxcbiAgICAnVEdBJzogJyonLCAgLy8gc3RvcFxuICAgICdUR0cnOiAnVycsXG4gICAgJ0NHVCc6ICdSJyxcbiAgICAnQ0dDJzogJ1InLFxuICAgICdDR0EnOiAnUicsXG4gICAgJ0NHRyc6ICdSJyxcbiAgICAnQUdUJzogJ1MnLFxuICAgICdBR0MnOiAnUycsXG4gICAgJ0FHQSc6ICdSJyxcbiAgICAnQUdHJzogJ1InLFxuICAgICdHR1QnOiAnRycsXG4gICAgJ0dHQyc6ICdHJyxcbiAgICAnR0dBJzogJ0cnLFxuICAgICdHR0cnOiAnRydcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVVybFRvUGFnZShyZWwpIHtcbiAgICByZXR1cm4gbWFrZUVsZW1lbnQoJ2EnLCBudWxsLCB7aHJlZjogcmVsfSkuaHJlZjtcbn1cblxuLy9cbi8vIE1pc3NpbmcgQVBJc1xuLy8gXG5cbmlmICghKCd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlKSkge1xuICAgIFN0cmluZy5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKC9eXFxzKy8sICcnKS5yZXBsYWNlKC9cXHMrJC8sICcnKTtcbiAgICB9O1xufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIHRleHRYSFI6IHRleHRYSFIsXG4gICAgICAgIHJlbGF0aXZlVVJMOiByZWxhdGl2ZVVSTCxcbiAgICAgICAgcmVzb2x2ZVVybFRvUGFnZTogcmVzb2x2ZVVybFRvUGFnZSxcbiAgICAgICAgc2hhbGxvd0NvcHk6IHNoYWxsb3dDb3B5LFxuICAgICAgICBwdXNobzogcHVzaG8sXG4gICAgICAgIHB1c2huZXc6IHB1c2huZXcsXG4gICAgICAgIHB1c2huZXdvOiBwdXNobmV3byxcbiAgICAgICAgYXJyYXlJbmRleE9mOiBhcnJheUluZGV4T2YsXG4gICAgICAgIGFycmF5RXF1YWxzOiBhcnJheUVxdWFscyxcbiAgICAgICAgcGljazogcGljayxcblxuICAgICAgICBtYWtlRWxlbWVudDogbWFrZUVsZW1lbnQsXG4gICAgICAgIG1ha2VFbGVtZW50TlM6IG1ha2VFbGVtZW50TlMsXG4gICAgICAgIHJlbW92ZUNoaWxkcmVuOiByZW1vdmVDaGlsZHJlbixcblxuICAgICAgICBtaW5pSlNPTmlmeTogbWluaUpTT05pZnksXG5cbiAgICAgICAgT2JzZXJ2ZWQ6IE9ic2VydmVkLFxuICAgICAgICBBd2FpdGVkOiBBd2FpdGVkLFxuXG4gICAgICAgIEFNSU5PX0FDSURfVFJBTlNMQVRJT046IEFNSU5PX0FDSURfVFJBTlNMQVRJT05cbiAgICB9XG59XG4iLCIvKiFcbiAqIEBvdmVydmlldyBlczYtcHJvbWlzZSAtIGEgdGlueSBpbXBsZW1lbnRhdGlvbiBvZiBQcm9taXNlcy9BKy5cbiAqIEBjb3B5cmlnaHQgQ29weXJpZ2h0IChjKSAyMDE0IFllaHVkYSBLYXR6LCBUb20gRGFsZSwgU3RlZmFuIFBlbm5lciBhbmQgY29udHJpYnV0b3JzIChDb252ZXJzaW9uIHRvIEVTNiBBUEkgYnkgSmFrZSBBcmNoaWJhbGQpXG4gKiBAbGljZW5zZSAgIExpY2Vuc2VkIHVuZGVyIE1JVCBsaWNlbnNlXG4gKiAgICAgICAgICAgIFNlZSBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vamFrZWFyY2hpYmFsZC9lczYtcHJvbWlzZS9tYXN0ZXIvTElDRU5TRVxuICogQHZlcnNpb24gICAzLjAuMlxuICovXG5cbihmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJG9iamVjdE9yRnVuY3Rpb24oeCkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgeCA9PT0gJ29iamVjdCcgJiYgeCAhPT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ2Z1bmN0aW9uJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzTWF5YmVUaGVuYWJsZSh4KSB7XG4gICAgICByZXR1cm4gdHlwZW9mIHggPT09ICdvYmplY3QnICYmIHggIT09IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXk7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkdXRpbHMkJF9pc0FycmF5ID0gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh4KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSR1dGlscyQkX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzQXJyYXkgPSBsaWIkZXM2JHByb21pc2UkdXRpbHMkJF9pc0FycmF5O1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkbGVuID0gMDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR2ZXJ0eE5leHQ7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRjdXN0b21TY2hlZHVsZXJGbjtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcCA9IGZ1bmN0aW9uIGFzYXAoY2FsbGJhY2ssIGFyZykge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2xpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW5dID0gY2FsbGJhY2s7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiArIDFdID0gYXJnO1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbiArPSAyO1xuICAgICAgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gPT09IDIpIHtcbiAgICAgICAgLy8gSWYgbGVuIGlzIDIsIHRoYXQgbWVhbnMgdGhhdCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGFzeW5jIGZsdXNoLlxuICAgICAgICAvLyBJZiBhZGRpdGlvbmFsIGNhbGxiYWNrcyBhcmUgcXVldWVkIGJlZm9yZSB0aGUgcXVldWUgaXMgZmx1c2hlZCwgdGhleVxuICAgICAgICAvLyB3aWxsIGJlIHByb2Nlc3NlZCBieSB0aGlzIGZsdXNoIHRoYXQgd2UgYXJlIHNjaGVkdWxpbmcuXG4gICAgICAgIGlmIChsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm4pIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm4obGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHNldFNjaGVkdWxlcihzY2hlZHVsZUZuKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkY3VzdG9tU2NoZWR1bGVyRm4gPSBzY2hlZHVsZUZuO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzZXRBc2FwKGFzYXBGbikge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJGFzYXAgPSBhc2FwRm47XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRicm93c2VyV2luZG93ID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSA/IHdpbmRvdyA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJHbG9iYWwgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3NlcldpbmRvdyB8fCB7fTtcbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJHbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBsaWIkZXM2JHByb21pc2UkYXNhcCQkYnJvd3Nlckdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIHZhciBsaWIkZXM2JHByb21pc2UkYXNhcCQkaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIHt9LnRvU3RyaW5nLmNhbGwocHJvY2VzcykgPT09ICdbb2JqZWN0IHByb2Nlc3NdJztcblxuICAgIC8vIHRlc3QgZm9yIHdlYiB3b3JrZXIgYnV0IG5vdCBpbiBJRTEwXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRpc1dvcmtlciA9IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIHR5cGVvZiBpbXBvcnRTY3JpcHRzICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgdHlwZW9mIE1lc3NhZ2VDaGFubmVsICE9PSAndW5kZWZpbmVkJztcblxuICAgIC8vIG5vZGVcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTmV4dFRpY2soKSB7XG4gICAgICAvLyBub2RlIHZlcnNpb24gMC4xMC54IGRpc3BsYXlzIGEgZGVwcmVjYXRpb24gd2FybmluZyB3aGVuIG5leHRUaWNrIGlzIHVzZWQgcmVjdXJzaXZlbHlcbiAgICAgIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vY3Vqb2pzL3doZW4vaXNzdWVzLzQxMCBmb3IgZGV0YWlsc1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHZlcnR4XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZVZlcnR4VGltZXIoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR2ZXJ0eE5leHQobGliJGVzNiRwcm9taXNlJGFzYXAkJGZsdXNoKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZU11dGF0aW9uT2JzZXJ2ZXIoKSB7XG4gICAgICB2YXIgaXRlcmF0aW9ucyA9IDA7XG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgbGliJGVzNiRwcm9taXNlJGFzYXAkJEJyb3dzZXJNdXRhdGlvbk9ic2VydmVyKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCk7XG4gICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgIG9ic2VydmVyLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIG5vZGUuZGF0YSA9IChpdGVyYXRpb25zID0gKytpdGVyYXRpb25zICUgMik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlYiB3b3JrZXJcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTWVzc2FnZUNoYW5uZWwoKSB7XG4gICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2g7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKDApO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlU2V0VGltZW91dCgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2V0VGltZW91dChsaWIkZXM2JHByb21pc2UkYXNhcCQkZmx1c2gsIDEpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlID0gbmV3IEFycmF5KDEwMDApO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRmbHVzaCgpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGliJGVzNiRwcm9taXNlJGFzYXAkJGxlbjsgaSs9Mikge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbaV07XG4gICAgICAgIHZhciBhcmcgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkcXVldWVbaSsxXTtcblxuICAgICAgICBjYWxsYmFjayhhcmcpO1xuXG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRxdWV1ZVtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHF1ZXVlW2krMV0gPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRsZW4gPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhdHRlbXB0VmVydHgoKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgciA9IHJlcXVpcmU7XG4gICAgICAgIHZhciB2ZXJ0eCA9IHIoJ3ZlcnR4Jyk7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCR2ZXJ0eE5leHQgPSB2ZXJ0eC5ydW5Pbkxvb3AgfHwgdmVydHgucnVuT25Db250ZXh0O1xuICAgICAgICByZXR1cm4gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZVZlcnR4VGltZXIoKTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICByZXR1cm4gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZVNldFRpbWVvdXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2g7XG4gICAgLy8gRGVjaWRlIHdoYXQgYXN5bmMgbWV0aG9kIHRvIHVzZSB0byB0cmlnZ2VyaW5nIHByb2Nlc3Npbmcgb2YgcXVldWVkIGNhbGxiYWNrczpcbiAgICBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJGlzTm9kZSkge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTmV4dFRpY2soKTtcbiAgICB9IGVsc2UgaWYgKGxpYiRlczYkcHJvbWlzZSRhc2FwJCRCcm93c2VyTXV0YXRpb25PYnNlcnZlcikge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkdXNlTXV0YXRpb25PYnNlcnZlcigpO1xuICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJGlzV29ya2VyKSB7XG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2NoZWR1bGVGbHVzaCA9IGxpYiRlczYkcHJvbWlzZSRhc2FwJCR1c2VNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJGFzYXAkJGJyb3dzZXJXaW5kb3cgPT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgbGliJGVzNiRwcm9taXNlJGFzYXAkJHNjaGVkdWxlRmx1c2ggPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXR0ZW1wdFZlcnR4KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRzY2hlZHVsZUZsdXNoID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHVzZVNldFRpbWVvdXQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKCkge31cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HICAgPSB2b2lkIDA7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRCA9IDE7XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEICA9IDI7XG5cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IgPSBuZXcgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRXJyb3JPYmplY3QoKTtcblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHNlbGZGdWxmaWxsbWVudCgpIHtcbiAgICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCByZXNvbHZlIGEgcHJvbWlzZSB3aXRoIGl0c2VsZlwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRjYW5ub3RSZXR1cm5Pd24oKSB7XG4gICAgICByZXR1cm4gbmV3IFR5cGVFcnJvcignQSBwcm9taXNlcyBjYWxsYmFjayBjYW5ub3QgcmV0dXJuIHRoYXQgc2FtZSBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGdldFRoZW4ocHJvbWlzZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbjtcbiAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IuZXJyb3IgPSBlcnJvcjtcbiAgICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEdFVF9USEVOX0VSUk9SO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHRyeVRoZW4odGhlbiwgdmFsdWUsIGZ1bGZpbGxtZW50SGFuZGxlciwgcmVqZWN0aW9uSGFuZGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpO1xuICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGhhbmRsZUZvcmVpZ25UaGVuYWJsZShwcm9taXNlLCB0aGVuYWJsZSwgdGhlbikge1xuICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwKGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICAgICAgdmFyIHNlYWxlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3IgPSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCR0cnlUaGVuKHRoZW4sIHRoZW5hYmxlLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGlmIChzZWFsZWQpIHsgcmV0dXJuOyB9XG4gICAgICAgICAgc2VhbGVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAodGhlbmFibGUgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICBpZiAoc2VhbGVkKSB7IHJldHVybjsgfVxuICAgICAgICAgIHNlYWxlZCA9IHRydWU7XG5cbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgICAgfSwgJ1NldHRsZTogJyArIChwcm9taXNlLl9sYWJlbCB8fCAnIHVua25vd24gcHJvbWlzZScpKTtcblxuICAgICAgICBpZiAoIXNlYWxlZCAmJiBlcnJvcikge1xuICAgICAgICAgIHNlYWxlZCA9IHRydWU7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSwgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlT3duVGhlbmFibGUocHJvbWlzZSwgdGhlbmFibGUpIHtcbiAgICAgIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHRoZW5hYmxlLl9yZXN1bHQpO1xuICAgICAgfSBlbHNlIGlmICh0aGVuYWJsZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB0aGVuYWJsZS5fcmVzdWx0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHN1YnNjcmliZSh0aGVuYWJsZSwgdW5kZWZpbmVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlTWF5YmVUaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKSB7XG4gICAgICBpZiAobWF5YmVUaGVuYWJsZS5jb25zdHJ1Y3RvciA9PT0gcHJvbWlzZS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVPd25UaGVuYWJsZShwcm9taXNlLCBtYXliZVRoZW5hYmxlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0aGVuID0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZ2V0VGhlbihtYXliZVRoZW5hYmxlKTtcblxuICAgICAgICBpZiAodGhlbiA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkR0VUX1RIRU5fRVJST1IuZXJyb3IpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0Z1bmN0aW9uKHRoZW4pKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaGFuZGxlRm9yZWlnblRoZW5hYmxlKHByb21pc2UsIG1heWJlVGhlbmFibGUsIHRoZW4pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgbWF5YmVUaGVuYWJsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKSB7XG4gICAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHNlbGZGdWxmaWxsbWVudCgpKTtcbiAgICAgIH0gZWxzZSBpZiAobGliJGVzNiRwcm9taXNlJHV0aWxzJCRvYmplY3RPckZ1bmN0aW9uKHZhbHVlKSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRoYW5kbGVNYXliZVRoZW5hYmxlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2hSZWplY3Rpb24ocHJvbWlzZSkge1xuICAgICAgaWYgKHByb21pc2UuX29uZXJyb3IpIHtcbiAgICAgICAgcHJvbWlzZS5fb25lcnJvcihwcm9taXNlLl9yZXN1bHQpO1xuICAgICAgfVxuXG4gICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoKHByb21pc2UpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwocHJvbWlzZSwgdmFsdWUpIHtcbiAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORykgeyByZXR1cm47IH1cblxuICAgICAgcHJvbWlzZS5fcmVzdWx0ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zdGF0ZSA9IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRDtcblxuICAgICAgaWYgKHByb21pc2UuX3N1YnNjcmliZXJzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoLCBwcm9taXNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKSB7XG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgIT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHsgcmV0dXJuOyB9XG4gICAgICBwcm9taXNlLl9zdGF0ZSA9IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEO1xuICAgICAgcHJvbWlzZS5fcmVzdWx0ID0gcmVhc29uO1xuXG4gICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcChsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRwdWJsaXNoUmVqZWN0aW9uLCBwcm9taXNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgICAgIHZhciBzdWJzY3JpYmVycyA9IHBhcmVudC5fc3Vic2NyaWJlcnM7XG4gICAgICB2YXIgbGVuZ3RoID0gc3Vic2NyaWJlcnMubGVuZ3RoO1xuXG4gICAgICBwYXJlbnQuX29uZXJyb3IgPSBudWxsO1xuXG4gICAgICBzdWJzY3JpYmVyc1tsZW5ndGhdID0gY2hpbGQ7XG4gICAgICBzdWJzY3JpYmVyc1tsZW5ndGggKyBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRURdID0gb25GdWxmaWxsbWVudDtcbiAgICAgIHN1YnNjcmliZXJzW2xlbmd0aCArIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEXSAgPSBvblJlamVjdGlvbjtcblxuICAgICAgaWYgKGxlbmd0aCA9PT0gMCAmJiBwYXJlbnQuX3N0YXRlKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSRhc2FwJCRhc2FwKGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHB1Ymxpc2gsIHBhcmVudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcHVibGlzaChwcm9taXNlKSB7XG4gICAgICB2YXIgc3Vic2NyaWJlcnMgPSBwcm9taXNlLl9zdWJzY3JpYmVycztcbiAgICAgIHZhciBzZXR0bGVkID0gcHJvbWlzZS5fc3RhdGU7XG5cbiAgICAgIGlmIChzdWJzY3JpYmVycy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICAgIHZhciBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCA9IHByb21pc2UuX3Jlc3VsdDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWJzY3JpYmVycy5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBjaGlsZCA9IHN1YnNjcmliZXJzW2ldO1xuICAgICAgICBjYWxsYmFjayA9IHN1YnNjcmliZXJzW2kgKyBzZXR0bGVkXTtcblxuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBjaGlsZCwgY2FsbGJhY2ssIGRldGFpbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2soZGV0YWlsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBwcm9taXNlLl9zdWJzY3JpYmVycy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEVycm9yT2JqZWN0KCkge1xuICAgICAgdGhpcy5lcnJvciA9IG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUiA9IG5ldyBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRFcnJvck9iamVjdCgpO1xuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkdHJ5Q2F0Y2goY2FsbGJhY2ssIGRldGFpbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGRldGFpbCk7XG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkVFJZX0NBVENIX0VSUk9SLmVycm9yID0gZTtcbiAgICAgICAgcmV0dXJuIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFRSWV9DQVRDSF9FUlJPUjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpbnZva2VDYWxsYmFjayhzZXR0bGVkLCBwcm9taXNlLCBjYWxsYmFjaywgZGV0YWlsKSB7XG4gICAgICB2YXIgaGFzQ2FsbGJhY2sgPSBsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzRnVuY3Rpb24oY2FsbGJhY2spLFxuICAgICAgICAgIHZhbHVlLCBlcnJvciwgc3VjY2VlZGVkLCBmYWlsZWQ7XG5cbiAgICAgIGlmIChoYXNDYWxsYmFjaykge1xuICAgICAgICB2YWx1ZSA9IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHRyeUNhdGNoKGNhbGxiYWNrLCBkZXRhaWwpO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkVFJZX0NBVENIX0VSUk9SKSB7XG4gICAgICAgICAgZmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICBlcnJvciA9IHZhbHVlLmVycm9yO1xuICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWNjZWVkZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGNhbm5vdFJldHVybk93bigpKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSBkZXRhaWw7XG4gICAgICAgIHN1Y2NlZWRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9taXNlLl9zdGF0ZSAhPT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORykge1xuICAgICAgICAvLyBub29wXG4gICAgICB9IGVsc2UgaWYgKGhhc0NhbGxiYWNrICYmIHN1Y2NlZWRlZCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoZmFpbGVkKSB7XG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCBlcnJvcik7XG4gICAgICB9IGVsc2UgaWYgKHNldHRsZWQgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJEZVTEZJTExFRCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoc2V0dGxlZCA9PT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUkVKRUNURUQpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRpbml0aWFsaXplUHJvbWlzZShwcm9taXNlLCByZXNvbHZlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVzb2x2ZXIoZnVuY3Rpb24gcmVzb2x2ZVByb21pc2UodmFsdWUpe1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlc29sdmUocHJvbWlzZSwgdmFsdWUpO1xuICAgICAgICB9LCBmdW5jdGlvbiByZWplY3RQcm9taXNlKHJlYXNvbikge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IoQ29uc3RydWN0b3IsIGlucHV0KSB7XG4gICAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG5cbiAgICAgIGVudW1lcmF0b3IuX2luc3RhbmNlQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICAgIGVudW1lcmF0b3IucHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcblxuICAgICAgaWYgKGVudW1lcmF0b3IuX3ZhbGlkYXRlSW5wdXQoaW5wdXQpKSB7XG4gICAgICAgIGVudW1lcmF0b3IuX2lucHV0ICAgICA9IGlucHV0O1xuICAgICAgICBlbnVtZXJhdG9yLmxlbmd0aCAgICAgPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgIGVudW1lcmF0b3IuX3JlbWFpbmluZyA9IGlucHV0Lmxlbmd0aDtcblxuICAgICAgICBlbnVtZXJhdG9yLl9pbml0KCk7XG5cbiAgICAgICAgaWYgKGVudW1lcmF0b3IubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkZnVsZmlsbChlbnVtZXJhdG9yLnByb21pc2UsIGVudW1lcmF0b3IuX3Jlc3VsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW51bWVyYXRvci5sZW5ndGggPSBlbnVtZXJhdG9yLmxlbmd0aCB8fCAwO1xuICAgICAgICAgIGVudW1lcmF0b3IuX2VudW1lcmF0ZSgpO1xuICAgICAgICAgIGlmIChlbnVtZXJhdG9yLl9yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGZ1bGZpbGwoZW51bWVyYXRvci5wcm9taXNlLCBlbnVtZXJhdG9yLl9yZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KGVudW1lcmF0b3IucHJvbWlzZSwgZW51bWVyYXRvci5fdmFsaWRhdGlvbkVycm9yKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVJbnB1dCA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICByZXR1cm4gbGliJGVzNiRwcm9taXNlJHV0aWxzJCRpc0FycmF5KGlucHV0KTtcbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl92YWxpZGF0aW9uRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoJ0FycmF5IE1ldGhvZHMgbXVzdCBiZSBwcm92aWRlZCBhbiBBcnJheScpO1xuICAgIH07XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuX3Jlc3VsdCA9IG5ldyBBcnJheSh0aGlzLmxlbmd0aCk7XG4gICAgfTtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yO1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9lbnVtZXJhdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcblxuICAgICAgdmFyIGxlbmd0aCAgPSBlbnVtZXJhdG9yLmxlbmd0aDtcbiAgICAgIHZhciBwcm9taXNlID0gZW51bWVyYXRvci5wcm9taXNlO1xuICAgICAgdmFyIGlucHV0ICAgPSBlbnVtZXJhdG9yLl9pbnB1dDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IHByb21pc2UuX3N0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBlbnVtZXJhdG9yLl9lYWNoRW50cnkoaW5wdXRbaV0sIGkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBsaWIkZXM2JHByb21pc2UkZW51bWVyYXRvciQkRW51bWVyYXRvci5wcm90b3R5cGUuX2VhY2hFbnRyeSA9IGZ1bmN0aW9uKGVudHJ5LCBpKSB7XG4gICAgICB2YXIgZW51bWVyYXRvciA9IHRoaXM7XG4gICAgICB2YXIgYyA9IGVudW1lcmF0b3IuX2luc3RhbmNlQ29uc3RydWN0b3I7XG5cbiAgICAgIGlmIChsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzTWF5YmVUaGVuYWJsZShlbnRyeSkpIHtcbiAgICAgICAgaWYgKGVudHJ5LmNvbnN0cnVjdG9yID09PSBjICYmIGVudHJ5Ll9zdGF0ZSAhPT0gbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkUEVORElORykge1xuICAgICAgICAgIGVudHJ5Ll9vbmVycm9yID0gbnVsbDtcbiAgICAgICAgICBlbnVtZXJhdG9yLl9zZXR0bGVkQXQoZW50cnkuX3N0YXRlLCBpLCBlbnRyeS5fcmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbnVtZXJhdG9yLl93aWxsU2V0dGxlQXQoYy5yZXNvbHZlKGVudHJ5KSwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVudW1lcmF0b3IuX3JlbWFpbmluZy0tO1xuICAgICAgICBlbnVtZXJhdG9yLl9yZXN1bHRbaV0gPSBlbnRyeTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbGliJGVzNiRwcm9taXNlJGVudW1lcmF0b3IkJEVudW1lcmF0b3IucHJvdG90eXBlLl9zZXR0bGVkQXQgPSBmdW5jdGlvbihzdGF0ZSwgaSwgdmFsdWUpIHtcbiAgICAgIHZhciBlbnVtZXJhdG9yID0gdGhpcztcbiAgICAgIHZhciBwcm9taXNlID0gZW51bWVyYXRvci5wcm9taXNlO1xuXG4gICAgICBpZiAocHJvbWlzZS5fc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFBFTkRJTkcpIHtcbiAgICAgICAgZW51bWVyYXRvci5fcmVtYWluaW5nLS07XG5cbiAgICAgICAgaWYgKHN0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRSRUpFQ1RFRCkge1xuICAgICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW51bWVyYXRvci5fcmVzdWx0W2ldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGVudW1lcmF0b3IuX3JlbWFpbmluZyA9PT0gMCkge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRmdWxmaWxsKHByb21pc2UsIGVudW1lcmF0b3IuX3Jlc3VsdCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRFbnVtZXJhdG9yLnByb3RvdHlwZS5fd2lsbFNldHRsZUF0ID0gZnVuY3Rpb24ocHJvbWlzZSwgaSkge1xuICAgICAgdmFyIGVudW1lcmF0b3IgPSB0aGlzO1xuXG4gICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzdWJzY3JpYmUocHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBlbnVtZXJhdG9yLl9zZXR0bGVkQXQobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkRlVMRklMTEVELCBpLCB2YWx1ZSk7XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgZW51bWVyYXRvci5fc2V0dGxlZEF0KGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVELCBpLCByZWFzb24pO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRhbGwkJGFsbChlbnRyaWVzKSB7XG4gICAgICByZXR1cm4gbmV3IGxpYiRlczYkcHJvbWlzZSRlbnVtZXJhdG9yJCRkZWZhdWx0KHRoaXMsIGVudHJpZXMpLnByb21pc2U7XG4gICAgfVxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRhbGwkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRhbGwkJGFsbDtcbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyYWNlJCRyYWNlKGVudHJpZXMpIHtcbiAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcblxuICAgICAgaWYgKCFsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzQXJyYXkoZW50cmllcykpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVqZWN0KHByb21pc2UsIG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYW4gYXJyYXkgdG8gcmFjZS4nKSk7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbGVuZ3RoID0gZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIGZ1bmN0aW9uIG9uRnVsZmlsbG1lbnQodmFsdWUpIHtcbiAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0aW9uKHJlYXNvbikge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZWplY3QocHJvbWlzZSwgcmVhc29uKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDA7IHByb21pc2UuX3N0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRQRU5ESU5HICYmIGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzdWJzY3JpYmUoQ29uc3RydWN0b3IucmVzb2x2ZShlbnRyaWVzW2ldKSwgdW5kZWZpbmVkLCBvbkZ1bGZpbGxtZW50LCBvblJlamVjdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmFjZSQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJhY2UkJHJhY2U7XG4gICAgZnVuY3Rpb24gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVzb2x2ZSQkcmVzb2x2ZShvYmplY3QpIHtcbiAgICAgIC8qanNoaW50IHZhbGlkdGhpczp0cnVlICovXG4gICAgICB2YXIgQ29uc3RydWN0b3IgPSB0aGlzO1xuXG4gICAgICBpZiAob2JqZWN0ICYmIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gQ29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb21pc2UgPSBuZXcgQ29uc3RydWN0b3IobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCk7XG4gICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRyZXNvbHZlKHByb21pc2UsIG9iamVjdCk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdmFyIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlc29sdmUkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZXNvbHZlJCRyZXNvbHZlO1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlamVjdCQkcmVqZWN0KHJlYXNvbikge1xuICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgIHZhciBDb25zdHJ1Y3RvciA9IHRoaXM7XG4gICAgICB2YXIgcHJvbWlzZSA9IG5ldyBDb25zdHJ1Y3RvcihsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRub29wKTtcbiAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZWplY3QkJGRlZmF1bHQgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRyZWplY3QkJHJlamVjdDtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkY291bnRlciA9IDA7XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNSZXNvbHZlcigpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1lvdSBtdXN0IHBhc3MgYSByZXNvbHZlciBmdW5jdGlvbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlIHByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNOZXcoKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRmFpbGVkIHRvIGNvbnN0cnVjdCAnUHJvbWlzZSc6IFBsZWFzZSB1c2UgdGhlICduZXcnIG9wZXJhdG9yLCB0aGlzIG9iamVjdCBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24uXCIpO1xuICAgIH1cblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkZGVmYXVsdCA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlO1xuICAgIC8qKlxuICAgICAgUHJvbWlzZSBvYmplY3RzIHJlcHJlc2VudCB0aGUgZXZlbnR1YWwgcmVzdWx0IG9mIGFuIGFzeW5jaHJvbm91cyBvcGVyYXRpb24uIFRoZVxuICAgICAgcHJpbWFyeSB3YXkgb2YgaW50ZXJhY3Rpbmcgd2l0aCBhIHByb21pc2UgaXMgdGhyb3VnaCBpdHMgYHRoZW5gIG1ldGhvZCwgd2hpY2hcbiAgICAgIHJlZ2lzdGVycyBjYWxsYmFja3MgdG8gcmVjZWl2ZSBlaXRoZXIgYSBwcm9taXNlJ3MgZXZlbnR1YWwgdmFsdWUgb3IgdGhlIHJlYXNvblxuICAgICAgd2h5IHRoZSBwcm9taXNlIGNhbm5vdCBiZSBmdWxmaWxsZWQuXG5cbiAgICAgIFRlcm1pbm9sb2d5XG4gICAgICAtLS0tLS0tLS0tLVxuXG4gICAgICAtIGBwcm9taXNlYCBpcyBhbiBvYmplY3Qgb3IgZnVuY3Rpb24gd2l0aCBhIGB0aGVuYCBtZXRob2Qgd2hvc2UgYmVoYXZpb3IgY29uZm9ybXMgdG8gdGhpcyBzcGVjaWZpY2F0aW9uLlxuICAgICAgLSBgdGhlbmFibGVgIGlzIGFuIG9iamVjdCBvciBmdW5jdGlvbiB0aGF0IGRlZmluZXMgYSBgdGhlbmAgbWV0aG9kLlxuICAgICAgLSBgdmFsdWVgIGlzIGFueSBsZWdhbCBKYXZhU2NyaXB0IHZhbHVlIChpbmNsdWRpbmcgdW5kZWZpbmVkLCBhIHRoZW5hYmxlLCBvciBhIHByb21pc2UpLlxuICAgICAgLSBgZXhjZXB0aW9uYCBpcyBhIHZhbHVlIHRoYXQgaXMgdGhyb3duIHVzaW5nIHRoZSB0aHJvdyBzdGF0ZW1lbnQuXG4gICAgICAtIGByZWFzb25gIGlzIGEgdmFsdWUgdGhhdCBpbmRpY2F0ZXMgd2h5IGEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQuXG4gICAgICAtIGBzZXR0bGVkYCB0aGUgZmluYWwgcmVzdGluZyBzdGF0ZSBvZiBhIHByb21pc2UsIGZ1bGZpbGxlZCBvciByZWplY3RlZC5cblxuICAgICAgQSBwcm9taXNlIGNhbiBiZSBpbiBvbmUgb2YgdGhyZWUgc3RhdGVzOiBwZW5kaW5nLCBmdWxmaWxsZWQsIG9yIHJlamVjdGVkLlxuXG4gICAgICBQcm9taXNlcyB0aGF0IGFyZSBmdWxmaWxsZWQgaGF2ZSBhIGZ1bGZpbGxtZW50IHZhbHVlIGFuZCBhcmUgaW4gdGhlIGZ1bGZpbGxlZFxuICAgICAgc3RhdGUuICBQcm9taXNlcyB0aGF0IGFyZSByZWplY3RlZCBoYXZlIGEgcmVqZWN0aW9uIHJlYXNvbiBhbmQgYXJlIGluIHRoZVxuICAgICAgcmVqZWN0ZWQgc3RhdGUuICBBIGZ1bGZpbGxtZW50IHZhbHVlIGlzIG5ldmVyIGEgdGhlbmFibGUuXG5cbiAgICAgIFByb21pc2VzIGNhbiBhbHNvIGJlIHNhaWQgdG8gKnJlc29sdmUqIGEgdmFsdWUuICBJZiB0aGlzIHZhbHVlIGlzIGFsc28gYVxuICAgICAgcHJvbWlzZSwgdGhlbiB0aGUgb3JpZ2luYWwgcHJvbWlzZSdzIHNldHRsZWQgc3RhdGUgd2lsbCBtYXRjaCB0aGUgdmFsdWUnc1xuICAgICAgc2V0dGxlZCBzdGF0ZS4gIFNvIGEgcHJvbWlzZSB0aGF0ICpyZXNvbHZlcyogYSBwcm9taXNlIHRoYXQgcmVqZWN0cyB3aWxsXG4gICAgICBpdHNlbGYgcmVqZWN0LCBhbmQgYSBwcm9taXNlIHRoYXQgKnJlc29sdmVzKiBhIHByb21pc2UgdGhhdCBmdWxmaWxscyB3aWxsXG4gICAgICBpdHNlbGYgZnVsZmlsbC5cblxuXG4gICAgICBCYXNpYyBVc2FnZTpcbiAgICAgIC0tLS0tLS0tLS0tLVxuXG4gICAgICBgYGBqc1xuICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgLy8gb24gc3VjY2Vzc1xuICAgICAgICByZXNvbHZlKHZhbHVlKTtcblxuICAgICAgICAvLyBvbiBmYWlsdXJlXG4gICAgICAgIHJlamVjdChyZWFzb24pO1xuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBvbiBmdWxmaWxsbWVudFxuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKSB7XG4gICAgICAgIC8vIG9uIHJlamVjdGlvblxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQWR2YW5jZWQgVXNhZ2U6XG4gICAgICAtLS0tLS0tLS0tLS0tLS1cblxuICAgICAgUHJvbWlzZXMgc2hpbmUgd2hlbiBhYnN0cmFjdGluZyBhd2F5IGFzeW5jaHJvbm91cyBpbnRlcmFjdGlvbnMgc3VjaCBhc1xuICAgICAgYFhNTEh0dHBSZXF1ZXN0YHMuXG5cbiAgICAgIGBgYGpzXG4gICAgICBmdW5jdGlvbiBnZXRKU09OKHVybCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KXtcbiAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAgICAgICB4aHIub3BlbignR0VUJywgdXJsKTtcbiAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gaGFuZGxlcjtcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICAgIHhoci5zZW5kKCk7XG5cbiAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gdGhpcy5ET05FKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWplY3QobmV3IEVycm9yKCdnZXRKU09OOiBgJyArIHVybCArICdgIGZhaWxlZCB3aXRoIHN0YXR1czogWycgKyB0aGlzLnN0YXR1cyArICddJykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGdldEpTT04oJy9wb3N0cy5qc29uJykudGhlbihmdW5jdGlvbihqc29uKSB7XG4gICAgICAgIC8vIG9uIGZ1bGZpbGxtZW50XG4gICAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgICAgLy8gb24gcmVqZWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBVbmxpa2UgY2FsbGJhY2tzLCBwcm9taXNlcyBhcmUgZ3JlYXQgY29tcG9zYWJsZSBwcmltaXRpdmVzLlxuXG4gICAgICBgYGBqc1xuICAgICAgUHJvbWlzZS5hbGwoW1xuICAgICAgICBnZXRKU09OKCcvcG9zdHMnKSxcbiAgICAgICAgZ2V0SlNPTignL2NvbW1lbnRzJylcbiAgICAgIF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcbiAgICAgICAgdmFsdWVzWzBdIC8vID0+IHBvc3RzSlNPTlxuICAgICAgICB2YWx1ZXNbMV0gLy8gPT4gY29tbWVudHNKU09OXG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEBjbGFzcyBQcm9taXNlXG4gICAgICBAcGFyYW0ge2Z1bmN0aW9ufSByZXNvbHZlclxuICAgICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgICAgQGNvbnN0cnVjdG9yXG4gICAgKi9cbiAgICBmdW5jdGlvbiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZShyZXNvbHZlcikge1xuICAgICAgdGhpcy5faWQgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkY291bnRlcisrO1xuICAgICAgdGhpcy5fc3RhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9yZXN1bHQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLl9zdWJzY3JpYmVycyA9IFtdO1xuXG4gICAgICBpZiAobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCAhPT0gcmVzb2x2ZXIpIHtcbiAgICAgICAgaWYgKCFsaWIkZXM2JHByb21pc2UkdXRpbHMkJGlzRnVuY3Rpb24ocmVzb2x2ZXIpKSB7XG4gICAgICAgICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJG5lZWRzUmVzb2x2ZXIoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZSkpIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkbmVlZHNOZXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJGluaXRpYWxpemVQcm9taXNlKHRoaXMsIHJlc29sdmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZS5hbGwgPSBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSRhbGwkJGRlZmF1bHQ7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UucmFjZSA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJhY2UkJGRlZmF1bHQ7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UucmVzb2x2ZSA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJHJlc29sdmUkJGRlZmF1bHQ7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UucmVqZWN0ID0gbGliJGVzNiRwcm9taXNlJHByb21pc2UkcmVqZWN0JCRkZWZhdWx0O1xuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLl9zZXRTY2hlZHVsZXIgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkc2V0U2NoZWR1bGVyO1xuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLl9zZXRBc2FwID0gbGliJGVzNiRwcm9taXNlJGFzYXAkJHNldEFzYXA7XG4gICAgbGliJGVzNiRwcm9taXNlJHByb21pc2UkJFByb21pc2UuX2FzYXAgPSBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcDtcblxuICAgIGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRQcm9taXNlLnByb3RvdHlwZSA9IHtcbiAgICAgIGNvbnN0cnVjdG9yOiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkUHJvbWlzZSxcblxuICAgIC8qKlxuICAgICAgVGhlIHByaW1hcnkgd2F5IG9mIGludGVyYWN0aW5nIHdpdGggYSBwcm9taXNlIGlzIHRocm91Z2ggaXRzIGB0aGVuYCBtZXRob2QsXG4gICAgICB3aGljaCByZWdpc3RlcnMgY2FsbGJhY2tzIHRvIHJlY2VpdmUgZWl0aGVyIGEgcHJvbWlzZSdzIGV2ZW50dWFsIHZhbHVlIG9yIHRoZVxuICAgICAgcmVhc29uIHdoeSB0aGUgcHJvbWlzZSBjYW5ub3QgYmUgZnVsZmlsbGVkLlxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFVzZXIoKS50aGVuKGZ1bmN0aW9uKHVzZXIpe1xuICAgICAgICAvLyB1c2VyIGlzIGF2YWlsYWJsZVxuICAgICAgfSwgZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gdXNlciBpcyB1bmF2YWlsYWJsZSwgYW5kIHlvdSBhcmUgZ2l2ZW4gdGhlIHJlYXNvbiB3aHlcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIENoYWluaW5nXG4gICAgICAtLS0tLS0tLVxuXG4gICAgICBUaGUgcmV0dXJuIHZhbHVlIG9mIGB0aGVuYCBpcyBpdHNlbGYgYSBwcm9taXNlLiAgVGhpcyBzZWNvbmQsICdkb3duc3RyZWFtJ1xuICAgICAgcHJvbWlzZSBpcyByZXNvbHZlZCB3aXRoIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIGZpcnN0IHByb21pc2UncyBmdWxmaWxsbWVudFxuICAgICAgb3IgcmVqZWN0aW9uIGhhbmRsZXIsIG9yIHJlamVjdGVkIGlmIHRoZSBoYW5kbGVyIHRocm93cyBhbiBleGNlcHRpb24uXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgcmV0dXJuIHVzZXIubmFtZTtcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgcmV0dXJuICdkZWZhdWx0IG5hbWUnO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAodXNlck5hbWUpIHtcbiAgICAgICAgLy8gSWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGB1c2VyTmFtZWAgd2lsbCBiZSB0aGUgdXNlcidzIG5hbWUsIG90aGVyd2lzZSBpdFxuICAgICAgICAvLyB3aWxsIGJlIGAnZGVmYXVsdCBuYW1lJ2BcbiAgICAgIH0pO1xuXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1c2VyLCBidXQgc3RpbGwgdW5oYXBweScpO1xuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BmaW5kVXNlcmAgcmVqZWN0ZWQgYW5kIHdlJ3JlIHVuaGFwcHknKTtcbiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIC8vIG5ldmVyIHJlYWNoZWRcbiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgLy8gaWYgYGZpbmRVc2VyYCBmdWxmaWxsZWQsIGByZWFzb25gIHdpbGwgYmUgJ0ZvdW5kIHVzZXIsIGJ1dCBzdGlsbCB1bmhhcHB5Jy5cbiAgICAgICAgLy8gSWYgYGZpbmRVc2VyYCByZWplY3RlZCwgYHJlYXNvbmAgd2lsbCBiZSAnYGZpbmRVc2VyYCByZWplY3RlZCBhbmQgd2UncmUgdW5oYXBweScuXG4gICAgICB9KTtcbiAgICAgIGBgYFxuICAgICAgSWYgdGhlIGRvd25zdHJlYW0gcHJvbWlzZSBkb2VzIG5vdCBzcGVjaWZ5IGEgcmVqZWN0aW9uIGhhbmRsZXIsIHJlamVjdGlvbiByZWFzb25zIHdpbGwgYmUgcHJvcGFnYXRlZCBmdXJ0aGVyIGRvd25zdHJlYW0uXG5cbiAgICAgIGBgYGpzXG4gICAgICBmaW5kVXNlcigpLnRoZW4oZnVuY3Rpb24gKHVzZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFBlZGFnb2dpY2FsRXhjZXB0aW9uKCdVcHN0cmVhbSBlcnJvcicpO1xuICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgICAgfSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgLy8gbmV2ZXIgcmVhY2hlZFxuICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAvLyBUaGUgYFBlZGdhZ29jaWFsRXhjZXB0aW9uYCBpcyBwcm9wYWdhdGVkIGFsbCB0aGUgd2F5IGRvd24gdG8gaGVyZVxuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQXNzaW1pbGF0aW9uXG4gICAgICAtLS0tLS0tLS0tLS1cblxuICAgICAgU29tZXRpbWVzIHRoZSB2YWx1ZSB5b3Ugd2FudCB0byBwcm9wYWdhdGUgdG8gYSBkb3duc3RyZWFtIHByb21pc2UgY2FuIG9ubHkgYmVcbiAgICAgIHJldHJpZXZlZCBhc3luY2hyb25vdXNseS4gVGhpcyBjYW4gYmUgYWNoaWV2ZWQgYnkgcmV0dXJuaW5nIGEgcHJvbWlzZSBpbiB0aGVcbiAgICAgIGZ1bGZpbGxtZW50IG9yIHJlamVjdGlvbiBoYW5kbGVyLiBUaGUgZG93bnN0cmVhbSBwcm9taXNlIHdpbGwgdGhlbiBiZSBwZW5kaW5nXG4gICAgICB1bnRpbCB0aGUgcmV0dXJuZWQgcHJvbWlzZSBpcyBzZXR0bGVkLiBUaGlzIGlzIGNhbGxlZCAqYXNzaW1pbGF0aW9uKi5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgICAvLyBUaGUgdXNlcidzIGNvbW1lbnRzIGFyZSBub3cgYXZhaWxhYmxlXG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBJZiB0aGUgYXNzaW1saWF0ZWQgcHJvbWlzZSByZWplY3RzLCB0aGVuIHRoZSBkb3duc3RyZWFtIHByb21pc2Ugd2lsbCBhbHNvIHJlamVjdC5cblxuICAgICAgYGBganNcbiAgICAgIGZpbmRVc2VyKCkudGhlbihmdW5jdGlvbiAodXNlcikge1xuICAgICAgICByZXR1cm4gZmluZENvbW1lbnRzQnlBdXRob3IodXNlcik7XG4gICAgICB9KS50aGVuKGZ1bmN0aW9uIChjb21tZW50cykge1xuICAgICAgICAvLyBJZiBgZmluZENvbW1lbnRzQnlBdXRob3JgIGZ1bGZpbGxzLCB3ZSdsbCBoYXZlIHRoZSB2YWx1ZSBoZXJlXG4gICAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIC8vIElmIGBmaW5kQ29tbWVudHNCeUF1dGhvcmAgcmVqZWN0cywgd2UnbGwgaGF2ZSB0aGUgcmVhc29uIGhlcmVcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIFNpbXBsZSBFeGFtcGxlXG4gICAgICAtLS0tLS0tLS0tLS0tLVxuXG4gICAgICBTeW5jaHJvbm91cyBFeGFtcGxlXG5cbiAgICAgIGBgYGphdmFzY3JpcHRcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGZpbmRSZXN1bHQoKTtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfVxuICAgICAgYGBgXG5cbiAgICAgIEVycmJhY2sgRXhhbXBsZVxuXG4gICAgICBgYGBqc1xuICAgICAgZmluZFJlc3VsdChmdW5jdGlvbihyZXN1bHQsIGVycil7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAvLyBmYWlsdXJlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBQcm9taXNlIEV4YW1wbGU7XG5cbiAgICAgIGBgYGphdmFzY3JpcHRcbiAgICAgIGZpbmRSZXN1bHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCl7XG4gICAgICAgIC8vIHN1Y2Nlc3NcbiAgICAgIH0sIGZ1bmN0aW9uKHJlYXNvbil7XG4gICAgICAgIC8vIGZhaWx1cmVcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEFkdmFuY2VkIEV4YW1wbGVcbiAgICAgIC0tLS0tLS0tLS0tLS0tXG5cbiAgICAgIFN5bmNocm9ub3VzIEV4YW1wbGVcblxuICAgICAgYGBgamF2YXNjcmlwdFxuICAgICAgdmFyIGF1dGhvciwgYm9va3M7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGF1dGhvciA9IGZpbmRBdXRob3IoKTtcbiAgICAgICAgYm9va3MgID0gZmluZEJvb2tzQnlBdXRob3IoYXV0aG9yKTtcbiAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgLy8gZmFpbHVyZVxuICAgICAgfVxuICAgICAgYGBgXG5cbiAgICAgIEVycmJhY2sgRXhhbXBsZVxuXG4gICAgICBgYGBqc1xuXG4gICAgICBmdW5jdGlvbiBmb3VuZEJvb2tzKGJvb2tzKSB7XG5cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZmFpbHVyZShyZWFzb24pIHtcblxuICAgICAgfVxuXG4gICAgICBmaW5kQXV0aG9yKGZ1bmN0aW9uKGF1dGhvciwgZXJyKXtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICAvLyBmYWlsdXJlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZpbmRCb29va3NCeUF1dGhvcihhdXRob3IsIGZ1bmN0aW9uKGJvb2tzLCBlcnIpIHtcbiAgICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgZm91bmRCb29rcyhib29rcyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaChyZWFzb24pIHtcbiAgICAgICAgICAgICAgICAgIGZhaWx1cmUocmVhc29uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gY2F0Y2goZXJyb3IpIHtcbiAgICAgICAgICAgIGZhaWx1cmUoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc3VjY2Vzc1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGBgYFxuXG4gICAgICBQcm9taXNlIEV4YW1wbGU7XG5cbiAgICAgIGBgYGphdmFzY3JpcHRcbiAgICAgIGZpbmRBdXRob3IoKS5cbiAgICAgICAgdGhlbihmaW5kQm9va3NCeUF1dGhvcikuXG4gICAgICAgIHRoZW4oZnVuY3Rpb24oYm9va3Mpe1xuICAgICAgICAgIC8vIGZvdW5kIGJvb2tzXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbihyZWFzb24pe1xuICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgICAgfSk7XG4gICAgICBgYGBcblxuICAgICAgQG1ldGhvZCB0aGVuXG4gICAgICBAcGFyYW0ge0Z1bmN0aW9ufSBvbkZ1bGZpbGxlZFxuICAgICAgQHBhcmFtIHtGdW5jdGlvbn0gb25SZWplY3RlZFxuICAgICAgVXNlZnVsIGZvciB0b29saW5nLlxuICAgICAgQHJldHVybiB7UHJvbWlzZX1cbiAgICAqL1xuICAgICAgdGhlbjogZnVuY3Rpb24ob25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IHBhcmVudC5fc3RhdGU7XG5cbiAgICAgICAgaWYgKHN0YXRlID09PSBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRGVUxGSUxMRUQgJiYgIW9uRnVsZmlsbG1lbnQgfHwgc3RhdGUgPT09IGxpYiRlczYkcHJvbWlzZSQkaW50ZXJuYWwkJFJFSkVDVEVEICYmICFvblJlamVjdGlvbikge1xuICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoaWxkID0gbmV3IHRoaXMuY29uc3RydWN0b3IobGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkbm9vcCk7XG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJlbnQuX3Jlc3VsdDtcblxuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbc3RhdGUgLSAxXTtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkYXNhcCQkYXNhcChmdW5jdGlvbigpe1xuICAgICAgICAgICAgbGliJGVzNiRwcm9taXNlJCRpbnRlcm5hbCQkaW52b2tlQ2FsbGJhY2soc3RhdGUsIGNoaWxkLCBjYWxsYmFjaywgcmVzdWx0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaWIkZXM2JHByb21pc2UkJGludGVybmFsJCRzdWJzY3JpYmUocGFyZW50LCBjaGlsZCwgb25GdWxmaWxsbWVudCwgb25SZWplY3Rpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfSxcblxuICAgIC8qKlxuICAgICAgYGNhdGNoYCBpcyBzaW1wbHkgc3VnYXIgZm9yIGB0aGVuKHVuZGVmaW5lZCwgb25SZWplY3Rpb24pYCB3aGljaCBtYWtlcyBpdCB0aGUgc2FtZVxuICAgICAgYXMgdGhlIGNhdGNoIGJsb2NrIG9mIGEgdHJ5L2NhdGNoIHN0YXRlbWVudC5cblxuICAgICAgYGBganNcbiAgICAgIGZ1bmN0aW9uIGZpbmRBdXRob3IoKXtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdjb3VsZG4ndCBmaW5kIHRoYXQgYXV0aG9yJyk7XG4gICAgICB9XG5cbiAgICAgIC8vIHN5bmNocm9ub3VzXG4gICAgICB0cnkge1xuICAgICAgICBmaW5kQXV0aG9yKCk7XG4gICAgICB9IGNhdGNoKHJlYXNvbikge1xuICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xuICAgICAgfVxuXG4gICAgICAvLyBhc3luYyB3aXRoIHByb21pc2VzXG4gICAgICBmaW5kQXV0aG9yKCkuY2F0Y2goZnVuY3Rpb24ocmVhc29uKXtcbiAgICAgICAgLy8gc29tZXRoaW5nIHdlbnQgd3JvbmdcbiAgICAgIH0pO1xuICAgICAgYGBgXG5cbiAgICAgIEBtZXRob2QgY2F0Y2hcbiAgICAgIEBwYXJhbSB7RnVuY3Rpb259IG9uUmVqZWN0aW9uXG4gICAgICBVc2VmdWwgZm9yIHRvb2xpbmcuXG4gICAgICBAcmV0dXJuIHtQcm9taXNlfVxuICAgICovXG4gICAgICAnY2F0Y2gnOiBmdW5jdGlvbihvblJlamVjdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy50aGVuKG51bGwsIG9uUmVqZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGZ1bmN0aW9uIGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkcG9seWZpbGwoKSB7XG4gICAgICB2YXIgbG9jYWw7XG5cbiAgICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGxvY2FsID0gZ2xvYmFsO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBsb2NhbCA9IHNlbGY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxvY2FsID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncG9seWZpbGwgZmFpbGVkIGJlY2F1c2UgZ2xvYmFsIG9iamVjdCBpcyB1bmF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgUCA9IGxvY2FsLlByb21pc2U7XG5cbiAgICAgIGlmIChQICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChQLnJlc29sdmUoKSkgPT09ICdbb2JqZWN0IFByb21pc2VdJyAmJiAhUC5jYXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgbG9jYWwuUHJvbWlzZSA9IGxpYiRlczYkcHJvbWlzZSRwcm9taXNlJCRkZWZhdWx0O1xuICAgIH1cbiAgICB2YXIgbGliJGVzNiRwcm9taXNlJHBvbHlmaWxsJCRkZWZhdWx0ID0gbGliJGVzNiRwcm9taXNlJHBvbHlmaWxsJCRwb2x5ZmlsbDtcblxuICAgIHZhciBsaWIkZXM2JHByb21pc2UkdW1kJCRFUzZQcm9taXNlID0ge1xuICAgICAgJ1Byb21pc2UnOiBsaWIkZXM2JHByb21pc2UkcHJvbWlzZSQkZGVmYXVsdCxcbiAgICAgICdwb2x5ZmlsbCc6IGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkZGVmYXVsdFxuICAgIH07XG5cbiAgICAvKiBnbG9iYWwgZGVmaW5lOnRydWUgbW9kdWxlOnRydWUgd2luZG93OiB0cnVlICovXG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lWydhbWQnXSkge1xuICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gbGliJGVzNiRwcm9taXNlJHVtZCQkRVM2UHJvbWlzZTsgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGVbJ2V4cG9ydHMnXSkge1xuICAgICAgbW9kdWxlWydleHBvcnRzJ10gPSBsaWIkZXM2JHByb21pc2UkdW1kJCRFUzZQcm9taXNlO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzWydFUzZQcm9taXNlJ10gPSBsaWIkZXM2JHByb21pc2UkdW1kJCRFUzZQcm9taXNlO1xuICAgIH1cblxuICAgIGxpYiRlczYkcHJvbWlzZSRwb2x5ZmlsbCQkZGVmYXVsdCgpO1xufSkuY2FsbCh0aGlzKTtcblxuIiwiLyogLSotIG1vZGU6IGphdmFzY3JpcHQ7IGMtYmFzaWMtb2Zmc2V0OiA0OyBpbmRlbnQtdGFicy1tb2RlOiBuaWwgLSotICovXG5cbi8vIFxuLy8gSmF2YXNjcmlwdCBaTGliXG4vLyBCeSBUaG9tYXMgRG93biAyMDEwLTIwMTFcbi8vXG4vLyBCYXNlZCB2ZXJ5IGhlYXZpbHkgb24gcG9ydGlvbnMgb2YganpsaWIgKGJ5IHltbmtAamNyYWZ0LmNvbSksIHdobyBpblxuLy8gdHVybiBjcmVkaXRzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXIgZm9yIHRoZSBvcmlnaW5hbCB6bGliIGNvZGUuXG4vL1xuLy8gaW5mbGF0ZS5qczogWkxpYiBpbmZsYXRlIGNvZGVcbi8vXG5cbi8vXG4vLyBTaGFyZWQgY29uc3RhbnRzXG4vL1xuXG52YXIgTUFYX1dCSVRTPTE1OyAvLyAzMksgTFo3NyB3aW5kb3dcbnZhciBERUZfV0JJVFM9TUFYX1dCSVRTO1xudmFyIE1BWF9NRU1fTEVWRUw9OTtcbnZhciBNQU5ZPTE0NDA7XG52YXIgQk1BWCA9IDE1O1xuXG4vLyBwcmVzZXQgZGljdGlvbmFyeSBmbGFnIGluIHpsaWIgaGVhZGVyXG52YXIgUFJFU0VUX0RJQ1Q9MHgyMDtcblxudmFyIFpfTk9fRkxVU0g9MDtcbnZhciBaX1BBUlRJQUxfRkxVU0g9MTtcbnZhciBaX1NZTkNfRkxVU0g9MjtcbnZhciBaX0ZVTExfRkxVU0g9MztcbnZhciBaX0ZJTklTSD00O1xuXG52YXIgWl9ERUZMQVRFRD04O1xuXG52YXIgWl9PSz0wO1xudmFyIFpfU1RSRUFNX0VORD0xO1xudmFyIFpfTkVFRF9ESUNUPTI7XG52YXIgWl9FUlJOTz0tMTtcbnZhciBaX1NUUkVBTV9FUlJPUj0tMjtcbnZhciBaX0RBVEFfRVJST1I9LTM7XG52YXIgWl9NRU1fRVJST1I9LTQ7XG52YXIgWl9CVUZfRVJST1I9LTU7XG52YXIgWl9WRVJTSU9OX0VSUk9SPS02O1xuXG52YXIgTUVUSE9EPTA7ICAgLy8gd2FpdGluZyBmb3IgbWV0aG9kIGJ5dGVcbnZhciBGTEFHPTE7ICAgICAvLyB3YWl0aW5nIGZvciBmbGFnIGJ5dGVcbnZhciBESUNUND0yOyAgICAvLyBmb3VyIGRpY3Rpb25hcnkgY2hlY2sgYnl0ZXMgdG8gZ29cbnZhciBESUNUMz0zOyAgICAvLyB0aHJlZSBkaWN0aW9uYXJ5IGNoZWNrIGJ5dGVzIHRvIGdvXG52YXIgRElDVDI9NDsgICAgLy8gdHdvIGRpY3Rpb25hcnkgY2hlY2sgYnl0ZXMgdG8gZ29cbnZhciBESUNUMT01OyAgICAvLyBvbmUgZGljdGlvbmFyeSBjaGVjayBieXRlIHRvIGdvXG52YXIgRElDVDA9NjsgICAgLy8gd2FpdGluZyBmb3IgaW5mbGF0ZVNldERpY3Rpb25hcnlcbnZhciBCTE9DS1M9NzsgICAvLyBkZWNvbXByZXNzaW5nIGJsb2Nrc1xudmFyIENIRUNLND04OyAgIC8vIGZvdXIgY2hlY2sgYnl0ZXMgdG8gZ29cbnZhciBDSEVDSzM9OTsgICAvLyB0aHJlZSBjaGVjayBieXRlcyB0byBnb1xudmFyIENIRUNLMj0xMDsgIC8vIHR3byBjaGVjayBieXRlcyB0byBnb1xudmFyIENIRUNLMT0xMTsgIC8vIG9uZSBjaGVjayBieXRlIHRvIGdvXG52YXIgRE9ORT0xMjsgICAgLy8gZmluaXNoZWQgY2hlY2ssIGRvbmVcbnZhciBCQUQ9MTM7ICAgICAvLyBnb3QgYW4gZXJyb3ItLXN0YXkgaGVyZVxuXG52YXIgaW5mbGF0ZV9tYXNrID0gWzB4MDAwMDAwMDAsIDB4MDAwMDAwMDEsIDB4MDAwMDAwMDMsIDB4MDAwMDAwMDcsIDB4MDAwMDAwMGYsIDB4MDAwMDAwMWYsIDB4MDAwMDAwM2YsIDB4MDAwMDAwN2YsIDB4MDAwMDAwZmYsIDB4MDAwMDAxZmYsIDB4MDAwMDAzZmYsIDB4MDAwMDA3ZmYsIDB4MDAwMDBmZmYsIDB4MDAwMDFmZmYsIDB4MDAwMDNmZmYsIDB4MDAwMDdmZmYsIDB4MDAwMGZmZmZdO1xuXG52YXIgSUJfVFlQRT0wOyAgLy8gZ2V0IHR5cGUgYml0cyAoMywgaW5jbHVkaW5nIGVuZCBiaXQpXG52YXIgSUJfTEVOUz0xOyAgLy8gZ2V0IGxlbmd0aHMgZm9yIHN0b3JlZFxudmFyIElCX1NUT1JFRD0yOy8vIHByb2Nlc3Npbmcgc3RvcmVkIGJsb2NrXG52YXIgSUJfVEFCTEU9MzsgLy8gZ2V0IHRhYmxlIGxlbmd0aHNcbnZhciBJQl9CVFJFRT00OyAvLyBnZXQgYml0IGxlbmd0aHMgdHJlZSBmb3IgYSBkeW5hbWljIGJsb2NrXG52YXIgSUJfRFRSRUU9NTsgLy8gZ2V0IGxlbmd0aCwgZGlzdGFuY2UgdHJlZXMgZm9yIGEgZHluYW1pYyBibG9ja1xudmFyIElCX0NPREVTPTY7IC8vIHByb2Nlc3NpbmcgZml4ZWQgb3IgZHluYW1pYyBibG9ja1xudmFyIElCX0RSWT03OyAgIC8vIG91dHB1dCByZW1haW5pbmcgd2luZG93IGJ5dGVzXG52YXIgSUJfRE9ORT04OyAgLy8gZmluaXNoZWQgbGFzdCBibG9jaywgZG9uZVxudmFyIElCX0JBRD05OyAgIC8vIG90IGEgZGF0YSBlcnJvci0tc3R1Y2sgaGVyZVxuXG52YXIgZml4ZWRfYmwgPSA5O1xudmFyIGZpeGVkX2JkID0gNTtcblxudmFyIGZpeGVkX3RsID0gW1xuICAgIDk2LDcsMjU2LCAwLDgsODAsIDAsOCwxNiwgODQsOCwxMTUsXG4gICAgODIsNywzMSwgMCw4LDExMiwgMCw4LDQ4LCAwLDksMTkyLFxuICAgIDgwLDcsMTAsIDAsOCw5NiwgMCw4LDMyLCAwLDksMTYwLFxuICAgIDAsOCwwLCAwLDgsMTI4LCAwLDgsNjQsIDAsOSwyMjQsXG4gICAgODAsNyw2LCAwLDgsODgsIDAsOCwyNCwgMCw5LDE0NCxcbiAgICA4Myw3LDU5LCAwLDgsMTIwLCAwLDgsNTYsIDAsOSwyMDgsXG4gICAgODEsNywxNywgMCw4LDEwNCwgMCw4LDQwLCAwLDksMTc2LFxuICAgIDAsOCw4LCAwLDgsMTM2LCAwLDgsNzIsIDAsOSwyNDAsXG4gICAgODAsNyw0LCAwLDgsODQsIDAsOCwyMCwgODUsOCwyMjcsXG4gICAgODMsNyw0MywgMCw4LDExNiwgMCw4LDUyLCAwLDksMjAwLFxuICAgIDgxLDcsMTMsIDAsOCwxMDAsIDAsOCwzNiwgMCw5LDE2OCxcbiAgICAwLDgsNCwgMCw4LDEzMiwgMCw4LDY4LCAwLDksMjMyLFxuICAgIDgwLDcsOCwgMCw4LDkyLCAwLDgsMjgsIDAsOSwxNTIsXG4gICAgODQsNyw4MywgMCw4LDEyNCwgMCw4LDYwLCAwLDksMjE2LFxuICAgIDgyLDcsMjMsIDAsOCwxMDgsIDAsOCw0NCwgMCw5LDE4NCxcbiAgICAwLDgsMTIsIDAsOCwxNDAsIDAsOCw3NiwgMCw5LDI0OCxcbiAgICA4MCw3LDMsIDAsOCw4MiwgMCw4LDE4LCA4NSw4LDE2MyxcbiAgICA4Myw3LDM1LCAwLDgsMTE0LCAwLDgsNTAsIDAsOSwxOTYsXG4gICAgODEsNywxMSwgMCw4LDk4LCAwLDgsMzQsIDAsOSwxNjQsXG4gICAgMCw4LDIsIDAsOCwxMzAsIDAsOCw2NiwgMCw5LDIyOCxcbiAgICA4MCw3LDcsIDAsOCw5MCwgMCw4LDI2LCAwLDksMTQ4LFxuICAgIDg0LDcsNjcsIDAsOCwxMjIsIDAsOCw1OCwgMCw5LDIxMixcbiAgICA4Miw3LDE5LCAwLDgsMTA2LCAwLDgsNDIsIDAsOSwxODAsXG4gICAgMCw4LDEwLCAwLDgsMTM4LCAwLDgsNzQsIDAsOSwyNDQsXG4gICAgODAsNyw1LCAwLDgsODYsIDAsOCwyMiwgMTkyLDgsMCxcbiAgICA4Myw3LDUxLCAwLDgsMTE4LCAwLDgsNTQsIDAsOSwyMDQsXG4gICAgODEsNywxNSwgMCw4LDEwMiwgMCw4LDM4LCAwLDksMTcyLFxuICAgIDAsOCw2LCAwLDgsMTM0LCAwLDgsNzAsIDAsOSwyMzYsXG4gICAgODAsNyw5LCAwLDgsOTQsIDAsOCwzMCwgMCw5LDE1NixcbiAgICA4NCw3LDk5LCAwLDgsMTI2LCAwLDgsNjIsIDAsOSwyMjAsXG4gICAgODIsNywyNywgMCw4LDExMCwgMCw4LDQ2LCAwLDksMTg4LFxuICAgIDAsOCwxNCwgMCw4LDE0MiwgMCw4LDc4LCAwLDksMjUyLFxuICAgIDk2LDcsMjU2LCAwLDgsODEsIDAsOCwxNywgODUsOCwxMzEsXG4gICAgODIsNywzMSwgMCw4LDExMywgMCw4LDQ5LCAwLDksMTk0LFxuICAgIDgwLDcsMTAsIDAsOCw5NywgMCw4LDMzLCAwLDksMTYyLFxuICAgIDAsOCwxLCAwLDgsMTI5LCAwLDgsNjUsIDAsOSwyMjYsXG4gICAgODAsNyw2LCAwLDgsODksIDAsOCwyNSwgMCw5LDE0NixcbiAgICA4Myw3LDU5LCAwLDgsMTIxLCAwLDgsNTcsIDAsOSwyMTAsXG4gICAgODEsNywxNywgMCw4LDEwNSwgMCw4LDQxLCAwLDksMTc4LFxuICAgIDAsOCw5LCAwLDgsMTM3LCAwLDgsNzMsIDAsOSwyNDIsXG4gICAgODAsNyw0LCAwLDgsODUsIDAsOCwyMSwgODAsOCwyNTgsXG4gICAgODMsNyw0MywgMCw4LDExNywgMCw4LDUzLCAwLDksMjAyLFxuICAgIDgxLDcsMTMsIDAsOCwxMDEsIDAsOCwzNywgMCw5LDE3MCxcbiAgICAwLDgsNSwgMCw4LDEzMywgMCw4LDY5LCAwLDksMjM0LFxuICAgIDgwLDcsOCwgMCw4LDkzLCAwLDgsMjksIDAsOSwxNTQsXG4gICAgODQsNyw4MywgMCw4LDEyNSwgMCw4LDYxLCAwLDksMjE4LFxuICAgIDgyLDcsMjMsIDAsOCwxMDksIDAsOCw0NSwgMCw5LDE4NixcbiAgICAwLDgsMTMsIDAsOCwxNDEsIDAsOCw3NywgMCw5LDI1MCxcbiAgICA4MCw3LDMsIDAsOCw4MywgMCw4LDE5LCA4NSw4LDE5NSxcbiAgICA4Myw3LDM1LCAwLDgsMTE1LCAwLDgsNTEsIDAsOSwxOTgsXG4gICAgODEsNywxMSwgMCw4LDk5LCAwLDgsMzUsIDAsOSwxNjYsXG4gICAgMCw4LDMsIDAsOCwxMzEsIDAsOCw2NywgMCw5LDIzMCxcbiAgICA4MCw3LDcsIDAsOCw5MSwgMCw4LDI3LCAwLDksMTUwLFxuICAgIDg0LDcsNjcsIDAsOCwxMjMsIDAsOCw1OSwgMCw5LDIxNCxcbiAgICA4Miw3LDE5LCAwLDgsMTA3LCAwLDgsNDMsIDAsOSwxODIsXG4gICAgMCw4LDExLCAwLDgsMTM5LCAwLDgsNzUsIDAsOSwyNDYsXG4gICAgODAsNyw1LCAwLDgsODcsIDAsOCwyMywgMTkyLDgsMCxcbiAgICA4Myw3LDUxLCAwLDgsMTE5LCAwLDgsNTUsIDAsOSwyMDYsXG4gICAgODEsNywxNSwgMCw4LDEwMywgMCw4LDM5LCAwLDksMTc0LFxuICAgIDAsOCw3LCAwLDgsMTM1LCAwLDgsNzEsIDAsOSwyMzgsXG4gICAgODAsNyw5LCAwLDgsOTUsIDAsOCwzMSwgMCw5LDE1OCxcbiAgICA4NCw3LDk5LCAwLDgsMTI3LCAwLDgsNjMsIDAsOSwyMjIsXG4gICAgODIsNywyNywgMCw4LDExMSwgMCw4LDQ3LCAwLDksMTkwLFxuICAgIDAsOCwxNSwgMCw4LDE0MywgMCw4LDc5LCAwLDksMjU0LFxuICAgIDk2LDcsMjU2LCAwLDgsODAsIDAsOCwxNiwgODQsOCwxMTUsXG4gICAgODIsNywzMSwgMCw4LDExMiwgMCw4LDQ4LCAwLDksMTkzLFxuXG4gICAgODAsNywxMCwgMCw4LDk2LCAwLDgsMzIsIDAsOSwxNjEsXG4gICAgMCw4LDAsIDAsOCwxMjgsIDAsOCw2NCwgMCw5LDIyNSxcbiAgICA4MCw3LDYsIDAsOCw4OCwgMCw4LDI0LCAwLDksMTQ1LFxuICAgIDgzLDcsNTksIDAsOCwxMjAsIDAsOCw1NiwgMCw5LDIwOSxcbiAgICA4MSw3LDE3LCAwLDgsMTA0LCAwLDgsNDAsIDAsOSwxNzcsXG4gICAgMCw4LDgsIDAsOCwxMzYsIDAsOCw3MiwgMCw5LDI0MSxcbiAgICA4MCw3LDQsIDAsOCw4NCwgMCw4LDIwLCA4NSw4LDIyNyxcbiAgICA4Myw3LDQzLCAwLDgsMTE2LCAwLDgsNTIsIDAsOSwyMDEsXG4gICAgODEsNywxMywgMCw4LDEwMCwgMCw4LDM2LCAwLDksMTY5LFxuICAgIDAsOCw0LCAwLDgsMTMyLCAwLDgsNjgsIDAsOSwyMzMsXG4gICAgODAsNyw4LCAwLDgsOTIsIDAsOCwyOCwgMCw5LDE1MyxcbiAgICA4NCw3LDgzLCAwLDgsMTI0LCAwLDgsNjAsIDAsOSwyMTcsXG4gICAgODIsNywyMywgMCw4LDEwOCwgMCw4LDQ0LCAwLDksMTg1LFxuICAgIDAsOCwxMiwgMCw4LDE0MCwgMCw4LDc2LCAwLDksMjQ5LFxuICAgIDgwLDcsMywgMCw4LDgyLCAwLDgsMTgsIDg1LDgsMTYzLFxuICAgIDgzLDcsMzUsIDAsOCwxMTQsIDAsOCw1MCwgMCw5LDE5NyxcbiAgICA4MSw3LDExLCAwLDgsOTgsIDAsOCwzNCwgMCw5LDE2NSxcbiAgICAwLDgsMiwgMCw4LDEzMCwgMCw4LDY2LCAwLDksMjI5LFxuICAgIDgwLDcsNywgMCw4LDkwLCAwLDgsMjYsIDAsOSwxNDksXG4gICAgODQsNyw2NywgMCw4LDEyMiwgMCw4LDU4LCAwLDksMjEzLFxuICAgIDgyLDcsMTksIDAsOCwxMDYsIDAsOCw0MiwgMCw5LDE4MSxcbiAgICAwLDgsMTAsIDAsOCwxMzgsIDAsOCw3NCwgMCw5LDI0NSxcbiAgICA4MCw3LDUsIDAsOCw4NiwgMCw4LDIyLCAxOTIsOCwwLFxuICAgIDgzLDcsNTEsIDAsOCwxMTgsIDAsOCw1NCwgMCw5LDIwNSxcbiAgICA4MSw3LDE1LCAwLDgsMTAyLCAwLDgsMzgsIDAsOSwxNzMsXG4gICAgMCw4LDYsIDAsOCwxMzQsIDAsOCw3MCwgMCw5LDIzNyxcbiAgICA4MCw3LDksIDAsOCw5NCwgMCw4LDMwLCAwLDksMTU3LFxuICAgIDg0LDcsOTksIDAsOCwxMjYsIDAsOCw2MiwgMCw5LDIyMSxcbiAgICA4Miw3LDI3LCAwLDgsMTEwLCAwLDgsNDYsIDAsOSwxODksXG4gICAgMCw4LDE0LCAwLDgsMTQyLCAwLDgsNzgsIDAsOSwyNTMsXG4gICAgOTYsNywyNTYsIDAsOCw4MSwgMCw4LDE3LCA4NSw4LDEzMSxcbiAgICA4Miw3LDMxLCAwLDgsMTEzLCAwLDgsNDksIDAsOSwxOTUsXG4gICAgODAsNywxMCwgMCw4LDk3LCAwLDgsMzMsIDAsOSwxNjMsXG4gICAgMCw4LDEsIDAsOCwxMjksIDAsOCw2NSwgMCw5LDIyNyxcbiAgICA4MCw3LDYsIDAsOCw4OSwgMCw4LDI1LCAwLDksMTQ3LFxuICAgIDgzLDcsNTksIDAsOCwxMjEsIDAsOCw1NywgMCw5LDIxMSxcbiAgICA4MSw3LDE3LCAwLDgsMTA1LCAwLDgsNDEsIDAsOSwxNzksXG4gICAgMCw4LDksIDAsOCwxMzcsIDAsOCw3MywgMCw5LDI0MyxcbiAgICA4MCw3LDQsIDAsOCw4NSwgMCw4LDIxLCA4MCw4LDI1OCxcbiAgICA4Myw3LDQzLCAwLDgsMTE3LCAwLDgsNTMsIDAsOSwyMDMsXG4gICAgODEsNywxMywgMCw4LDEwMSwgMCw4LDM3LCAwLDksMTcxLFxuICAgIDAsOCw1LCAwLDgsMTMzLCAwLDgsNjksIDAsOSwyMzUsXG4gICAgODAsNyw4LCAwLDgsOTMsIDAsOCwyOSwgMCw5LDE1NSxcbiAgICA4NCw3LDgzLCAwLDgsMTI1LCAwLDgsNjEsIDAsOSwyMTksXG4gICAgODIsNywyMywgMCw4LDEwOSwgMCw4LDQ1LCAwLDksMTg3LFxuICAgIDAsOCwxMywgMCw4LDE0MSwgMCw4LDc3LCAwLDksMjUxLFxuICAgIDgwLDcsMywgMCw4LDgzLCAwLDgsMTksIDg1LDgsMTk1LFxuICAgIDgzLDcsMzUsIDAsOCwxMTUsIDAsOCw1MSwgMCw5LDE5OSxcbiAgICA4MSw3LDExLCAwLDgsOTksIDAsOCwzNSwgMCw5LDE2NyxcbiAgICAwLDgsMywgMCw4LDEzMSwgMCw4LDY3LCAwLDksMjMxLFxuICAgIDgwLDcsNywgMCw4LDkxLCAwLDgsMjcsIDAsOSwxNTEsXG4gICAgODQsNyw2NywgMCw4LDEyMywgMCw4LDU5LCAwLDksMjE1LFxuICAgIDgyLDcsMTksIDAsOCwxMDcsIDAsOCw0MywgMCw5LDE4MyxcbiAgICAwLDgsMTEsIDAsOCwxMzksIDAsOCw3NSwgMCw5LDI0NyxcbiAgICA4MCw3LDUsIDAsOCw4NywgMCw4LDIzLCAxOTIsOCwwLFxuICAgIDgzLDcsNTEsIDAsOCwxMTksIDAsOCw1NSwgMCw5LDIwNyxcbiAgICA4MSw3LDE1LCAwLDgsMTAzLCAwLDgsMzksIDAsOSwxNzUsXG4gICAgMCw4LDcsIDAsOCwxMzUsIDAsOCw3MSwgMCw5LDIzOSxcbiAgICA4MCw3LDksIDAsOCw5NSwgMCw4LDMxLCAwLDksMTU5LFxuICAgIDg0LDcsOTksIDAsOCwxMjcsIDAsOCw2MywgMCw5LDIyMyxcbiAgICA4Miw3LDI3LCAwLDgsMTExLCAwLDgsNDcsIDAsOSwxOTEsXG4gICAgMCw4LDE1LCAwLDgsMTQzLCAwLDgsNzksIDAsOSwyNTVcbl07XG52YXIgZml4ZWRfdGQgPSBbXG4gICAgODAsNSwxLCA4Nyw1LDI1NywgODMsNSwxNywgOTEsNSw0MDk3LFxuICAgIDgxLDUsNSwgODksNSwxMDI1LCA4NSw1LDY1LCA5Myw1LDE2Mzg1LFxuICAgIDgwLDUsMywgODgsNSw1MTMsIDg0LDUsMzMsIDkyLDUsODE5MyxcbiAgICA4Miw1LDksIDkwLDUsMjA0OSwgODYsNSwxMjksIDE5Miw1LDI0NTc3LFxuICAgIDgwLDUsMiwgODcsNSwzODUsIDgzLDUsMjUsIDkxLDUsNjE0NSxcbiAgICA4MSw1LDcsIDg5LDUsMTUzNywgODUsNSw5NywgOTMsNSwyNDU3NyxcbiAgICA4MCw1LDQsIDg4LDUsNzY5LCA4NCw1LDQ5LCA5Miw1LDEyMjg5LFxuICAgIDgyLDUsMTMsIDkwLDUsMzA3MywgODYsNSwxOTMsIDE5Miw1LDI0NTc3XG5dO1xuXG4gIC8vIFRhYmxlcyBmb3IgZGVmbGF0ZSBmcm9tIFBLWklQJ3MgYXBwbm90ZS50eHQuXG4gIHZhciBjcGxlbnMgPSBbIC8vIENvcHkgbGVuZ3RocyBmb3IgbGl0ZXJhbCBjb2RlcyAyNTcuLjI4NVxuICAgICAgICAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLFxuICAgICAgICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMFxuICBdO1xuXG4gIC8vIHNlZSBub3RlICMxMyBhYm92ZSBhYm91dCAyNThcbiAgdmFyIGNwbGV4dCA9IFsgLy8gRXh0cmEgYml0cyBmb3IgbGl0ZXJhbCBjb2RlcyAyNTcuLjI4NVxuICAgICAgICAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAxLCAxLCAxLCAxLCAyLCAyLCAyLCAyLFxuICAgICAgICAzLCAzLCAzLCAzLCA0LCA0LCA0LCA0LCA1LCA1LCA1LCA1LCAwLCAxMTIsIDExMiAgLy8gMTEyPT1pbnZhbGlkXG4gIF07XG5cbiB2YXIgY3BkaXN0ID0gWyAvLyBDb3B5IG9mZnNldHMgZm9yIGRpc3RhbmNlIGNvZGVzIDAuLjI5XG4gICAgICAgIDEsIDIsIDMsIDQsIDUsIDcsIDksIDEzLCAxNywgMjUsIDMzLCA0OSwgNjUsIDk3LCAxMjksIDE5MyxcbiAgICAgICAgMjU3LCAzODUsIDUxMywgNzY5LCAxMDI1LCAxNTM3LCAyMDQ5LCAzMDczLCA0MDk3LCA2MTQ1LFxuICAgICAgICA4MTkzLCAxMjI4OSwgMTYzODUsIDI0NTc3XG4gIF07XG5cbiAgdmFyIGNwZGV4dCA9IFsgLy8gRXh0cmEgYml0cyBmb3IgZGlzdGFuY2UgY29kZXNcbiAgICAgICAgMCwgMCwgMCwgMCwgMSwgMSwgMiwgMiwgMywgMywgNCwgNCwgNSwgNSwgNiwgNixcbiAgICAgICAgNywgNywgOCwgOCwgOSwgOSwgMTAsIDEwLCAxMSwgMTEsXG4gICAgICAgIDEyLCAxMiwgMTMsIDEzXTtcblxuLy9cbi8vIFpTdHJlYW0uamF2YVxuLy9cblxuZnVuY3Rpb24gWlN0cmVhbSgpIHtcbn1cblxuXG5aU3RyZWFtLnByb3RvdHlwZS5pbmZsYXRlSW5pdCA9IGZ1bmN0aW9uKHcsIG5vd3JhcCkge1xuICAgIGlmICghdykge1xuXHR3ID0gREVGX1dCSVRTO1xuICAgIH1cbiAgICBpZiAobm93cmFwKSB7XG5cdG5vd3JhcCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmlzdGF0ZSA9IG5ldyBJbmZsYXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuaXN0YXRlLmluZmxhdGVJbml0KHRoaXMsIG5vd3JhcD8tdzp3KTtcbn1cblxuWlN0cmVhbS5wcm90b3R5cGUuaW5mbGF0ZSA9IGZ1bmN0aW9uKGYpIHtcbiAgICBpZih0aGlzLmlzdGF0ZT09bnVsbCkgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHJldHVybiB0aGlzLmlzdGF0ZS5pbmZsYXRlKHRoaXMsIGYpO1xufVxuXG5aU3RyZWFtLnByb3RvdHlwZS5pbmZsYXRlRW5kID0gZnVuY3Rpb24oKXtcbiAgICBpZih0aGlzLmlzdGF0ZT09bnVsbCkgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHZhciByZXQ9aXN0YXRlLmluZmxhdGVFbmQodGhpcyk7XG4gICAgdGhpcy5pc3RhdGUgPSBudWxsO1xuICAgIHJldHVybiByZXQ7XG59XG5aU3RyZWFtLnByb3RvdHlwZS5pbmZsYXRlU3luYyA9IGZ1bmN0aW9uKCl7XG4gICAgLy8gaWYoaXN0YXRlID09IG51bGwpIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICByZXR1cm4gaXN0YXRlLmluZmxhdGVTeW5jKHRoaXMpO1xufVxuWlN0cmVhbS5wcm90b3R5cGUuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBmdW5jdGlvbihkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoKXtcbiAgICAvLyBpZihpc3RhdGUgPT0gbnVsbCkgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHJldHVybiBpc3RhdGUuaW5mbGF0ZVNldERpY3Rpb25hcnkodGhpcywgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7XG59XG5cbi8qXG5cbiAgcHVibGljIGludCBkZWZsYXRlSW5pdChpbnQgbGV2ZWwpe1xuICAgIHJldHVybiBkZWZsYXRlSW5pdChsZXZlbCwgTUFYX1dCSVRTKTtcbiAgfVxuICBwdWJsaWMgaW50IGRlZmxhdGVJbml0KGludCBsZXZlbCwgYm9vbGVhbiBub3dyYXApe1xuICAgIHJldHVybiBkZWZsYXRlSW5pdChsZXZlbCwgTUFYX1dCSVRTLCBub3dyYXApO1xuICB9XG4gIHB1YmxpYyBpbnQgZGVmbGF0ZUluaXQoaW50IGxldmVsLCBpbnQgYml0cyl7XG4gICAgcmV0dXJuIGRlZmxhdGVJbml0KGxldmVsLCBiaXRzLCBmYWxzZSk7XG4gIH1cbiAgcHVibGljIGludCBkZWZsYXRlSW5pdChpbnQgbGV2ZWwsIGludCBiaXRzLCBib29sZWFuIG5vd3JhcCl7XG4gICAgZHN0YXRlPW5ldyBEZWZsYXRlKCk7XG4gICAgcmV0dXJuIGRzdGF0ZS5kZWZsYXRlSW5pdCh0aGlzLCBsZXZlbCwgbm93cmFwPy1iaXRzOmJpdHMpO1xuICB9XG4gIHB1YmxpYyBpbnQgZGVmbGF0ZShpbnQgZmx1c2gpe1xuICAgIGlmKGRzdGF0ZT09bnVsbCl7XG4gICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgfVxuICAgIHJldHVybiBkc3RhdGUuZGVmbGF0ZSh0aGlzLCBmbHVzaCk7XG4gIH1cbiAgcHVibGljIGludCBkZWZsYXRlRW5kKCl7XG4gICAgaWYoZHN0YXRlPT1udWxsKSByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgaW50IHJldD1kc3RhdGUuZGVmbGF0ZUVuZCgpO1xuICAgIGRzdGF0ZT1udWxsO1xuICAgIHJldHVybiByZXQ7XG4gIH1cbiAgcHVibGljIGludCBkZWZsYXRlUGFyYW1zKGludCBsZXZlbCwgaW50IHN0cmF0ZWd5KXtcbiAgICBpZihkc3RhdGU9PW51bGwpIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICByZXR1cm4gZHN0YXRlLmRlZmxhdGVQYXJhbXModGhpcywgbGV2ZWwsIHN0cmF0ZWd5KTtcbiAgfVxuICBwdWJsaWMgaW50IGRlZmxhdGVTZXREaWN0aW9uYXJ5IChieXRlW10gZGljdGlvbmFyeSwgaW50IGRpY3RMZW5ndGgpe1xuICAgIGlmKGRzdGF0ZSA9PSBudWxsKVxuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIHJldHVybiBkc3RhdGUuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcywgZGljdGlvbmFyeSwgZGljdExlbmd0aCk7XG4gIH1cblxuKi9cblxuLypcbiAgLy8gRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQgZ29lc1xuICAvLyB0aHJvdWdoIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0XG4gIC8vIHRvIGF2b2lkIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5uZXh0X291dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cbiAgLy8gKFNlZSBhbHNvIHJlYWRfYnVmKCkpLlxuICB2b2lkIGZsdXNoX3BlbmRpbmcoKXtcbiAgICBpbnQgbGVuPWRzdGF0ZS5wZW5kaW5nO1xuXG4gICAgaWYobGVuPmF2YWlsX291dCkgbGVuPWF2YWlsX291dDtcbiAgICBpZihsZW49PTApIHJldHVybjtcblxuICAgIGlmKGRzdGF0ZS5wZW5kaW5nX2J1Zi5sZW5ndGg8PWRzdGF0ZS5wZW5kaW5nX291dCB8fFxuICAgICAgIG5leHRfb3V0Lmxlbmd0aDw9bmV4dF9vdXRfaW5kZXggfHxcbiAgICAgICBkc3RhdGUucGVuZGluZ19idWYubGVuZ3RoPChkc3RhdGUucGVuZGluZ19vdXQrbGVuKSB8fFxuICAgICAgIG5leHRfb3V0Lmxlbmd0aDwobmV4dF9vdXRfaW5kZXgrbGVuKSl7XG4gICAgICBTeXN0ZW0ub3V0LnByaW50bG4oZHN0YXRlLnBlbmRpbmdfYnVmLmxlbmd0aCtcIiwgXCIrZHN0YXRlLnBlbmRpbmdfb3V0K1xuXHRcdFx0IFwiLCBcIituZXh0X291dC5sZW5ndGgrXCIsIFwiK25leHRfb3V0X2luZGV4K1wiLCBcIitsZW4pO1xuICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiYXZhaWxfb3V0PVwiK2F2YWlsX291dCk7XG4gICAgfVxuXG4gICAgU3lzdGVtLmFycmF5Y29weShkc3RhdGUucGVuZGluZ19idWYsIGRzdGF0ZS5wZW5kaW5nX291dCxcblx0XHQgICAgIG5leHRfb3V0LCBuZXh0X291dF9pbmRleCwgbGVuKTtcblxuICAgIG5leHRfb3V0X2luZGV4Kz1sZW47XG4gICAgZHN0YXRlLnBlbmRpbmdfb3V0Kz1sZW47XG4gICAgdG90YWxfb3V0Kz1sZW47XG4gICAgYXZhaWxfb3V0LT1sZW47XG4gICAgZHN0YXRlLnBlbmRpbmctPWxlbjtcbiAgICBpZihkc3RhdGUucGVuZGluZz09MCl7XG4gICAgICBkc3RhdGUucGVuZGluZ19vdXQ9MDtcbiAgICB9XG4gIH1cblxuICAvLyBSZWFkIGEgbmV3IGJ1ZmZlciBmcm9tIHRoZSBjdXJyZW50IGlucHV0IHN0cmVhbSwgdXBkYXRlIHRoZSBhZGxlcjMyXG4gIC8vIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gIC8vIHRoaXMgZnVuY3Rpb24gc28gc29tZSBhcHBsaWNhdGlvbnMgbWF5IHdpc2ggdG8gbW9kaWZ5IGl0IHRvIGF2b2lkXG4gIC8vIGFsbG9jYXRpbmcgYSBsYXJnZSBzdHJtLT5uZXh0X2luIGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICAvLyAoU2VlIGFsc28gZmx1c2hfcGVuZGluZygpKS5cbiAgaW50IHJlYWRfYnVmKGJ5dGVbXSBidWYsIGludCBzdGFydCwgaW50IHNpemUpIHtcbiAgICBpbnQgbGVuPWF2YWlsX2luO1xuXG4gICAgaWYobGVuPnNpemUpIGxlbj1zaXplO1xuICAgIGlmKGxlbj09MCkgcmV0dXJuIDA7XG5cbiAgICBhdmFpbF9pbi09bGVuO1xuXG4gICAgaWYoZHN0YXRlLm5vaGVhZGVyPT0wKSB7XG4gICAgICBhZGxlcj1fYWRsZXIuYWRsZXIzMihhZGxlciwgbmV4dF9pbiwgbmV4dF9pbl9pbmRleCwgbGVuKTtcbiAgICB9XG4gICAgU3lzdGVtLmFycmF5Y29weShuZXh0X2luLCBuZXh0X2luX2luZGV4LCBidWYsIHN0YXJ0LCBsZW4pO1xuICAgIG5leHRfaW5faW5kZXggICs9IGxlbjtcbiAgICB0b3RhbF9pbiArPSBsZW47XG4gICAgcmV0dXJuIGxlbjtcbiAgfVxuXG4gIHB1YmxpYyB2b2lkIGZyZWUoKXtcbiAgICBuZXh0X2luPW51bGw7XG4gICAgbmV4dF9vdXQ9bnVsbDtcbiAgICBtc2c9bnVsbDtcbiAgICBfYWRsZXI9bnVsbDtcbiAgfVxufVxuKi9cblxuXG4vL1xuLy8gSW5mbGF0ZS5qYXZhXG4vL1xuXG5mdW5jdGlvbiBJbmZsYXRlKCkge1xuICAgIHRoaXMud2FzID0gWzBdO1xufVxuXG5JbmZsYXRlLnByb3RvdHlwZS5pbmZsYXRlUmVzZXQgPSBmdW5jdGlvbih6KSB7XG4gICAgaWYoeiA9PSBudWxsIHx8IHouaXN0YXRlID09IG51bGwpIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICBcbiAgICB6LnRvdGFsX2luID0gei50b3RhbF9vdXQgPSAwO1xuICAgIHoubXNnID0gbnVsbDtcbiAgICB6LmlzdGF0ZS5tb2RlID0gei5pc3RhdGUubm93cmFwIT0wID8gQkxPQ0tTIDogTUVUSE9EO1xuICAgIHouaXN0YXRlLmJsb2Nrcy5yZXNldCh6LCBudWxsKTtcbiAgICByZXR1cm4gWl9PSztcbn1cblxuSW5mbGF0ZS5wcm90b3R5cGUuaW5mbGF0ZUVuZCA9IGZ1bmN0aW9uKHope1xuICAgIGlmKHRoaXMuYmxvY2tzICE9IG51bGwpXG4gICAgICB0aGlzLmJsb2Nrcy5mcmVlKHopO1xuICAgIHRoaXMuYmxvY2tzPW51bGw7XG4gICAgcmV0dXJuIFpfT0s7XG59XG5cbkluZmxhdGUucHJvdG90eXBlLmluZmxhdGVJbml0ID0gZnVuY3Rpb24oeiwgdyl7XG4gICAgei5tc2cgPSBudWxsO1xuICAgIHRoaXMuYmxvY2tzID0gbnVsbDtcblxuICAgIC8vIGhhbmRsZSB1bmRvY3VtZW50ZWQgbm93cmFwIG9wdGlvbiAobm8gemxpYiBoZWFkZXIgb3IgY2hlY2spXG4gICAgbm93cmFwID0gMDtcbiAgICBpZih3IDwgMCl7XG4gICAgICB3ID0gLSB3O1xuICAgICAgbm93cmFwID0gMTtcbiAgICB9XG5cbiAgICAvLyBzZXQgd2luZG93IHNpemVcbiAgICBpZih3PDggfHx3PjE1KXtcbiAgICAgIHRoaXMuaW5mbGF0ZUVuZCh6KTtcbiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICB9XG4gICAgdGhpcy53Yml0cz13O1xuXG4gICAgei5pc3RhdGUuYmxvY2tzPW5ldyBJbmZCbG9ja3MoeiwgXG5cdFx0XHRcdCAgei5pc3RhdGUubm93cmFwIT0wID8gbnVsbCA6IHRoaXMsXG5cdFx0XHRcdCAgMTw8dyk7XG5cbiAgICAvLyByZXNldCBzdGF0ZVxuICAgIHRoaXMuaW5mbGF0ZVJlc2V0KHopO1xuICAgIHJldHVybiBaX09LO1xuICB9XG5cbkluZmxhdGUucHJvdG90eXBlLmluZmxhdGUgPSBmdW5jdGlvbih6LCBmKXtcbiAgICB2YXIgciwgYjtcblxuICAgIGlmKHogPT0gbnVsbCB8fCB6LmlzdGF0ZSA9PSBudWxsIHx8IHoubmV4dF9pbiA9PSBudWxsKVxuICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SO1xuICAgIGYgPSBmID09IFpfRklOSVNIID8gWl9CVUZfRVJST1IgOiBaX09LO1xuICAgIHIgPSBaX0JVRl9FUlJPUjtcbiAgICB3aGlsZSAodHJ1ZSl7XG4gICAgICBzd2l0Y2ggKHouaXN0YXRlLm1vZGUpe1xuICAgICAgY2FzZSBNRVRIT0Q6XG5cbiAgICAgICAgaWYoei5hdmFpbF9pbj09MClyZXR1cm4gcjtyPWY7XG5cbiAgICAgICAgei5hdmFpbF9pbi0tOyB6LnRvdGFsX2luKys7XG4gICAgICAgIGlmKCgoei5pc3RhdGUubWV0aG9kID0gei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSkmMHhmKSE9Wl9ERUZMQVRFRCl7XG4gICAgICAgICAgei5pc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICB6Lm1zZz1cInVua25vd24gY29tcHJlc3Npb24gbWV0aG9kXCI7XG4gICAgICAgICAgei5pc3RhdGUubWFya2VyID0gNTsgICAgICAgLy8gY2FuJ3QgdHJ5IGluZmxhdGVTeW5jXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYoKHouaXN0YXRlLm1ldGhvZD4+NCkrOD56LmlzdGF0ZS53Yml0cyl7XG4gICAgICAgICAgei5pc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICB6Lm1zZz1cImludmFsaWQgd2luZG93IHNpemVcIjtcbiAgICAgICAgICB6LmlzdGF0ZS5tYXJrZXIgPSA1OyAgICAgICAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB6LmlzdGF0ZS5tb2RlPUZMQUc7XG4gICAgICBjYXNlIEZMQUc6XG5cbiAgICAgICAgaWYoei5hdmFpbF9pbj09MClyZXR1cm4gcjtyPWY7XG5cbiAgICAgICAgei5hdmFpbF9pbi0tOyB6LnRvdGFsX2luKys7XG4gICAgICAgIGIgPSAoei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSkmMHhmZjtcblxuICAgICAgICBpZigoKCh6LmlzdGF0ZS5tZXRob2QgPDwgOCkrYikgJSAzMSkhPTApe1xuICAgICAgICAgIHouaXN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgei5tc2cgPSBcImluY29ycmVjdCBoZWFkZXIgY2hlY2tcIjtcbiAgICAgICAgICB6LmlzdGF0ZS5tYXJrZXIgPSA1OyAgICAgICAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmKChiJlBSRVNFVF9ESUNUKT09MCl7XG4gICAgICAgICAgei5pc3RhdGUubW9kZSA9IEJMT0NLUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB6LmlzdGF0ZS5tb2RlID0gRElDVDQ7XG4gICAgICBjYXNlIERJQ1Q0OlxuXG4gICAgICAgIGlmKHouYXZhaWxfaW49PTApcmV0dXJuIHI7cj1mO1xuXG4gICAgICAgIHouYXZhaWxfaW4tLTsgei50b3RhbF9pbisrO1xuICAgICAgICB6LmlzdGF0ZS5uZWVkPSgoei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSYweGZmKTw8MjQpJjB4ZmYwMDAwMDA7XG4gICAgICAgIHouaXN0YXRlLm1vZGU9RElDVDM7XG4gICAgICBjYXNlIERJQ1QzOlxuXG4gICAgICAgIGlmKHouYXZhaWxfaW49PTApcmV0dXJuIHI7cj1mO1xuXG4gICAgICAgIHouYXZhaWxfaW4tLTsgei50b3RhbF9pbisrO1xuICAgICAgICB6LmlzdGF0ZS5uZWVkKz0oKHoubmV4dF9pblt6Lm5leHRfaW5faW5kZXgrK10mMHhmZik8PDE2KSYweGZmMDAwMDtcbiAgICAgICAgei5pc3RhdGUubW9kZT1ESUNUMjtcbiAgICAgIGNhc2UgRElDVDI6XG5cbiAgICAgICAgaWYoei5hdmFpbF9pbj09MClyZXR1cm4gcjtyPWY7XG5cbiAgICAgICAgei5hdmFpbF9pbi0tOyB6LnRvdGFsX2luKys7XG4gICAgICAgIHouaXN0YXRlLm5lZWQrPSgoei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSYweGZmKTw8OCkmMHhmZjAwO1xuICAgICAgICB6LmlzdGF0ZS5tb2RlPURJQ1QxO1xuICAgICAgY2FzZSBESUNUMTpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgei5pc3RhdGUubmVlZCArPSAoei5uZXh0X2luW3oubmV4dF9pbl9pbmRleCsrXSYweGZmKTtcbiAgICAgICAgei5hZGxlciA9IHouaXN0YXRlLm5lZWQ7XG4gICAgICAgIHouaXN0YXRlLm1vZGUgPSBESUNUMDtcbiAgICAgICAgcmV0dXJuIFpfTkVFRF9ESUNUO1xuICAgICAgY2FzZSBESUNUMDpcbiAgICAgICAgei5pc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgei5tc2cgPSBcIm5lZWQgZGljdGlvbmFyeVwiO1xuICAgICAgICB6LmlzdGF0ZS5tYXJrZXIgPSAwOyAgICAgICAvLyBjYW4gdHJ5IGluZmxhdGVTeW5jXG4gICAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICAgIGNhc2UgQkxPQ0tTOlxuXG4gICAgICAgIHIgPSB6LmlzdGF0ZS5ibG9ja3MucHJvYyh6LCByKTtcbiAgICAgICAgaWYociA9PSBaX0RBVEFfRVJST1Ipe1xuICAgICAgICAgIHouaXN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgei5pc3RhdGUubWFya2VyID0gMDsgICAgIC8vIGNhbiB0cnkgaW5mbGF0ZVN5bmNcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZihyID09IFpfT0spe1xuICAgICAgICAgIHIgPSBmO1xuICAgICAgICB9XG4gICAgICAgIGlmKHIgIT0gWl9TVFJFQU1fRU5EKXtcbiAgICAgICAgICByZXR1cm4gcjtcbiAgICAgICAgfVxuICAgICAgICByID0gZjtcbiAgICAgICAgei5pc3RhdGUuYmxvY2tzLnJlc2V0KHosIHouaXN0YXRlLndhcyk7XG4gICAgICAgIGlmKHouaXN0YXRlLm5vd3JhcCE9MCl7XG4gICAgICAgICAgei5pc3RhdGUubW9kZT1ET05FO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHouaXN0YXRlLm1vZGU9Q0hFQ0s0O1xuICAgICAgY2FzZSBDSEVDSzQ6XG5cbiAgICAgICAgaWYoei5hdmFpbF9pbj09MClyZXR1cm4gcjtyPWY7XG5cbiAgICAgICAgei5hdmFpbF9pbi0tOyB6LnRvdGFsX2luKys7XG4gICAgICAgIHouaXN0YXRlLm5lZWQ9KCh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdJjB4ZmYpPDwyNCkmMHhmZjAwMDAwMDtcbiAgICAgICAgei5pc3RhdGUubW9kZT1DSEVDSzM7XG4gICAgICBjYXNlIENIRUNLMzpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgei5pc3RhdGUubmVlZCs9KCh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdJjB4ZmYpPDwxNikmMHhmZjAwMDA7XG4gICAgICAgIHouaXN0YXRlLm1vZGUgPSBDSEVDSzI7XG4gICAgICBjYXNlIENIRUNLMjpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgei5pc3RhdGUubmVlZCs9KCh6Lm5leHRfaW5bei5uZXh0X2luX2luZGV4KytdJjB4ZmYpPDw4KSYweGZmMDA7XG4gICAgICAgIHouaXN0YXRlLm1vZGUgPSBDSEVDSzE7XG4gICAgICBjYXNlIENIRUNLMTpcblxuICAgICAgICBpZih6LmF2YWlsX2luPT0wKXJldHVybiByO3I9ZjtcblxuICAgICAgICB6LmF2YWlsX2luLS07IHoudG90YWxfaW4rKztcbiAgICAgICAgei5pc3RhdGUubmVlZCs9KHoubmV4dF9pblt6Lm5leHRfaW5faW5kZXgrK10mMHhmZik7XG5cbiAgICAgICAgaWYoKCh6LmlzdGF0ZS53YXNbMF0pKSAhPSAoKHouaXN0YXRlLm5lZWQpKSl7XG4gICAgICAgICAgei5pc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICB6Lm1zZyA9IFwiaW5jb3JyZWN0IGRhdGEgY2hlY2tcIjtcbiAgICAgICAgICB6LmlzdGF0ZS5tYXJrZXIgPSA1OyAgICAgICAvLyBjYW4ndCB0cnkgaW5mbGF0ZVN5bmNcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHouaXN0YXRlLm1vZGUgPSBET05FO1xuICAgICAgY2FzZSBET05FOlxuICAgICAgICByZXR1cm4gWl9TVFJFQU1fRU5EO1xuICAgICAgY2FzZSBCQUQ6XG4gICAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG4gICAgICB9XG4gICAgfVxuICB9XG5cblxuSW5mbGF0ZS5wcm90b3R5cGUuaW5mbGF0ZVNldERpY3Rpb25hcnkgPSBmdW5jdGlvbih6LCAgZGljdGlvbmFyeSwgZGljdExlbmd0aCkge1xuICAgIHZhciBpbmRleD0wO1xuICAgIHZhciBsZW5ndGggPSBkaWN0TGVuZ3RoO1xuICAgIGlmKHo9PW51bGwgfHwgei5pc3RhdGUgPT0gbnVsbHx8IHouaXN0YXRlLm1vZGUgIT0gRElDVDApXG4gICAgICByZXR1cm4gWl9TVFJFQU1fRVJST1I7XG5cbiAgICBpZih6Ll9hZGxlci5hZGxlcjMyKDEsIGRpY3Rpb25hcnksIDAsIGRpY3RMZW5ndGgpIT16LmFkbGVyKXtcbiAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XG4gICAgfVxuXG4gICAgei5hZGxlciA9IHouX2FkbGVyLmFkbGVyMzIoMCwgbnVsbCwgMCwgMCk7XG5cbiAgICBpZihsZW5ndGggPj0gKDE8PHouaXN0YXRlLndiaXRzKSl7XG4gICAgICBsZW5ndGggPSAoMTw8ei5pc3RhdGUud2JpdHMpLTE7XG4gICAgICBpbmRleD1kaWN0TGVuZ3RoIC0gbGVuZ3RoO1xuICAgIH1cbiAgICB6LmlzdGF0ZS5ibG9ja3Muc2V0X2RpY3Rpb25hcnkoZGljdGlvbmFyeSwgaW5kZXgsIGxlbmd0aCk7XG4gICAgei5pc3RhdGUubW9kZSA9IEJMT0NLUztcbiAgICByZXR1cm4gWl9PSztcbiAgfVxuXG4vLyAgc3RhdGljIHByaXZhdGUgYnl0ZVtdIG1hcmsgPSB7KGJ5dGUpMCwgKGJ5dGUpMCwgKGJ5dGUpMHhmZiwgKGJ5dGUpMHhmZn07XG52YXIgbWFyayA9IFswLCAwLCAyNTUsIDI1NV1cblxuSW5mbGF0ZS5wcm90b3R5cGUuaW5mbGF0ZVN5bmMgPSBmdW5jdGlvbih6KXtcbiAgICB2YXIgbjsgICAgICAgLy8gbnVtYmVyIG9mIGJ5dGVzIHRvIGxvb2sgYXRcbiAgICB2YXIgcDsgICAgICAgLy8gcG9pbnRlciB0byBieXRlc1xuICAgIHZhciBtOyAgICAgICAvLyBudW1iZXIgb2YgbWFya2VyIGJ5dGVzIGZvdW5kIGluIGEgcm93XG4gICAgdmFyIHIsIHc7ICAgLy8gdGVtcG9yYXJpZXMgdG8gc2F2ZSB0b3RhbF9pbiBhbmQgdG90YWxfb3V0XG5cbiAgICAvLyBzZXQgdXBcbiAgICBpZih6ID09IG51bGwgfHwgei5pc3RhdGUgPT0gbnVsbClcbiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICBpZih6LmlzdGF0ZS5tb2RlICE9IEJBRCl7XG4gICAgICB6LmlzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgei5pc3RhdGUubWFya2VyID0gMDtcbiAgICB9XG4gICAgaWYoKG49ei5hdmFpbF9pbik9PTApXG4gICAgICByZXR1cm4gWl9CVUZfRVJST1I7XG4gICAgcD16Lm5leHRfaW5faW5kZXg7XG4gICAgbT16LmlzdGF0ZS5tYXJrZXI7XG5cbiAgICAvLyBzZWFyY2hcbiAgICB3aGlsZSAobiE9MCAmJiBtIDwgNCl7XG4gICAgICBpZih6Lm5leHRfaW5bcF0gPT0gbWFya1ttXSl7XG4gICAgICAgIG0rKztcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYoei5uZXh0X2luW3BdIT0wKXtcbiAgICAgICAgbSA9IDA7XG4gICAgICB9XG4gICAgICBlbHNle1xuICAgICAgICBtID0gNCAtIG07XG4gICAgICB9XG4gICAgICBwKys7IG4tLTtcbiAgICB9XG5cbiAgICAvLyByZXN0b3JlXG4gICAgei50b3RhbF9pbiArPSBwLXoubmV4dF9pbl9pbmRleDtcbiAgICB6Lm5leHRfaW5faW5kZXggPSBwO1xuICAgIHouYXZhaWxfaW4gPSBuO1xuICAgIHouaXN0YXRlLm1hcmtlciA9IG07XG5cbiAgICAvLyByZXR1cm4gbm8gam95IG9yIHNldCB1cCB0byByZXN0YXJ0IG9uIGEgbmV3IGJsb2NrXG4gICAgaWYobSAhPSA0KXtcbiAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XG4gICAgfVxuICAgIHI9ei50b3RhbF9pbjsgIHc9ei50b3RhbF9vdXQ7XG4gICAgdGhpcy5pbmZsYXRlUmVzZXQoeik7XG4gICAgei50b3RhbF9pbj1yOyAgei50b3RhbF9vdXQgPSB3O1xuICAgIHouaXN0YXRlLm1vZGUgPSBCTE9DS1M7XG4gICAgcmV0dXJuIFpfT0s7XG59XG5cbiAgLy8gUmV0dXJucyB0cnVlIGlmIGluZmxhdGUgaXMgY3VycmVudGx5IGF0IHRoZSBlbmQgb2YgYSBibG9jayBnZW5lcmF0ZWRcbiAgLy8gYnkgWl9TWU5DX0ZMVVNIIG9yIFpfRlVMTF9GTFVTSC4gVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJ5IG9uZSBQUFBcbiAgLy8gaW1wbGVtZW50YXRpb24gdG8gcHJvdmlkZSBhbiBhZGRpdGlvbmFsIHNhZmV0eSBjaGVjay4gUFBQIHVzZXMgWl9TWU5DX0ZMVVNIXG4gIC8vIGJ1dCByZW1vdmVzIHRoZSBsZW5ndGggYnl0ZXMgb2YgdGhlIHJlc3VsdGluZyBlbXB0eSBzdG9yZWQgYmxvY2suIFdoZW5cbiAgLy8gZGVjb21wcmVzc2luZywgUFBQIGNoZWNrcyB0aGF0IGF0IHRoZSBlbmQgb2YgaW5wdXQgcGFja2V0LCBpbmZsYXRlIGlzXG4gIC8vIHdhaXRpbmcgZm9yIHRoZXNlIGxlbmd0aCBieXRlcy5cbkluZmxhdGUucHJvdG90eXBlLmluZmxhdGVTeW5jUG9pbnQgPSBmdW5jdGlvbih6KXtcbiAgICBpZih6ID09IG51bGwgfHwgei5pc3RhdGUgPT0gbnVsbCB8fCB6LmlzdGF0ZS5ibG9ja3MgPT0gbnVsbClcbiAgICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUjtcbiAgICByZXR1cm4gei5pc3RhdGUuYmxvY2tzLnN5bmNfcG9pbnQoKTtcbn1cblxuXG4vL1xuLy8gSW5mQmxvY2tzLmphdmFcbi8vXG5cbnZhciBJTkZCTE9DS1NfQk9SREVSID0gWzE2LCAxNywgMTgsIDAsIDgsIDcsIDksIDYsIDEwLCA1LCAxMSwgNCwgMTIsIDMsIDEzLCAyLCAxNCwgMSwgMTVdO1xuXG5mdW5jdGlvbiBJbmZCbG9ja3MoeiwgY2hlY2tmbiwgdykge1xuICAgIHRoaXMuaHVmdHM9bmV3IEludDMyQXJyYXkoTUFOWSozKTtcbiAgICB0aGlzLndpbmRvdz1uZXcgVWludDhBcnJheSh3KTtcbiAgICB0aGlzLmVuZD13O1xuICAgIHRoaXMuY2hlY2tmbiA9IGNoZWNrZm47XG4gICAgdGhpcy5tb2RlID0gSUJfVFlQRTtcbiAgICB0aGlzLnJlc2V0KHosIG51bGwpO1xuXG4gICAgdGhpcy5sZWZ0ID0gMDsgICAgICAgICAgICAvLyBpZiBTVE9SRUQsIGJ5dGVzIGxlZnQgdG8gY29weSBcblxuICAgIHRoaXMudGFibGUgPSAwOyAgICAgICAgICAgLy8gdGFibGUgbGVuZ3RocyAoMTQgYml0cykgXG4gICAgdGhpcy5pbmRleCA9IDA7ICAgICAgICAgICAvLyBpbmRleCBpbnRvIGJsZW5zIChvciBib3JkZXIpIFxuICAgIHRoaXMuYmxlbnMgPSBudWxsOyAgICAgICAgIC8vIGJpdCBsZW5ndGhzIG9mIGNvZGVzIFxuICAgIHRoaXMuYmI9bmV3IEludDMyQXJyYXkoMSk7IC8vIGJpdCBsZW5ndGggdHJlZSBkZXB0aCBcbiAgICB0aGlzLnRiPW5ldyBJbnQzMkFycmF5KDEpOyAvLyBiaXQgbGVuZ3RoIGRlY29kaW5nIHRyZWUgXG5cbiAgICB0aGlzLmNvZGVzID0gbmV3IEluZkNvZGVzKCk7XG5cbiAgICB0aGlzLmxhc3QgPSAwOyAgICAgICAgICAgIC8vIHRydWUgaWYgdGhpcyBibG9jayBpcyB0aGUgbGFzdCBibG9jayBcblxuICAvLyBtb2RlIGluZGVwZW5kZW50IGluZm9ybWF0aW9uIFxuICAgIHRoaXMuYml0ayA9IDA7ICAgICAgICAgICAgLy8gYml0cyBpbiBiaXQgYnVmZmVyIFxuICAgIHRoaXMuYml0YiA9IDA7ICAgICAgICAgICAgLy8gYml0IGJ1ZmZlciBcbiAgICB0aGlzLnJlYWQgPSAwOyAgICAgICAgICAgIC8vIHdpbmRvdyByZWFkIHBvaW50ZXIgXG4gICAgdGhpcy53cml0ZSA9IDA7ICAgICAgICAgICAvLyB3aW5kb3cgd3JpdGUgcG9pbnRlciBcbiAgICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgLy8gY2hlY2sgb24gb3V0cHV0IFxuXG4gICAgdGhpcy5pbmZ0cmVlPW5ldyBJbmZUcmVlKCk7XG59XG5cblxuXG5cbkluZkJsb2Nrcy5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbih6LCBjKXtcbiAgICBpZihjKSBjWzBdPXRoaXMuY2hlY2s7XG4gICAgaWYodGhpcy5tb2RlPT1JQl9DT0RFUyl7XG4gICAgICB0aGlzLmNvZGVzLmZyZWUoeik7XG4gICAgfVxuICAgIHRoaXMubW9kZT1JQl9UWVBFO1xuICAgIHRoaXMuYml0az0wO1xuICAgIHRoaXMuYml0Yj0wO1xuICAgIHRoaXMucmVhZD10aGlzLndyaXRlPTA7XG5cbiAgICBpZih0aGlzLmNoZWNrZm4pXG4gICAgICB6LmFkbGVyPXRoaXMuY2hlY2s9ei5fYWRsZXIuYWRsZXIzMigwLCBudWxsLCAwLCAwKTtcbiAgfVxuXG4gSW5mQmxvY2tzLnByb3RvdHlwZS5wcm9jID0gZnVuY3Rpb24oeiwgcil7XG4gICAgdmFyIHQ7ICAgICAgICAgICAgICAvLyB0ZW1wb3Jhcnkgc3RvcmFnZVxuICAgIHZhciBiOyAgICAgICAgICAgICAgLy8gYml0IGJ1ZmZlclxuICAgIHZhciBrOyAgICAgICAgICAgICAgLy8gYml0cyBpbiBiaXQgYnVmZmVyXG4gICAgdmFyIHA7ICAgICAgICAgICAgICAvLyBpbnB1dCBkYXRhIHBvaW50ZXJcbiAgICB2YXIgbjsgICAgICAgICAgICAgIC8vIGJ5dGVzIGF2YWlsYWJsZSB0aGVyZVxuICAgIHZhciBxOyAgICAgICAgICAgICAgLy8gb3V0cHV0IHdpbmRvdyB3cml0ZSBwb2ludGVyXG4gICAgdmFyIG07ICAgICAgICAgICAgICAvLyBieXRlcyB0byBlbmQgb2Ygd2luZG93IG9yIHJlYWQgcG9pbnRlclxuXG4gICAgLy8gY29weSBpbnB1dC9vdXRwdXQgaW5mb3JtYXRpb24gdG8gbG9jYWxzIChVUERBVEUgbWFjcm8gcmVzdG9yZXMpXG4gICAge3A9ei5uZXh0X2luX2luZGV4O249ei5hdmFpbF9pbjtiPXRoaXMuYml0YjtrPXRoaXMuYml0azt9XG4gICAge3E9dGhpcy53cml0ZTttPShxPHRoaXMucmVhZCA/IHRoaXMucmVhZC1xLTEgOiB0aGlzLmVuZC1xKTt9XG5cbiAgICAvLyBwcm9jZXNzIGlucHV0IGJhc2VkIG9uIGN1cnJlbnQgc3RhdGVcbiAgICB3aGlsZSh0cnVlKXtcbiAgICAgIHN3aXRjaCAodGhpcy5tb2RlKXtcbiAgICAgIGNhc2UgSUJfVFlQRTpcblxuXHR3aGlsZShrPCgzKSl7XG5cdCAgaWYobiE9MCl7XG5cdCAgICByPVpfT0s7XG5cdCAgfVxuXHQgIGVsc2V7XG5cdCAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgei5hdmFpbF9pbj1uO1xuXHQgICAgei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICB0aGlzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfTtcblx0ICBuLS07XG5cdCAgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgIGsrPTg7XG5cdH1cblx0dCA9IChiICYgNyk7XG5cdHRoaXMubGFzdCA9IHQgJiAxO1xuXG5cdHN3aXRjaCAodCA+Pj4gMSl7XG4gICAgICAgIGNhc2UgMDogICAgICAgICAgICAgICAgICAgICAgICAgLy8gc3RvcmVkIFxuICAgICAgICAgIHtiPj4+PSgzKTtrLT0oMyk7fVxuICAgICAgICAgIHQgPSBrICYgNzsgICAgICAgICAgICAgICAgICAgIC8vIGdvIHRvIGJ5dGUgYm91bmRhcnlcblxuICAgICAgICAgIHtiPj4+PSh0KTtrLT0odCk7fVxuICAgICAgICAgIHRoaXMubW9kZSA9IElCX0xFTlM7ICAgICAgICAgICAgICAgICAgLy8gZ2V0IGxlbmd0aCBvZiBzdG9yZWQgYmxvY2tcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmaXhlZFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIGJsPW5ldyBJbnQzMkFycmF5KDEpO1xuXHQgICAgICB2YXIgYmQ9bmV3IEludDMyQXJyYXkoMSk7XG4gICAgICAgICAgICAgIHZhciB0bD1bXTtcblx0ICAgICAgdmFyIHRkPVtdO1xuXG5cdCAgICAgIGluZmxhdGVfdHJlZXNfZml4ZWQoYmwsIGJkLCB0bCwgdGQsIHopO1xuICAgICAgICAgICAgICB0aGlzLmNvZGVzLmluaXQoYmxbMF0sIGJkWzBdLCB0bFswXSwgMCwgdGRbMF0sIDAsIHopO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHtiPj4+PSgzKTtrLT0oMyk7fVxuXG4gICAgICAgICAgdGhpcy5tb2RlID0gSUJfQ09ERVM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjogICAgICAgICAgICAgICAgICAgICAgICAgLy8gZHluYW1pY1xuXG4gICAgICAgICAge2I+Pj49KDMpO2stPSgzKTt9XG5cbiAgICAgICAgICB0aGlzLm1vZGUgPSBJQl9UQUJMRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOiAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbGxlZ2FsXG5cbiAgICAgICAgICB7Yj4+Pj0oMyk7ay09KDMpO31cbiAgICAgICAgICB0aGlzLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgei5tc2cgPSBcImludmFsaWQgYmxvY2sgdHlwZVwiO1xuICAgICAgICAgIHIgPSBaX0RBVEFfRVJST1I7XG5cblx0ICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICB0aGlzLndyaXRlPXE7XG5cdCAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHR9XG5cdGJyZWFrO1xuICAgICAgY2FzZSBJQl9MRU5TOlxuXHR3aGlsZShrPCgzMikpe1xuXHQgIGlmKG4hPTApe1xuXHQgICAgcj1aX09LO1xuXHQgIH1cblx0ICBlbHNle1xuXHQgICAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICAgIHouYXZhaWxfaW49bjtcblx0ICAgIHoudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgdGhpcy53cml0ZT1xO1xuXHQgICAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgIH07XG5cdCAgbi0tO1xuXHQgIGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztcblx0ICBrKz04O1xuXHR9XG5cblx0aWYgKCgoKH5iKSA+Pj4gMTYpICYgMHhmZmZmKSAhPSAoYiAmIDB4ZmZmZikpe1xuXHQgIHRoaXMubW9kZSA9IEJBRDtcblx0ICB6Lm1zZyA9IFwiaW52YWxpZCBzdG9yZWQgYmxvY2sgbGVuZ3Roc1wiO1xuXHQgIHIgPSBaX0RBVEFfRVJST1I7XG5cblx0ICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICB0aGlzLndyaXRlPXE7XG5cdCAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHR9XG5cdHRoaXMubGVmdCA9IChiICYgMHhmZmZmKTtcblx0YiA9IGsgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgLy8gZHVtcCBiaXRzXG5cdHRoaXMubW9kZSA9IHRoaXMubGVmdCE9MCA/IElCX1NUT1JFRCA6ICh0aGlzLmxhc3QhPTAgPyBJQl9EUlkgOiBJQl9UWVBFKTtcblx0YnJlYWs7XG4gICAgICBjYXNlIElCX1NUT1JFRDpcblx0aWYgKG4gPT0gMCl7XG5cdCAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgd3JpdGU9cTtcblx0ICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdH1cblxuXHRpZihtPT0wKXtcblx0ICBpZihxPT1lbmQmJnJlYWQhPTApe1xuXHQgICAgcT0wOyBtPShxPHRoaXMucmVhZCA/IHRoaXMucmVhZC1xLTEgOiB0aGlzLmVuZC1xKTtcblx0ICB9XG5cdCAgaWYobT09MCl7XG5cdCAgICB0aGlzLndyaXRlPXE7IFxuXHQgICAgcj10aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIHE9dGhpcy53cml0ZTsgbSA9IChxIDwgdGhpcy5yZWFkID8gdGhpcy5yZWFkLXEtMSA6IHRoaXMuZW5kLXEpO1xuXHQgICAgaWYocT09dGhpcy5lbmQgJiYgdGhpcy5yZWFkICE9IDApe1xuXHQgICAgICBxPTA7IG0gPSAocSA8IHRoaXMucmVhZCA/IHRoaXMucmVhZC1xLTEgOiB0aGlzLmVuZC1xKTtcblx0ICAgIH1cblx0ICAgIGlmKG09PTApe1xuXHQgICAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICAgIHRoaXMud3JpdGU9cTtcblx0ICAgICAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgfVxuXHQgIH1cblx0fVxuXHRyPVpfT0s7XG5cblx0dCA9IHRoaXMubGVmdDtcblx0aWYodD5uKSB0ID0gbjtcblx0aWYodD5tKSB0ID0gbTtcblx0YXJyYXlDb3B5KHoubmV4dF9pbiwgcCwgdGhpcy53aW5kb3csIHEsIHQpO1xuXHRwICs9IHQ7ICBuIC09IHQ7XG5cdHEgKz0gdDsgIG0gLT0gdDtcblx0aWYgKCh0aGlzLmxlZnQgLT0gdCkgIT0gMClcblx0ICBicmVhaztcblx0dGhpcy5tb2RlID0gKHRoaXMubGFzdCAhPSAwID8gSUJfRFJZIDogSUJfVFlQRSk7XG5cdGJyZWFrO1xuICAgICAgY2FzZSBJQl9UQUJMRTpcblxuXHR3aGlsZShrPCgxNCkpe1xuXHQgIGlmKG4hPTApe1xuXHQgICAgcj1aX09LO1xuXHQgIH1cblx0ICBlbHNle1xuXHQgICAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICAgIHouYXZhaWxfaW49bjtcblx0ICAgIHoudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgdGhpcy53cml0ZT1xO1xuXHQgICAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgIH07XG5cdCAgbi0tO1xuXHQgIGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztcblx0ICBrKz04O1xuXHR9XG5cblx0dGhpcy50YWJsZSA9IHQgPSAoYiAmIDB4M2ZmZik7XG5cdGlmICgodCAmIDB4MWYpID4gMjkgfHwgKCh0ID4+IDUpICYgMHgxZikgPiAyOSlcblx0ICB7XG5cdCAgICB0aGlzLm1vZGUgPSBJQl9CQUQ7XG5cdCAgICB6Lm1zZyA9IFwidG9vIG1hbnkgbGVuZ3RoIG9yIGRpc3RhbmNlIHN5bWJvbHNcIjtcblx0ICAgIHIgPSBaX0RBVEFfRVJST1I7XG5cblx0ICAgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICB0aGlzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfVxuXHR0ID0gMjU4ICsgKHQgJiAweDFmKSArICgodCA+PiA1KSAmIDB4MWYpO1xuXHRpZih0aGlzLmJsZW5zPT1udWxsIHx8IHRoaXMuYmxlbnMubGVuZ3RoPHQpe1xuXHQgICAgdGhpcy5ibGVucz1uZXcgSW50MzJBcnJheSh0KTtcblx0fVxuXHRlbHNle1xuXHQgIGZvcih2YXIgaT0wOyBpPHQ7IGkrKyl7XG4gICAgICAgICAgICAgIHRoaXMuYmxlbnNbaV09MDtcbiAgICAgICAgICB9XG5cdH1cblxuXHR7Yj4+Pj0oMTQpO2stPSgxNCk7fVxuXG5cdHRoaXMuaW5kZXggPSAwO1xuXHRtb2RlID0gSUJfQlRSRUU7XG4gICAgICBjYXNlIElCX0JUUkVFOlxuXHR3aGlsZSAodGhpcy5pbmRleCA8IDQgKyAodGhpcy50YWJsZSA+Pj4gMTApKXtcblx0ICB3aGlsZShrPCgzKSl7XG5cdCAgICBpZihuIT0wKXtcblx0ICAgICAgcj1aX09LO1xuXHQgICAgfVxuXHQgICAgZWxzZXtcblx0ICAgICAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICAgICAgei5hdmFpbF9pbj1uO1xuXHQgICAgICB6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgICAgdGhpcy53cml0ZT1xO1xuXHQgICAgICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgICB9O1xuXHQgICAgbi0tO1xuXHQgICAgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgICAgays9ODtcblx0ICB9XG5cblx0ICB0aGlzLmJsZW5zW0lORkJMT0NLU19CT1JERVJbdGhpcy5pbmRleCsrXV0gPSBiJjc7XG5cblx0ICB7Yj4+Pj0oMyk7ay09KDMpO31cblx0fVxuXG5cdHdoaWxlKHRoaXMuaW5kZXggPCAxOSl7XG5cdCAgdGhpcy5ibGVuc1tJTkZCTE9DS1NfQk9SREVSW3RoaXMuaW5kZXgrK11dID0gMDtcblx0fVxuXG5cdHRoaXMuYmJbMF0gPSA3O1xuXHR0ID0gdGhpcy5pbmZ0cmVlLmluZmxhdGVfdHJlZXNfYml0cyh0aGlzLmJsZW5zLCB0aGlzLmJiLCB0aGlzLnRiLCB0aGlzLmh1ZnRzLCB6KTtcblx0aWYgKHQgIT0gWl9PSyl7XG5cdCAgciA9IHQ7XG5cdCAgaWYgKHIgPT0gWl9EQVRBX0VSUk9SKXtcblx0ICAgIHRoaXMuYmxlbnM9bnVsbDtcblx0ICAgIHRoaXMubW9kZSA9IElCX0JBRDtcblx0ICB9XG5cblx0ICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICB3cml0ZT1xO1xuXHQgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0fVxuXG5cdHRoaXMuaW5kZXggPSAwO1xuXHR0aGlzLm1vZGUgPSBJQl9EVFJFRTtcbiAgICAgIGNhc2UgSUJfRFRSRUU6XG5cdHdoaWxlICh0cnVlKXtcblx0ICB0ID0gdGhpcy50YWJsZTtcblx0ICBpZighKHRoaXMuaW5kZXggPCAyNTggKyAodCAmIDB4MWYpICsgKCh0ID4+IDUpICYgMHgxZikpKXtcblx0ICAgIGJyZWFrO1xuXHQgIH1cblxuXHQgIHZhciBoOyAvL2ludFtdXG5cdCAgdmFyIGksIGosIGM7XG5cblx0ICB0ID0gdGhpcy5iYlswXTtcblxuXHQgIHdoaWxlKGs8KHQpKXtcblx0ICAgIGlmKG4hPTApe1xuXHQgICAgICByPVpfT0s7XG5cdCAgICB9XG5cdCAgICBlbHNle1xuXHQgICAgICB0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHQgICAgICB6LmF2YWlsX2luPW47XG5cdCAgICAgIHoudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgICB0aGlzLndyaXRlPXE7XG5cdCAgICAgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIH07XG5cdCAgICBuLS07XG5cdCAgICBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7XG5cdCAgICBrKz04O1xuXHQgIH1cblxuLy9cdCAgaWYgKHRoaXMudGJbMF09PS0xKXtcbi8vICAgICAgICAgICAgZGxvZyhcIm51bGwuLi5cIik7XG4vL1x0ICB9XG5cblx0ICB0PXRoaXMuaHVmdHNbKHRoaXMudGJbMF0rKGIgJiBpbmZsYXRlX21hc2tbdF0pKSozKzFdO1xuXHQgIGM9dGhpcy5odWZ0c1sodGhpcy50YlswXSsoYiAmIGluZmxhdGVfbWFza1t0XSkpKjMrMl07XG5cblx0ICBpZiAoYyA8IDE2KXtcblx0ICAgIGI+Pj49KHQpO2stPSh0KTtcblx0ICAgIHRoaXMuYmxlbnNbdGhpcy5pbmRleCsrXSA9IGM7XG5cdCAgfVxuXHQgIGVsc2UgeyAvLyBjID09IDE2Li4xOFxuXHQgICAgaSA9IGMgPT0gMTggPyA3IDogYyAtIDE0O1xuXHQgICAgaiA9IGMgPT0gMTggPyAxMSA6IDM7XG5cblx0ICAgIHdoaWxlKGs8KHQraSkpe1xuXHQgICAgICBpZihuIT0wKXtcblx0XHRyPVpfT0s7XG5cdCAgICAgIH1cblx0ICAgICAgZWxzZXtcblx0XHR0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHRcdHouYXZhaWxfaW49bjtcblx0XHR6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0XHR0aGlzLndyaXRlPXE7XG5cdFx0cmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgICB9O1xuXHQgICAgICBuLS07XG5cdCAgICAgIGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztcblx0ICAgICAgays9ODtcblx0ICAgIH1cblxuXHQgICAgYj4+Pj0odCk7ay09KHQpO1xuXG5cdCAgICBqICs9IChiICYgaW5mbGF0ZV9tYXNrW2ldKTtcblxuXHQgICAgYj4+Pj0oaSk7ay09KGkpO1xuXG5cdCAgICBpID0gdGhpcy5pbmRleDtcblx0ICAgIHQgPSB0aGlzLnRhYmxlO1xuXHQgICAgaWYgKGkgKyBqID4gMjU4ICsgKHQgJiAweDFmKSArICgodCA+PiA1KSAmIDB4MWYpIHx8XG5cdFx0KGMgPT0gMTYgJiYgaSA8IDEpKXtcblx0ICAgICAgdGhpcy5ibGVucz1udWxsO1xuXHQgICAgICB0aGlzLm1vZGUgPSBJQl9CQUQ7XG5cdCAgICAgIHoubXNnID0gXCJpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0XCI7XG5cdCAgICAgIHIgPSBaX0RBVEFfRVJST1I7XG5cblx0ICAgICAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICAgICAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgICB0aGlzLndyaXRlPXE7XG5cdCAgICAgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIH1cblxuXHQgICAgYyA9IGMgPT0gMTYgPyB0aGlzLmJsZW5zW2ktMV0gOiAwO1xuXHQgICAgZG97XG5cdCAgICAgIHRoaXMuYmxlbnNbaSsrXSA9IGM7XG5cdCAgICB9XG5cdCAgICB3aGlsZSAoLS1qIT0wKTtcblx0ICAgIHRoaXMuaW5kZXggPSBpO1xuXHQgIH1cblx0fVxuXG5cdHRoaXMudGJbMF09LTE7XG5cdHtcblx0ICAgIHZhciBibD1uZXcgSW50MzJBcnJheSgxKTtcblx0ICAgIHZhciBiZD1uZXcgSW50MzJBcnJheSgxKTtcblx0ICAgIHZhciB0bD1uZXcgSW50MzJBcnJheSgxKTtcblx0ICAgIHZhciB0ZD1uZXcgSW50MzJBcnJheSgxKTtcblx0ICAgIGJsWzBdID0gOTsgICAgICAgICAvLyBtdXN0IGJlIDw9IDkgZm9yIGxvb2thaGVhZCBhc3N1bXB0aW9uc1xuXHQgICAgYmRbMF0gPSA2OyAgICAgICAgIC8vIG11c3QgYmUgPD0gOSBmb3IgbG9va2FoZWFkIGFzc3VtcHRpb25zXG5cblx0ICAgIHQgPSB0aGlzLnRhYmxlO1xuXHQgICAgdCA9IHRoaXMuaW5mdHJlZS5pbmZsYXRlX3RyZWVzX2R5bmFtaWMoMjU3ICsgKHQgJiAweDFmKSwgXG5cdFx0XHRcdFx0ICAgICAgMSArICgodCA+PiA1KSAmIDB4MWYpLFxuXHRcdFx0XHRcdCAgICAgIHRoaXMuYmxlbnMsIGJsLCBiZCwgdGwsIHRkLCB0aGlzLmh1ZnRzLCB6KTtcblxuXHQgICAgaWYgKHQgIT0gWl9PSyl7XG5cdCAgICAgICAgaWYgKHQgPT0gWl9EQVRBX0VSUk9SKXtcblx0ICAgICAgICAgICAgdGhpcy5ibGVucz1udWxsO1xuXHQgICAgICAgICAgICB0aGlzLm1vZGUgPSBCQUQ7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHIgPSB0O1xuXG5cdCAgICAgICAgdGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ICAgICAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICAgICAgdGhpcy53cml0ZT1xO1xuXHQgICAgICAgIHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgIH1cblx0ICAgIHRoaXMuY29kZXMuaW5pdChibFswXSwgYmRbMF0sIHRoaXMuaHVmdHMsIHRsWzBdLCB0aGlzLmh1ZnRzLCB0ZFswXSwgeik7XG5cdH1cblx0dGhpcy5tb2RlID0gSUJfQ09ERVM7XG4gICAgICBjYXNlIElCX0NPREVTOlxuXHR0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7XG5cdHouYXZhaWxfaW49bjsgei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdHRoaXMud3JpdGU9cTtcblxuXHRpZiAoKHIgPSB0aGlzLmNvZGVzLnByb2ModGhpcywgeiwgcikpICE9IFpfU1RSRUFNX0VORCl7XG5cdCAgcmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcblx0fVxuXHRyID0gWl9PSztcblx0dGhpcy5jb2Rlcy5mcmVlKHopO1xuXG5cdHA9ei5uZXh0X2luX2luZGV4OyBuPXouYXZhaWxfaW47Yj10aGlzLmJpdGI7az10aGlzLmJpdGs7XG5cdHE9dGhpcy53cml0ZTttID0gKHEgPCB0aGlzLnJlYWQgPyB0aGlzLnJlYWQtcS0xIDogdGhpcy5lbmQtcSk7XG5cblx0aWYgKHRoaXMubGFzdD09MCl7XG5cdCAgdGhpcy5tb2RlID0gSUJfVFlQRTtcblx0ICBicmVhaztcblx0fVxuXHR0aGlzLm1vZGUgPSBJQl9EUlk7XG4gICAgICBjYXNlIElCX0RSWTpcblx0dGhpcy53cml0ZT1xOyBcblx0ciA9IHRoaXMuaW5mbGF0ZV9mbHVzaCh6LCByKTsgXG5cdHE9dGhpcy53cml0ZTsgbSA9IChxIDwgdGhpcy5yZWFkID8gdGhpcy5yZWFkLXEtMSA6IHRoaXMuZW5kLXEpO1xuXHRpZiAodGhpcy5yZWFkICE9IHRoaXMud3JpdGUpe1xuXHQgIHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHRoaXMud3JpdGU9cTtcblx0ICByZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuXHR9XG5cdG1vZGUgPSBET05FO1xuICAgICAgY2FzZSBJQl9ET05FOlxuXHRyID0gWl9TVFJFQU1fRU5EO1xuXG5cdHRoaXMuYml0Yj1iOyB0aGlzLmJpdGs9azsgXG5cdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0dGhpcy53cml0ZT1xO1xuXHRyZXR1cm4gdGhpcy5pbmZsYXRlX2ZsdXNoKHosIHIpO1xuICAgICAgY2FzZSBJQl9CQUQ6XG5cdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0dGhpcy5iaXRiPWI7IHRoaXMuYml0az1rOyBcblx0ei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHR0aGlzLndyaXRlPXE7XG5cdHJldHVybiB0aGlzLmluZmxhdGVfZmx1c2goeiwgcik7XG5cbiAgICAgIGRlZmF1bHQ6XG5cdHIgPSBaX1NUUkVBTV9FUlJPUjtcblxuXHR0aGlzLmJpdGI9YjsgdGhpcy5iaXRrPWs7IFxuXHR6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdHRoaXMud3JpdGU9cTtcblx0cmV0dXJuIHRoaXMuaW5mbGF0ZV9mbHVzaCh6LCByKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuSW5mQmxvY2tzLnByb3RvdHlwZS5mcmVlID0gZnVuY3Rpb24oeil7XG4gICAgdGhpcy5yZXNldCh6LCBudWxsKTtcbiAgICB0aGlzLndpbmRvdz1udWxsO1xuICAgIHRoaXMuaHVmdHM9bnVsbDtcbn1cblxuSW5mQmxvY2tzLnByb3RvdHlwZS5zZXRfZGljdGlvbmFyeSA9IGZ1bmN0aW9uKGQsIHN0YXJ0LCBuKXtcbiAgICBhcnJheUNvcHkoZCwgc3RhcnQsIHdpbmRvdywgMCwgbik7XG4gICAgdGhpcy5yZWFkID0gdGhpcy53cml0ZSA9IG47XG59XG5cbiAgLy8gUmV0dXJucyB0cnVlIGlmIGluZmxhdGUgaXMgY3VycmVudGx5IGF0IHRoZSBlbmQgb2YgYSBibG9jayBnZW5lcmF0ZWRcbiAgLy8gYnkgWl9TWU5DX0ZMVVNIIG9yIFpfRlVMTF9GTFVTSC4gXG5JbmZCbG9ja3MucHJvdG90eXBlLnN5bmNfcG9pbnQgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB0aGlzLm1vZGUgPT0gSUJfTEVOUztcbn1cblxuICAvLyBjb3B5IGFzIG11Y2ggYXMgcG9zc2libGUgZnJvbSB0aGUgc2xpZGluZyB3aW5kb3cgdG8gdGhlIG91dHB1dCBhcmVhXG5JbmZCbG9ja3MucHJvdG90eXBlLmluZmxhdGVfZmx1c2ggPSBmdW5jdGlvbih6LCByKXtcbiAgICB2YXIgbjtcbiAgICB2YXIgcDtcbiAgICB2YXIgcTtcblxuICAgIC8vIGxvY2FsIGNvcGllcyBvZiBzb3VyY2UgYW5kIGRlc3RpbmF0aW9uIHBvaW50ZXJzXG4gICAgcCA9IHoubmV4dF9vdXRfaW5kZXg7XG4gICAgcSA9IHRoaXMucmVhZDtcblxuICAgIC8vIGNvbXB1dGUgbnVtYmVyIG9mIGJ5dGVzIHRvIGNvcHkgYXMgZmFyIGFzIGVuZCBvZiB3aW5kb3dcbiAgICBuID0gKChxIDw9IHRoaXMud3JpdGUgPyB0aGlzLndyaXRlIDogdGhpcy5lbmQpIC0gcSk7XG4gICAgaWYgKG4gPiB6LmF2YWlsX291dCkgbiA9IHouYXZhaWxfb3V0O1xuICAgIGlmIChuIT0wICYmIHIgPT0gWl9CVUZfRVJST1IpIHIgPSBaX09LO1xuXG4gICAgLy8gdXBkYXRlIGNvdW50ZXJzXG4gICAgei5hdmFpbF9vdXQgLT0gbjtcbiAgICB6LnRvdGFsX291dCArPSBuO1xuXG4gICAgLy8gdXBkYXRlIGNoZWNrIGluZm9ybWF0aW9uXG4gICAgaWYodGhpcy5jaGVja2ZuICE9IG51bGwpXG4gICAgICB6LmFkbGVyPXRoaXMuY2hlY2s9ei5fYWRsZXIuYWRsZXIzMih0aGlzLmNoZWNrLCB0aGlzLndpbmRvdywgcSwgbik7XG5cbiAgICAvLyBjb3B5IGFzIGZhciBhcyBlbmQgb2Ygd2luZG93XG4gICAgYXJyYXlDb3B5KHRoaXMud2luZG93LCBxLCB6Lm5leHRfb3V0LCBwLCBuKTtcbiAgICBwICs9IG47XG4gICAgcSArPSBuO1xuXG4gICAgLy8gc2VlIGlmIG1vcmUgdG8gY29weSBhdCBiZWdpbm5pbmcgb2Ygd2luZG93XG4gICAgaWYgKHEgPT0gdGhpcy5lbmQpe1xuICAgICAgLy8gd3JhcCBwb2ludGVyc1xuICAgICAgcSA9IDA7XG4gICAgICBpZiAodGhpcy53cml0ZSA9PSB0aGlzLmVuZClcbiAgICAgICAgdGhpcy53cml0ZSA9IDA7XG5cbiAgICAgIC8vIGNvbXB1dGUgYnl0ZXMgdG8gY29weVxuICAgICAgbiA9IHRoaXMud3JpdGUgLSBxO1xuICAgICAgaWYgKG4gPiB6LmF2YWlsX291dCkgbiA9IHouYXZhaWxfb3V0O1xuICAgICAgaWYgKG4hPTAgJiYgciA9PSBaX0JVRl9FUlJPUikgciA9IFpfT0s7XG5cbiAgICAgIC8vIHVwZGF0ZSBjb3VudGVyc1xuICAgICAgei5hdmFpbF9vdXQgLT0gbjtcbiAgICAgIHoudG90YWxfb3V0ICs9IG47XG5cbiAgICAgIC8vIHVwZGF0ZSBjaGVjayBpbmZvcm1hdGlvblxuICAgICAgaWYodGhpcy5jaGVja2ZuICE9IG51bGwpXG5cdHouYWRsZXI9dGhpcy5jaGVjaz16Ll9hZGxlci5hZGxlcjMyKHRoaXMuY2hlY2ssIHRoaXMud2luZG93LCBxLCBuKTtcblxuICAgICAgLy8gY29weVxuICAgICAgYXJyYXlDb3B5KHRoaXMud2luZG93LCBxLCB6Lm5leHRfb3V0LCBwLCBuKTtcbiAgICAgIHAgKz0gbjtcbiAgICAgIHEgKz0gbjtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgcG9pbnRlcnNcbiAgICB6Lm5leHRfb3V0X2luZGV4ID0gcDtcbiAgICB0aGlzLnJlYWQgPSBxO1xuXG4gICAgLy8gZG9uZVxuICAgIHJldHVybiByO1xuICB9XG5cbi8vXG4vLyBJbmZDb2Rlcy5qYXZhXG4vL1xuXG52YXIgSUNfU1RBUlQ9MDsgIC8vIHg6IHNldCB1cCBmb3IgTEVOXG52YXIgSUNfTEVOPTE7ICAgIC8vIGk6IGdldCBsZW5ndGgvbGl0ZXJhbC9lb2IgbmV4dFxudmFyIElDX0xFTkVYVD0yOyAvLyBpOiBnZXR0aW5nIGxlbmd0aCBleHRyYSAoaGF2ZSBiYXNlKVxudmFyIElDX0RJU1Q9MzsgICAvLyBpOiBnZXQgZGlzdGFuY2UgbmV4dFxudmFyIElDX0RJU1RFWFQ9NDsvLyBpOiBnZXR0aW5nIGRpc3RhbmNlIGV4dHJhXG52YXIgSUNfQ09QWT01OyAgIC8vIG86IGNvcHlpbmcgYnl0ZXMgaW4gd2luZG93LCB3YWl0aW5nIGZvciBzcGFjZVxudmFyIElDX0xJVD02OyAgICAvLyBvOiBnb3QgbGl0ZXJhbCwgd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlXG52YXIgSUNfV0FTSD03OyAgIC8vIG86IGdvdCBlb2IsIHBvc3NpYmx5IHN0aWxsIG91dHB1dCB3YWl0aW5nXG52YXIgSUNfRU5EPTg7ICAgIC8vIHg6IGdvdCBlb2IgYW5kIGFsbCBkYXRhIGZsdXNoZWRcbnZhciBJQ19CQURDT0RFPTk7Ly8geDogZ290IGVycm9yXG5cbmZ1bmN0aW9uIEluZkNvZGVzKCkge1xufVxuXG5JbmZDb2Rlcy5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGJsLCBiZCwgdGwsIHRsX2luZGV4LCB0ZCwgdGRfaW5kZXgsIHopIHtcbiAgICB0aGlzLm1vZGU9SUNfU1RBUlQ7XG4gICAgdGhpcy5sYml0cz1ibDtcbiAgICB0aGlzLmRiaXRzPWJkO1xuICAgIHRoaXMubHRyZWU9dGw7XG4gICAgdGhpcy5sdHJlZV9pbmRleD10bF9pbmRleDtcbiAgICB0aGlzLmR0cmVlID0gdGQ7XG4gICAgdGhpcy5kdHJlZV9pbmRleD10ZF9pbmRleDtcbiAgICB0aGlzLnRyZWU9bnVsbDtcbn1cblxuSW5mQ29kZXMucHJvdG90eXBlLnByb2MgPSBmdW5jdGlvbihzLCB6LCByKXsgXG4gICAgdmFyIGo7ICAgICAgICAgICAgICAvLyB0ZW1wb3Jhcnkgc3RvcmFnZVxuICAgIHZhciB0OyAgICAgICAgICAgICAgLy8gdGVtcG9yYXJ5IHBvaW50ZXIgKGludFtdKVxuICAgIHZhciB0aW5kZXg7ICAgICAgICAgLy8gdGVtcG9yYXJ5IHBvaW50ZXJcbiAgICB2YXIgZTsgICAgICAgICAgICAgIC8vIGV4dHJhIGJpdHMgb3Igb3BlcmF0aW9uXG4gICAgdmFyIGI9MDsgICAgICAgICAgICAvLyBiaXQgYnVmZmVyXG4gICAgdmFyIGs9MDsgICAgICAgICAgICAvLyBiaXRzIGluIGJpdCBidWZmZXJcbiAgICB2YXIgcD0wOyAgICAgICAgICAgIC8vIGlucHV0IGRhdGEgcG9pbnRlclxuICAgIHZhciBuOyAgICAgICAgICAgICAgLy8gYnl0ZXMgYXZhaWxhYmxlIHRoZXJlXG4gICAgdmFyIHE7ICAgICAgICAgICAgICAvLyBvdXRwdXQgd2luZG93IHdyaXRlIHBvaW50ZXJcbiAgICB2YXIgbTsgICAgICAgICAgICAgIC8vIGJ5dGVzIHRvIGVuZCBvZiB3aW5kb3cgb3IgcmVhZCBwb2ludGVyXG4gICAgdmFyIGY7ICAgICAgICAgICAgICAvLyBwb2ludGVyIHRvIGNvcHkgc3RyaW5ncyBmcm9tXG5cbiAgICAvLyBjb3B5IGlucHV0L291dHB1dCBpbmZvcm1hdGlvbiB0byBsb2NhbHMgKFVQREFURSBtYWNybyByZXN0b3JlcylcbiAgICBwPXoubmV4dF9pbl9pbmRleDtuPXouYXZhaWxfaW47Yj1zLmJpdGI7az1zLmJpdGs7XG4gICAgcT1zLndyaXRlO209cTxzLnJlYWQ/cy5yZWFkLXEtMTpzLmVuZC1xO1xuXG4gICAgLy8gcHJvY2VzcyBpbnB1dCBhbmQgb3V0cHV0IGJhc2VkIG9uIGN1cnJlbnQgc3RhdGVcbiAgICB3aGlsZSAodHJ1ZSl7XG4gICAgICBzd2l0Y2ggKHRoaXMubW9kZSl7XG5cdC8vIHdhaXRpbmcgZm9yIFwiaTpcIj1pbnB1dCwgXCJvOlwiPW91dHB1dCwgXCJ4OlwiPW5vdGhpbmdcbiAgICAgIGNhc2UgSUNfU1RBUlQ6ICAgICAgICAgLy8geDogc2V0IHVwIGZvciBMRU5cblx0aWYgKG0gPj0gMjU4ICYmIG4gPj0gMTApe1xuXG5cdCAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHMud3JpdGU9cTtcblx0ICByID0gdGhpcy5pbmZsYXRlX2Zhc3QodGhpcy5sYml0cywgdGhpcy5kYml0cywgXG5cdFx0XHQgICB0aGlzLmx0cmVlLCB0aGlzLmx0cmVlX2luZGV4LCBcblx0XHRcdCAgIHRoaXMuZHRyZWUsIHRoaXMuZHRyZWVfaW5kZXgsXG5cdFx0XHQgICBzLCB6KTtcblxuXHQgIHA9ei5uZXh0X2luX2luZGV4O249ei5hdmFpbF9pbjtiPXMuYml0YjtrPXMuYml0aztcblx0ICBxPXMud3JpdGU7bT1xPHMucmVhZD9zLnJlYWQtcS0xOnMuZW5kLXE7XG5cblx0ICBpZiAociAhPSBaX09LKXtcblx0ICAgIHRoaXMubW9kZSA9IHIgPT0gWl9TVFJFQU1fRU5EID8gSUNfV0FTSCA6IElDX0JBRENPREU7XG5cdCAgICBicmVhaztcblx0ICB9XG5cdH1cblx0dGhpcy5uZWVkID0gdGhpcy5sYml0cztcblx0dGhpcy50cmVlID0gdGhpcy5sdHJlZTtcblx0dGhpcy50cmVlX2luZGV4PXRoaXMubHRyZWVfaW5kZXg7XG5cblx0dGhpcy5tb2RlID0gSUNfTEVOO1xuICAgICAgY2FzZSBJQ19MRU46ICAgICAgICAgICAvLyBpOiBnZXQgbGVuZ3RoL2xpdGVyYWwvZW9iIG5leHRcblx0aiA9IHRoaXMubmVlZDtcblxuXHR3aGlsZShrPChqKSl7XG5cdCAgaWYobiE9MClyPVpfT0s7XG5cdCAgZWxzZXtcblxuXHQgICAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICBzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfVxuXHQgIG4tLTtcblx0ICBifD0oei5uZXh0X2luW3ArK10mMHhmZik8PGs7XG5cdCAgays9ODtcblx0fVxuXG5cdHRpbmRleD0odGhpcy50cmVlX2luZGV4KyhiJmluZmxhdGVfbWFza1tqXSkpKjM7XG5cblx0Yj4+Pj0odGhpcy50cmVlW3RpbmRleCsxXSk7XG5cdGstPSh0aGlzLnRyZWVbdGluZGV4KzFdKTtcblxuXHRlPXRoaXMudHJlZVt0aW5kZXhdO1xuXG5cdGlmKGUgPT0gMCl7ICAgICAgICAgICAgICAgLy8gbGl0ZXJhbFxuXHQgIHRoaXMubGl0ID0gdGhpcy50cmVlW3RpbmRleCsyXTtcblx0ICB0aGlzLm1vZGUgPSBJQ19MSVQ7XG5cdCAgYnJlYWs7XG5cdH1cblx0aWYoKGUgJiAxNikhPTAgKXsgICAgICAgICAgLy8gbGVuZ3RoXG5cdCAgdGhpcy5nZXQgPSBlICYgMTU7XG5cdCAgdGhpcy5sZW4gPSB0aGlzLnRyZWVbdGluZGV4KzJdO1xuXHQgIHRoaXMubW9kZSA9IElDX0xFTkVYVDtcblx0ICBicmVhaztcblx0fVxuXHRpZiAoKGUgJiA2NCkgPT0gMCl7ICAgICAgICAvLyBuZXh0IHRhYmxlXG5cdCAgdGhpcy5uZWVkID0gZTtcblx0ICB0aGlzLnRyZWVfaW5kZXggPSB0aW5kZXgvMyArIHRoaXMudHJlZVt0aW5kZXgrMl07XG5cdCAgYnJlYWs7XG5cdH1cblx0aWYgKChlICYgMzIpIT0wKXsgICAgICAgICAgICAgICAvLyBlbmQgb2YgYmxvY2tcblx0ICB0aGlzLm1vZGUgPSBJQ19XQVNIO1xuXHQgIGJyZWFrO1xuXHR9XG5cdHRoaXMubW9kZSA9IElDX0JBRENPREU7ICAgICAgICAvLyBpbnZhbGlkIGNvZGVcblx0ei5tc2cgPSBcImludmFsaWQgbGl0ZXJhbC9sZW5ndGggY29kZVwiO1xuXHRyID0gWl9EQVRBX0VSUk9SO1xuXG5cdHMuYml0Yj1iO3MuYml0az1rO1xuXHR6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdHMud3JpdGU9cTtcblx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXG4gICAgICBjYXNlIElDX0xFTkVYVDogICAgICAgIC8vIGk6IGdldHRpbmcgbGVuZ3RoIGV4dHJhIChoYXZlIGJhc2UpXG5cdGogPSB0aGlzLmdldDtcblxuXHR3aGlsZShrPChqKSl7XG5cdCAgaWYobiE9MClyPVpfT0s7XG5cdCAgZWxzZXtcblxuXHQgICAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICBzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfVxuXHQgIG4tLTsgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgIGsrPTg7XG5cdH1cblxuXHR0aGlzLmxlbiArPSAoYiAmIGluZmxhdGVfbWFza1tqXSk7XG5cblx0Yj4+PWo7XG5cdGstPWo7XG5cblx0dGhpcy5uZWVkID0gdGhpcy5kYml0cztcblx0dGhpcy50cmVlID0gdGhpcy5kdHJlZTtcblx0dGhpcy50cmVlX2luZGV4ID0gdGhpcy5kdHJlZV9pbmRleDtcblx0dGhpcy5tb2RlID0gSUNfRElTVDtcbiAgICAgIGNhc2UgSUNfRElTVDogICAgICAgICAgLy8gaTogZ2V0IGRpc3RhbmNlIG5leHRcblx0aiA9IHRoaXMubmVlZDtcblxuXHR3aGlsZShrPChqKSl7XG5cdCAgaWYobiE9MClyPVpfT0s7XG5cdCAgZWxzZXtcblxuXHQgICAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgICBzLndyaXRlPXE7XG5cdCAgICByZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgfVxuXHQgIG4tLTsgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO1xuXHQgIGsrPTg7XG5cdH1cblxuXHR0aW5kZXg9KHRoaXMudHJlZV9pbmRleCsoYiAmIGluZmxhdGVfbWFza1tqXSkpKjM7XG5cblx0Yj4+PXRoaXMudHJlZVt0aW5kZXgrMV07XG5cdGstPXRoaXMudHJlZVt0aW5kZXgrMV07XG5cblx0ZSA9ICh0aGlzLnRyZWVbdGluZGV4XSk7XG5cdGlmKChlICYgMTYpIT0wKXsgICAgICAgICAgICAgICAvLyBkaXN0YW5jZVxuXHQgIHRoaXMuZ2V0ID0gZSAmIDE1O1xuXHQgIHRoaXMuZGlzdCA9IHRoaXMudHJlZVt0aW5kZXgrMl07XG5cdCAgdGhpcy5tb2RlID0gSUNfRElTVEVYVDtcblx0ICBicmVhaztcblx0fVxuXHRpZiAoKGUgJiA2NCkgPT0gMCl7ICAgICAgICAvLyBuZXh0IHRhYmxlXG5cdCAgdGhpcy5uZWVkID0gZTtcblx0ICB0aGlzLnRyZWVfaW5kZXggPSB0aW5kZXgvMyArIHRoaXMudHJlZVt0aW5kZXgrMl07XG5cdCAgYnJlYWs7XG5cdH1cblx0dGhpcy5tb2RlID0gSUNfQkFEQ09ERTsgICAgICAgIC8vIGludmFsaWQgY29kZVxuXHR6Lm1zZyA9IFwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCI7XG5cdHIgPSBaX0RBVEFfRVJST1I7XG5cblx0cy5iaXRiPWI7cy5iaXRrPWs7XG5cdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0cy53cml0ZT1xO1xuXHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cbiAgICAgIGNhc2UgSUNfRElTVEVYVDogICAgICAgLy8gaTogZ2V0dGluZyBkaXN0YW5jZSBleHRyYVxuXHRqID0gdGhpcy5nZXQ7XG5cblx0d2hpbGUoazwoaikpe1xuXHQgIGlmKG4hPTApcj1aX09LO1xuXHQgIGVsc2V7XG5cblx0ICAgIHMuYml0Yj1iO3MuYml0az1rO1xuXHQgICAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgcy53cml0ZT1xO1xuXHQgICAgcmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgIH1cblx0ICBuLS07IGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztcblx0ICBrKz04O1xuXHR9XG5cblx0dGhpcy5kaXN0ICs9IChiICYgaW5mbGF0ZV9tYXNrW2pdKTtcblxuXHRiPj49ajtcblx0ay09ajtcblxuXHR0aGlzLm1vZGUgPSBJQ19DT1BZO1xuICAgICAgY2FzZSBJQ19DT1BZOiAgICAgICAgICAvLyBvOiBjb3B5aW5nIGJ5dGVzIGluIHdpbmRvdywgd2FpdGluZyBmb3Igc3BhY2VcbiAgICAgICAgZiA9IHEgLSB0aGlzLmRpc3Q7XG4gICAgICAgIHdoaWxlKGYgPCAwKXsgICAgIC8vIG1vZHVsbyB3aW5kb3cgc2l6ZS1cIndoaWxlXCIgaW5zdGVhZFxuICAgICAgICAgIGYgKz0gcy5lbmQ7ICAgICAvLyBvZiBcImlmXCIgaGFuZGxlcyBpbnZhbGlkIGRpc3RhbmNlc1xuXHR9XG5cdHdoaWxlICh0aGlzLmxlbiE9MCl7XG5cblx0ICBpZihtPT0wKXtcblx0ICAgIGlmKHE9PXMuZW5kJiZzLnJlYWQhPTApe3E9MDttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTt9XG5cdCAgICBpZihtPT0wKXtcblx0ICAgICAgcy53cml0ZT1xOyByPXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHQgICAgICBxPXMud3JpdGU7bT1xPHMucmVhZD9zLnJlYWQtcS0xOnMuZW5kLXE7XG5cblx0ICAgICAgaWYocT09cy5lbmQmJnMucmVhZCE9MCl7cT0wO209cTxzLnJlYWQ/cy5yZWFkLXEtMTpzLmVuZC1xO31cblxuXHQgICAgICBpZihtPT0wKXtcblx0XHRzLmJpdGI9YjtzLmJpdGs9aztcblx0XHR6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdFx0cy53cml0ZT1xO1xuXHRcdHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblx0ICAgICAgfSAgXG5cdCAgICB9XG5cdCAgfVxuXG5cdCAgcy53aW5kb3dbcSsrXT1zLndpbmRvd1tmKytdOyBtLS07XG5cblx0ICBpZiAoZiA9PSBzLmVuZClcbiAgICAgICAgICAgIGYgPSAwO1xuXHQgIHRoaXMubGVuLS07XG5cdH1cblx0dGhpcy5tb2RlID0gSUNfU1RBUlQ7XG5cdGJyZWFrO1xuICAgICAgY2FzZSBJQ19MSVQ6ICAgICAgICAgICAvLyBvOiBnb3QgbGl0ZXJhbCwgd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlXG5cdGlmKG09PTApe1xuXHQgIGlmKHE9PXMuZW5kJiZzLnJlYWQhPTApe3E9MDttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTt9XG5cdCAgaWYobT09MCl7XG5cdCAgICBzLndyaXRlPXE7IHI9cy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgICBxPXMud3JpdGU7bT1xPHMucmVhZD9zLnJlYWQtcS0xOnMuZW5kLXE7XG5cblx0ICAgIGlmKHE9PXMuZW5kJiZzLnJlYWQhPTApe3E9MDttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTt9XG5cdCAgICBpZihtPT0wKXtcblx0ICAgICAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgICAgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICAgICAgcy53cml0ZT1xO1xuXHQgICAgICByZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cdCAgICB9XG5cdCAgfVxuXHR9XG5cdHI9Wl9PSztcblxuXHRzLndpbmRvd1txKytdPXRoaXMubGl0OyBtLS07XG5cblx0dGhpcy5tb2RlID0gSUNfU1RBUlQ7XG5cdGJyZWFrO1xuICAgICAgY2FzZSBJQ19XQVNIOiAgICAgICAgICAgLy8gbzogZ290IGVvYiwgcG9zc2libHkgbW9yZSBvdXRwdXRcblx0aWYgKGsgPiA3KXsgICAgICAgIC8vIHJldHVybiB1bnVzZWQgYnl0ZSwgaWYgYW55XG5cdCAgayAtPSA4O1xuXHQgIG4rKztcblx0ICBwLS07ICAgICAgICAgICAgIC8vIGNhbiBhbHdheXMgcmV0dXJuIG9uZVxuXHR9XG5cblx0cy53cml0ZT1xOyByPXMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuXHRxPXMud3JpdGU7bT1xPHMucmVhZD9zLnJlYWQtcS0xOnMuZW5kLXE7XG5cblx0aWYgKHMucmVhZCAhPSBzLndyaXRlKXtcblx0ICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICB6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdCAgcy53cml0ZT1xO1xuXHQgIHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblx0fVxuXHR0aGlzLm1vZGUgPSBJQ19FTkQ7XG4gICAgICBjYXNlIElDX0VORDpcblx0ciA9IFpfU1RSRUFNX0VORDtcblx0cy5iaXRiPWI7cy5iaXRrPWs7XG5cdHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0cy53cml0ZT1xO1xuXHRyZXR1cm4gcy5pbmZsYXRlX2ZsdXNoKHoscik7XG5cbiAgICAgIGNhc2UgSUNfQkFEQ09ERTogICAgICAgLy8geDogZ290IGVycm9yXG5cblx0ciA9IFpfREFUQV9FUlJPUjtcblxuXHRzLmJpdGI9YjtzLmJpdGs9aztcblx0ei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHRzLndyaXRlPXE7XG5cdHJldHVybiBzLmluZmxhdGVfZmx1c2goeixyKTtcblxuICAgICAgZGVmYXVsdDpcblx0ciA9IFpfU1RSRUFNX0VSUk9SO1xuXG5cdHMuYml0Yj1iO3MuYml0az1rO1xuXHR6LmF2YWlsX2luPW47ei50b3RhbF9pbis9cC16Lm5leHRfaW5faW5kZXg7ei5uZXh0X2luX2luZGV4PXA7XG5cdHMud3JpdGU9cTtcblx0cmV0dXJuIHMuaW5mbGF0ZV9mbHVzaCh6LHIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5JbmZDb2Rlcy5wcm90b3R5cGUuZnJlZSA9IGZ1bmN0aW9uKHope1xuICAgIC8vICBaRlJFRSh6LCBjKTtcbn1cblxuICAvLyBDYWxsZWQgd2l0aCBudW1iZXIgb2YgYnl0ZXMgbGVmdCB0byB3cml0ZSBpbiB3aW5kb3cgYXQgbGVhc3QgMjU4XG4gIC8vICh0aGUgbWF4aW11bSBzdHJpbmcgbGVuZ3RoKSBhbmQgbnVtYmVyIG9mIGlucHV0IGJ5dGVzIGF2YWlsYWJsZVxuICAvLyBhdCBsZWFzdCB0ZW4uICBUaGUgdGVuIGJ5dGVzIGFyZSBzaXggYnl0ZXMgZm9yIHRoZSBsb25nZXN0IGxlbmd0aC9cbiAgLy8gZGlzdGFuY2UgcGFpciBwbHVzIGZvdXIgYnl0ZXMgZm9yIG92ZXJsb2FkaW5nIHRoZSBiaXQgYnVmZmVyLlxuXG5JbmZDb2Rlcy5wcm90b3R5cGUuaW5mbGF0ZV9mYXN0ID0gZnVuY3Rpb24oYmwsIGJkLCB0bCwgdGxfaW5kZXgsIHRkLCB0ZF9pbmRleCwgcywgeikge1xuICAgIHZhciB0OyAgICAgICAgICAgICAgICAvLyB0ZW1wb3JhcnkgcG9pbnRlclxuICAgIHZhciAgIHRwOyAgICAgICAgICAgICAvLyB0ZW1wb3JhcnkgcG9pbnRlciAoaW50W10pXG4gICAgdmFyIHRwX2luZGV4OyAgICAgICAgIC8vIHRlbXBvcmFyeSBwb2ludGVyXG4gICAgdmFyIGU7ICAgICAgICAgICAgICAgIC8vIGV4dHJhIGJpdHMgb3Igb3BlcmF0aW9uXG4gICAgdmFyIGI7ICAgICAgICAgICAgICAgIC8vIGJpdCBidWZmZXJcbiAgICB2YXIgazsgICAgICAgICAgICAgICAgLy8gYml0cyBpbiBiaXQgYnVmZmVyXG4gICAgdmFyIHA7ICAgICAgICAgICAgICAgIC8vIGlucHV0IGRhdGEgcG9pbnRlclxuICAgIHZhciBuOyAgICAgICAgICAgICAgICAvLyBieXRlcyBhdmFpbGFibGUgdGhlcmVcbiAgICB2YXIgcTsgICAgICAgICAgICAgICAgLy8gb3V0cHV0IHdpbmRvdyB3cml0ZSBwb2ludGVyXG4gICAgdmFyIG07ICAgICAgICAgICAgICAgIC8vIGJ5dGVzIHRvIGVuZCBvZiB3aW5kb3cgb3IgcmVhZCBwb2ludGVyXG4gICAgdmFyIG1sOyAgICAgICAgICAgICAgIC8vIG1hc2sgZm9yIGxpdGVyYWwvbGVuZ3RoIHRyZWVcbiAgICB2YXIgbWQ7ICAgICAgICAgICAgICAgLy8gbWFzayBmb3IgZGlzdGFuY2UgdHJlZVxuICAgIHZhciBjOyAgICAgICAgICAgICAgICAvLyBieXRlcyB0byBjb3B5XG4gICAgdmFyIGQ7ICAgICAgICAgICAgICAgIC8vIGRpc3RhbmNlIGJhY2sgdG8gY29weSBmcm9tXG4gICAgdmFyIHI7ICAgICAgICAgICAgICAgIC8vIGNvcHkgc291cmNlIHBvaW50ZXJcblxuICAgIHZhciB0cF9pbmRleF90XzM7ICAgICAvLyAodHBfaW5kZXgrdCkqM1xuXG4gICAgLy8gbG9hZCBpbnB1dCwgb3V0cHV0LCBiaXQgdmFsdWVzXG4gICAgcD16Lm5leHRfaW5faW5kZXg7bj16LmF2YWlsX2luO2I9cy5iaXRiO2s9cy5iaXRrO1xuICAgIHE9cy53cml0ZTttPXE8cy5yZWFkP3MucmVhZC1xLTE6cy5lbmQtcTtcblxuICAgIC8vIGluaXRpYWxpemUgbWFza3NcbiAgICBtbCA9IGluZmxhdGVfbWFza1tibF07XG4gICAgbWQgPSBpbmZsYXRlX21hc2tbYmRdO1xuXG4gICAgLy8gZG8gdW50aWwgbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQgc3BhY2UgZm9yIGZhc3QgbG9vcFxuICAgIGRvIHsgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFzc3VtZSBjYWxsZWQgd2l0aCBtID49IDI1OCAmJiBuID49IDEwXG4gICAgICAvLyBnZXQgbGl0ZXJhbC9sZW5ndGggY29kZVxuICAgICAgd2hpbGUoazwoMjApKXsgICAgICAgICAgICAgIC8vIG1heCBiaXRzIGZvciBsaXRlcmFsL2xlbmd0aCBjb2RlXG5cdG4tLTtcblx0Ynw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO2srPTg7XG4gICAgICB9XG5cbiAgICAgIHQ9IGImbWw7XG4gICAgICB0cD10bDsgXG4gICAgICB0cF9pbmRleD10bF9pbmRleDtcbiAgICAgIHRwX2luZGV4X3RfMz0odHBfaW5kZXgrdCkqMztcbiAgICAgIGlmICgoZSA9IHRwW3RwX2luZGV4X3RfM10pID09IDApe1xuXHRiPj49KHRwW3RwX2luZGV4X3RfMysxXSk7IGstPSh0cFt0cF9pbmRleF90XzMrMV0pO1xuXG5cdHMud2luZG93W3ErK10gPSB0cFt0cF9pbmRleF90XzMrMl07XG5cdG0tLTtcblx0Y29udGludWU7XG4gICAgICB9XG4gICAgICBkbyB7XG5cblx0Yj4+PSh0cFt0cF9pbmRleF90XzMrMV0pOyBrLT0odHBbdHBfaW5kZXhfdF8zKzFdKTtcblxuXHRpZigoZSYxNikhPTApe1xuXHQgIGUgJj0gMTU7XG5cdCAgYyA9IHRwW3RwX2luZGV4X3RfMysyXSArIChiICYgaW5mbGF0ZV9tYXNrW2VdKTtcblxuXHQgIGI+Pj1lOyBrLT1lO1xuXG5cdCAgLy8gZGVjb2RlIGRpc3RhbmNlIGJhc2Ugb2YgYmxvY2sgdG8gY29weVxuXHQgIHdoaWxlKGs8KDE1KSl7ICAgICAgICAgICAvLyBtYXggYml0cyBmb3IgZGlzdGFuY2UgY29kZVxuXHQgICAgbi0tO1xuXHQgICAgYnw9KHoubmV4dF9pbltwKytdJjB4ZmYpPDxrO2srPTg7XG5cdCAgfVxuXG5cdCAgdD0gYiZtZDtcblx0ICB0cD10ZDtcblx0ICB0cF9pbmRleD10ZF9pbmRleDtcbiAgICAgICAgICB0cF9pbmRleF90XzM9KHRwX2luZGV4K3QpKjM7XG5cdCAgZSA9IHRwW3RwX2luZGV4X3RfM107XG5cblx0ICBkbyB7XG5cblx0ICAgIGI+Pj0odHBbdHBfaW5kZXhfdF8zKzFdKTsgay09KHRwW3RwX2luZGV4X3RfMysxXSk7XG5cblx0ICAgIGlmKChlJjE2KSE9MCl7XG5cdCAgICAgIC8vIGdldCBleHRyYSBiaXRzIHRvIGFkZCB0byBkaXN0YW5jZSBiYXNlXG5cdCAgICAgIGUgJj0gMTU7XG5cdCAgICAgIHdoaWxlKGs8KGUpKXsgICAgICAgICAvLyBnZXQgZXh0cmEgYml0cyAodXAgdG8gMTMpXG5cdFx0bi0tO1xuXHRcdGJ8PSh6Lm5leHRfaW5bcCsrXSYweGZmKTw8aztrKz04O1xuXHQgICAgICB9XG5cblx0ICAgICAgZCA9IHRwW3RwX2luZGV4X3RfMysyXSArIChiJmluZmxhdGVfbWFza1tlXSk7XG5cblx0ICAgICAgYj4+PShlKTsgay09KGUpO1xuXG5cdCAgICAgIC8vIGRvIHRoZSBjb3B5XG5cdCAgICAgIG0gLT0gYztcblx0ICAgICAgaWYgKHEgPj0gZCl7ICAgICAgICAgICAgICAgIC8vIG9mZnNldCBiZWZvcmUgZGVzdFxuXHRcdC8vICBqdXN0IGNvcHlcblx0XHRyPXEtZDtcblx0XHRpZihxLXI+MCAmJiAyPihxLXIpKXsgICAgICAgICAgIFxuXHRcdCAgcy53aW5kb3dbcSsrXT1zLndpbmRvd1tyKytdOyAvLyBtaW5pbXVtIGNvdW50IGlzIHRocmVlLFxuXHRcdCAgcy53aW5kb3dbcSsrXT1zLndpbmRvd1tyKytdOyAvLyBzbyB1bnJvbGwgbG9vcCBhIGxpdHRsZVxuXHRcdCAgYy09Mjtcblx0XHR9XG5cdFx0ZWxzZXtcblx0XHQgIHMud2luZG93W3ErK109cy53aW5kb3dbcisrXTsgLy8gbWluaW11bSBjb3VudCBpcyB0aHJlZSxcblx0XHQgIHMud2luZG93W3ErK109cy53aW5kb3dbcisrXTsgLy8gc28gdW5yb2xsIGxvb3AgYSBsaXR0bGVcblx0XHQgIGMtPTI7XG5cdFx0fVxuXHQgICAgICB9XG5cdCAgICAgIGVsc2V7ICAgICAgICAgICAgICAgICAgLy8gZWxzZSBvZmZzZXQgYWZ0ZXIgZGVzdGluYXRpb25cbiAgICAgICAgICAgICAgICByPXEtZDtcbiAgICAgICAgICAgICAgICBkb3tcbiAgICAgICAgICAgICAgICAgIHIrPXMuZW5kOyAgICAgICAgICAvLyBmb3JjZSBwb2ludGVyIGluIHdpbmRvd1xuICAgICAgICAgICAgICAgIH13aGlsZShyPDApOyAgICAgICAgIC8vIGNvdmVycyBpbnZhbGlkIGRpc3RhbmNlc1xuXHRcdGU9cy5lbmQtcjtcblx0XHRpZihjPmUpeyAgICAgICAgICAgICAvLyBpZiBzb3VyY2UgY3Jvc3Nlcyxcblx0XHQgIGMtPWU7ICAgICAgICAgICAgICAvLyB3cmFwcGVkIGNvcHlcblx0XHQgIGlmKHEtcj4wICYmIGU+KHEtcikpeyAgICAgICAgICAgXG5cdFx0ICAgIGRve3Mud2luZG93W3ErK10gPSBzLndpbmRvd1tyKytdO31cblx0XHQgICAgd2hpbGUoLS1lIT0wKTtcblx0XHQgIH1cblx0XHQgIGVsc2V7XG5cdFx0ICAgIGFycmF5Q29weShzLndpbmRvdywgciwgcy53aW5kb3csIHEsIGUpO1xuXHRcdCAgICBxKz1lOyByKz1lOyBlPTA7XG5cdFx0ICB9XG5cdFx0ICByID0gMDsgICAgICAgICAgICAgICAgICAvLyBjb3B5IHJlc3QgZnJvbSBzdGFydCBvZiB3aW5kb3dcblx0XHR9XG5cblx0ICAgICAgfVxuXG5cdCAgICAgIC8vIGNvcHkgYWxsIG9yIHdoYXQncyBsZWZ0XG4gICAgICAgICAgICAgIGRve3Mud2luZG93W3ErK10gPSBzLndpbmRvd1tyKytdO31cblx0XHR3aGlsZSgtLWMhPTApO1xuXHQgICAgICBicmVhaztcblx0ICAgIH1cblx0ICAgIGVsc2UgaWYoKGUmNjQpPT0wKXtcblx0ICAgICAgdCs9dHBbdHBfaW5kZXhfdF8zKzJdO1xuXHQgICAgICB0Kz0oYiZpbmZsYXRlX21hc2tbZV0pO1xuXHQgICAgICB0cF9pbmRleF90XzM9KHRwX2luZGV4K3QpKjM7XG5cdCAgICAgIGU9dHBbdHBfaW5kZXhfdF8zXTtcblx0ICAgIH1cblx0ICAgIGVsc2V7XG5cdCAgICAgIHoubXNnID0gXCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIjtcblxuXHQgICAgICBjPXouYXZhaWxfaW4tbjtjPShrPj4zKTxjP2s+PjM6YztuKz1jO3AtPWM7ay09Yzw8MztcblxuXHQgICAgICBzLmJpdGI9YjtzLmJpdGs9aztcblx0ICAgICAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgICAgICBzLndyaXRlPXE7XG5cblx0ICAgICAgcmV0dXJuIFpfREFUQV9FUlJPUjtcblx0ICAgIH1cblx0ICB9XG5cdCAgd2hpbGUodHJ1ZSk7XG5cdCAgYnJlYWs7XG5cdH1cblxuXHRpZigoZSY2NCk9PTApe1xuXHQgIHQrPXRwW3RwX2luZGV4X3RfMysyXTtcblx0ICB0Kz0oYiZpbmZsYXRlX21hc2tbZV0pO1xuXHQgIHRwX2luZGV4X3RfMz0odHBfaW5kZXgrdCkqMztcblx0ICBpZigoZT10cFt0cF9pbmRleF90XzNdKT09MCl7XG5cblx0ICAgIGI+Pj0odHBbdHBfaW5kZXhfdF8zKzFdKTsgay09KHRwW3RwX2luZGV4X3RfMysxXSk7XG5cblx0ICAgIHMud2luZG93W3ErK109dHBbdHBfaW5kZXhfdF8zKzJdO1xuXHQgICAgbS0tO1xuXHQgICAgYnJlYWs7XG5cdCAgfVxuXHR9XG5cdGVsc2UgaWYoKGUmMzIpIT0wKXtcblxuXHQgIGM9ei5hdmFpbF9pbi1uO2M9KGs+PjMpPGM/az4+MzpjO24rPWM7cC09YztrLT1jPDwzO1xuIFxuXHQgIHMuYml0Yj1iO3MuYml0az1rO1xuXHQgIHouYXZhaWxfaW49bjt6LnRvdGFsX2luKz1wLXoubmV4dF9pbl9pbmRleDt6Lm5leHRfaW5faW5kZXg9cDtcblx0ICBzLndyaXRlPXE7XG5cblx0ICByZXR1cm4gWl9TVFJFQU1fRU5EO1xuXHR9XG5cdGVsc2V7XG5cdCAgei5tc2c9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIjtcblxuXHQgIGM9ei5hdmFpbF9pbi1uO2M9KGs+PjMpPGM/az4+MzpjO24rPWM7cC09YztrLT1jPDwzO1xuXG5cdCAgcy5iaXRiPWI7cy5iaXRrPWs7XG5cdCAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuXHQgIHMud3JpdGU9cTtcblxuXHQgIHJldHVybiBaX0RBVEFfRVJST1I7XG5cdH1cbiAgICAgIH0gXG4gICAgICB3aGlsZSh0cnVlKTtcbiAgICB9IFxuICAgIHdoaWxlKG0+PTI1OCAmJiBuPj0gMTApO1xuXG4gICAgLy8gbm90IGVub3VnaCBpbnB1dCBvciBvdXRwdXQtLXJlc3RvcmUgcG9pbnRlcnMgYW5kIHJldHVyblxuICAgIGM9ei5hdmFpbF9pbi1uO2M9KGs+PjMpPGM/az4+MzpjO24rPWM7cC09YztrLT1jPDwzO1xuXG4gICAgcy5iaXRiPWI7cy5iaXRrPWs7XG4gICAgei5hdmFpbF9pbj1uO3oudG90YWxfaW4rPXAtei5uZXh0X2luX2luZGV4O3oubmV4dF9pbl9pbmRleD1wO1xuICAgIHMud3JpdGU9cTtcblxuICAgIHJldHVybiBaX09LO1xufVxuXG4vL1xuLy8gSW5mVHJlZS5qYXZhXG4vL1xuXG5mdW5jdGlvbiBJbmZUcmVlKCkge1xufVxuXG5JbmZUcmVlLnByb3RvdHlwZS5odWZ0X2J1aWxkID0gZnVuY3Rpb24oYiwgYmluZGV4LCBuLCBzLCBkLCBlLCB0LCBtLCBocCwgaG4sIHYpIHtcblxuICAgIC8vIEdpdmVuIGEgbGlzdCBvZiBjb2RlIGxlbmd0aHMgYW5kIGEgbWF4aW11bSB0YWJsZSBzaXplLCBtYWtlIGEgc2V0IG9mXG4gICAgLy8gdGFibGVzIHRvIGRlY29kZSB0aGF0IHNldCBvZiBjb2Rlcy4gIFJldHVybiBaX09LIG9uIHN1Y2Nlc3MsIFpfQlVGX0VSUk9SXG4gICAgLy8gaWYgdGhlIGdpdmVuIGNvZGUgc2V0IGlzIGluY29tcGxldGUgKHRoZSB0YWJsZXMgYXJlIHN0aWxsIGJ1aWx0IGluIHRoaXNcbiAgICAvLyBjYXNlKSwgWl9EQVRBX0VSUk9SIGlmIHRoZSBpbnB1dCBpcyBpbnZhbGlkIChhbiBvdmVyLXN1YnNjcmliZWQgc2V0IG9mXG4gICAgLy8gbGVuZ3RocyksIG9yIFpfTUVNX0VSUk9SIGlmIG5vdCBlbm91Z2ggbWVtb3J5LlxuXG4gICAgdmFyIGE7ICAgICAgICAgICAgICAgICAgICAgICAvLyBjb3VudGVyIGZvciBjb2RlcyBvZiBsZW5ndGgga1xuICAgIHZhciBmOyAgICAgICAgICAgICAgICAgICAgICAgLy8gaSByZXBlYXRzIGluIHRhYmxlIGV2ZXJ5IGYgZW50cmllc1xuICAgIHZhciBnOyAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF4aW11bSBjb2RlIGxlbmd0aFxuICAgIHZhciBoOyAgICAgICAgICAgICAgICAgICAgICAgLy8gdGFibGUgbGV2ZWxcbiAgICB2YXIgaTsgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvdW50ZXIsIGN1cnJlbnQgY29kZVxuICAgIHZhciBqOyAgICAgICAgICAgICAgICAgICAgICAgLy8gY291bnRlclxuICAgIHZhciBrOyAgICAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGJpdHMgaW4gY3VycmVudCBjb2RlXG4gICAgdmFyIGw7ICAgICAgICAgICAgICAgICAgICAgICAvLyBiaXRzIHBlciB0YWJsZSAocmV0dXJuZWQgaW4gbSlcbiAgICB2YXIgbWFzazsgICAgICAgICAgICAgICAgICAgIC8vICgxIDw8IHcpIC0gMSwgdG8gYXZvaWQgY2MgLU8gYnVnIG9uIEhQXG4gICAgdmFyIHA7ICAgICAgICAgICAgICAgICAgICAgICAvLyBwb2ludGVyIGludG8gY1tdLCBiW10sIG9yIHZbXVxuICAgIHZhciBxOyAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnRzIHRvIGN1cnJlbnQgdGFibGVcbiAgICB2YXIgdzsgICAgICAgICAgICAgICAgICAgICAgIC8vIGJpdHMgYmVmb3JlIHRoaXMgdGFibGUgPT0gKGwgKiBoKVxuICAgIHZhciB4cDsgICAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnRlciBpbnRvIHhcbiAgICB2YXIgeTsgICAgICAgICAgICAgICAgICAgICAgIC8vIG51bWJlciBvZiBkdW1teSBjb2RlcyBhZGRlZFxuICAgIHZhciB6OyAgICAgICAgICAgICAgICAgICAgICAgLy8gbnVtYmVyIG9mIGVudHJpZXMgaW4gY3VycmVudCB0YWJsZVxuXG4gICAgLy8gR2VuZXJhdGUgY291bnRzIGZvciBlYWNoIGJpdCBsZW5ndGhcblxuICAgIHAgPSAwOyBpID0gbjtcbiAgICBkbyB7XG4gICAgICB0aGlzLmNbYltiaW5kZXgrcF1dKys7IHArKzsgaS0tOyAgIC8vIGFzc3VtZSBhbGwgZW50cmllcyA8PSBCTUFYXG4gICAgfXdoaWxlKGkhPTApO1xuXG4gICAgaWYodGhpcy5jWzBdID09IG4peyAgICAgICAgICAgICAgICAvLyBudWxsIGlucHV0LS1hbGwgemVybyBsZW5ndGggY29kZXNcbiAgICAgIHRbMF0gPSAtMTtcbiAgICAgIG1bMF0gPSAwO1xuICAgICAgcmV0dXJuIFpfT0s7XG4gICAgfVxuXG4gICAgLy8gRmluZCBtaW5pbXVtIGFuZCBtYXhpbXVtIGxlbmd0aCwgYm91bmQgKm0gYnkgdGhvc2VcbiAgICBsID0gbVswXTtcbiAgICBmb3IgKGogPSAxOyBqIDw9IEJNQVg7IGorKylcbiAgICAgIGlmKHRoaXMuY1tqXSE9MCkgYnJlYWs7XG4gICAgayA9IGo7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWluaW11bSBjb2RlIGxlbmd0aFxuICAgIGlmKGwgPCBqKXtcbiAgICAgIGwgPSBqO1xuICAgIH1cbiAgICBmb3IgKGkgPSBCTUFYOyBpIT0wOyBpLS0pe1xuICAgICAgaWYodGhpcy5jW2ldIT0wKSBicmVhaztcbiAgICB9XG4gICAgZyA9IGk7ICAgICAgICAgICAgICAgICAgICAgICAgLy8gbWF4aW11bSBjb2RlIGxlbmd0aFxuICAgIGlmKGwgPiBpKXtcbiAgICAgIGwgPSBpO1xuICAgIH1cbiAgICBtWzBdID0gbDtcblxuICAgIC8vIEFkanVzdCBsYXN0IGxlbmd0aCBjb3VudCB0byBmaWxsIG91dCBjb2RlcywgaWYgbmVlZGVkXG4gICAgZm9yICh5ID0gMSA8PCBqOyBqIDwgaTsgaisrLCB5IDw8PSAxKXtcbiAgICAgIGlmICgoeSAtPSB0aGlzLmNbal0pIDwgMCl7XG4gICAgICAgIHJldHVybiBaX0RBVEFfRVJST1I7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgoeSAtPSB0aGlzLmNbaV0pIDwgMCl7XG4gICAgICByZXR1cm4gWl9EQVRBX0VSUk9SO1xuICAgIH1cbiAgICB0aGlzLmNbaV0gKz0geTtcblxuICAgIC8vIEdlbmVyYXRlIHN0YXJ0aW5nIG9mZnNldHMgaW50byB0aGUgdmFsdWUgdGFibGUgZm9yIGVhY2ggbGVuZ3RoXG4gICAgdGhpcy54WzFdID0gaiA9IDA7XG4gICAgcCA9IDE7ICB4cCA9IDI7XG4gICAgd2hpbGUgKC0taSE9MCkgeyAgICAgICAgICAgICAgICAgLy8gbm90ZSB0aGF0IGkgPT0gZyBmcm9tIGFib3ZlXG4gICAgICB0aGlzLnhbeHBdID0gKGogKz0gdGhpcy5jW3BdKTtcbiAgICAgIHhwKys7XG4gICAgICBwKys7XG4gICAgfVxuXG4gICAgLy8gTWFrZSBhIHRhYmxlIG9mIHZhbHVlcyBpbiBvcmRlciBvZiBiaXQgbGVuZ3Roc1xuICAgIGkgPSAwOyBwID0gMDtcbiAgICBkbyB7XG4gICAgICBpZiAoKGogPSBiW2JpbmRleCtwXSkgIT0gMCl7XG4gICAgICAgIHRoaXMudlt0aGlzLnhbal0rK10gPSBpO1xuICAgICAgfVxuICAgICAgcCsrO1xuICAgIH1cbiAgICB3aGlsZSAoKytpIDwgbik7XG4gICAgbiA9IHRoaXMueFtnXTsgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgbiB0byBsZW5ndGggb2YgdlxuXG4gICAgLy8gR2VuZXJhdGUgdGhlIEh1ZmZtYW4gY29kZXMgYW5kIGZvciBlYWNoLCBtYWtlIHRoZSB0YWJsZSBlbnRyaWVzXG4gICAgdGhpcy54WzBdID0gaSA9IDA7ICAgICAgICAgICAgICAgICAvLyBmaXJzdCBIdWZmbWFuIGNvZGUgaXMgemVyb1xuICAgIHAgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdyYWIgdmFsdWVzIGluIGJpdCBvcmRlclxuICAgIGggPSAtMTsgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vIHRhYmxlcyB5ZXQtLWxldmVsIC0xXG4gICAgdyA9IC1sOyAgICAgICAgICAgICAgICAgICAgICAgLy8gYml0cyBkZWNvZGVkID09IChsICogaClcbiAgICB0aGlzLnVbMF0gPSAwOyAgICAgICAgICAgICAgICAgICAgIC8vIGp1c3QgdG8ga2VlcCBjb21waWxlcnMgaGFwcHlcbiAgICBxID0gMDsgICAgICAgICAgICAgICAgICAgICAgICAvLyBkaXR0b1xuICAgIHogPSAwOyAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRpdHRvXG5cbiAgICAvLyBnbyB0aHJvdWdoIHRoZSBiaXQgbGVuZ3RocyAoayBhbHJlYWR5IGlzIGJpdHMgaW4gc2hvcnRlc3QgY29kZSlcbiAgICBmb3IgKDsgayA8PSBnOyBrKyspe1xuICAgICAgYSA9IHRoaXMuY1trXTtcbiAgICAgIHdoaWxlIChhLS0hPTApe1xuXHQvLyBoZXJlIGkgaXMgdGhlIEh1ZmZtYW4gY29kZSBvZiBsZW5ndGggayBiaXRzIGZvciB2YWx1ZSAqcFxuXHQvLyBtYWtlIHRhYmxlcyB1cCB0byByZXF1aXJlZCBsZXZlbFxuICAgICAgICB3aGlsZSAoayA+IHcgKyBsKXtcbiAgICAgICAgICBoKys7XG4gICAgICAgICAgdyArPSBsOyAgICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgdGFibGUgYWx3YXlzIGwgYml0c1xuXHQgIC8vIGNvbXB1dGUgbWluaW11bSBzaXplIHRhYmxlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBsIGJpdHNcbiAgICAgICAgICB6ID0gZyAtIHc7XG4gICAgICAgICAgeiA9ICh6ID4gbCkgPyBsIDogejsgICAgICAgIC8vIHRhYmxlIHNpemUgdXBwZXIgbGltaXRcbiAgICAgICAgICBpZigoZj0xPDwoaj1rLXcpKT5hKzEpeyAgICAgLy8gdHJ5IGEgay13IGJpdCB0YWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB0b28gZmV3IGNvZGVzIGZvciBrLXcgYml0IHRhYmxlXG4gICAgICAgICAgICBmIC09IGEgKyAxOyAgICAgICAgICAgICAgIC8vIGRlZHVjdCBjb2RlcyBmcm9tIHBhdHRlcm5zIGxlZnRcbiAgICAgICAgICAgIHhwID0gaztcbiAgICAgICAgICAgIGlmKGogPCB6KXtcbiAgICAgICAgICAgICAgd2hpbGUgKCsraiA8IHopeyAgICAgICAgLy8gdHJ5IHNtYWxsZXIgdGFibGVzIHVwIHRvIHogYml0c1xuICAgICAgICAgICAgICAgIGlmKChmIDw8PSAxKSA8PSB0aGlzLmNbKyt4cF0pXG4gICAgICAgICAgICAgICAgICBicmVhazsgICAgICAgICAgICAgIC8vIGVub3VnaCBjb2RlcyB0byB1c2UgdXAgaiBiaXRzXG4gICAgICAgICAgICAgICAgZiAtPSB0aGlzLmNbeHBdOyAgICAgICAgICAgLy8gZWxzZSBkZWR1Y3QgY29kZXMgZnJvbSBwYXR0ZXJuc1xuICAgICAgICAgICAgICB9XG5cdCAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHogPSAxIDw8IGo7ICAgICAgICAgICAgICAgICAvLyB0YWJsZSBlbnRyaWVzIGZvciBqLWJpdCB0YWJsZVxuXG5cdCAgLy8gYWxsb2NhdGUgbmV3IHRhYmxlXG4gICAgICAgICAgaWYgKHRoaXMuaG5bMF0gKyB6ID4gTUFOWSl7ICAgICAgIC8vIChub3RlOiBkb2Vzbid0IG1hdHRlciBmb3IgZml4ZWQpXG4gICAgICAgICAgICByZXR1cm4gWl9EQVRBX0VSUk9SOyAgICAgICAvLyBvdmVyZmxvdyBvZiBNQU5ZXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMudVtoXSA9IHEgPSAvKmhwKyovIHRoaXMuaG5bMF07ICAgLy8gREVCVUdcbiAgICAgICAgICB0aGlzLmhuWzBdICs9IHo7XG4gXG5cdCAgLy8gY29ubmVjdCB0byBsYXN0IHRhYmxlLCBpZiB0aGVyZSBpcyBvbmVcblx0ICBpZihoIT0wKXtcbiAgICAgICAgICAgIHRoaXMueFtoXT1pOyAgICAgICAgICAgLy8gc2F2ZSBwYXR0ZXJuIGZvciBiYWNraW5nIHVwXG4gICAgICAgICAgICB0aGlzLnJbMF09ajsgICAgIC8vIGJpdHMgaW4gdGhpcyB0YWJsZVxuICAgICAgICAgICAgdGhpcy5yWzFdPWw7ICAgICAvLyBiaXRzIHRvIGR1bXAgYmVmb3JlIHRoaXMgdGFibGVcbiAgICAgICAgICAgIGo9aT4+Pih3IC0gbCk7XG4gICAgICAgICAgICB0aGlzLnJbMl0gPSAocSAtIHRoaXMudVtoLTFdIC0gaik7ICAgICAgICAgICAgICAgLy8gb2Zmc2V0IHRvIHRoaXMgdGFibGVcbiAgICAgICAgICAgIGFycmF5Q29weSh0aGlzLnIsIDAsIGhwLCAodGhpcy51W2gtMV0raikqMywgMyk7IC8vIGNvbm5lY3QgdG8gbGFzdCB0YWJsZVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgdFswXSA9IHE7ICAgICAgICAgICAgICAgLy8gZmlyc3QgdGFibGUgaXMgcmV0dXJuZWQgcmVzdWx0XG5cdCAgfVxuICAgICAgICB9XG5cblx0Ly8gc2V0IHVwIHRhYmxlIGVudHJ5IGluIHJcbiAgICAgICAgdGhpcy5yWzFdID0gKGsgLSB3KTtcbiAgICAgICAgaWYgKHAgPj0gbil7XG4gICAgICAgICAgdGhpcy5yWzBdID0gMTI4ICsgNjQ7ICAgICAgLy8gb3V0IG9mIHZhbHVlcy0taW52YWxpZCBjb2RlXG5cdH1cbiAgICAgICAgZWxzZSBpZiAodltwXSA8IHMpe1xuICAgICAgICAgIHRoaXMuclswXSA9ICh0aGlzLnZbcF0gPCAyNTYgPyAwIDogMzIgKyA2NCk7ICAvLyAyNTYgaXMgZW5kLW9mLWJsb2NrXG4gICAgICAgICAgdGhpcy5yWzJdID0gdGhpcy52W3ArK107ICAgICAgICAgIC8vIHNpbXBsZSBjb2RlIGlzIGp1c3QgdGhlIHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgZWxzZXtcbiAgICAgICAgICB0aGlzLnJbMF09KGVbdGhpcy52W3BdLXNdKzE2KzY0KTsgLy8gbm9uLXNpbXBsZS0tbG9vayB1cCBpbiBsaXN0c1xuICAgICAgICAgIHRoaXMuclsyXT1kW3RoaXMudltwKytdIC0gc107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaWxsIGNvZGUtbGlrZSBlbnRyaWVzIHdpdGggclxuICAgICAgICBmPTE8PChrLXcpO1xuICAgICAgICBmb3IgKGo9aT4+Pnc7ajx6O2orPWYpe1xuICAgICAgICAgIGFycmF5Q29weSh0aGlzLnIsIDAsIGhwLCAocStqKSozLCAzKTtcblx0fVxuXG5cdC8vIGJhY2t3YXJkcyBpbmNyZW1lbnQgdGhlIGstYml0IGNvZGUgaVxuICAgICAgICBmb3IgKGogPSAxIDw8IChrIC0gMSk7IChpICYgaikhPTA7IGogPj4+PSAxKXtcbiAgICAgICAgICBpIF49IGo7XG5cdH1cbiAgICAgICAgaSBePSBqO1xuXG5cdC8vIGJhY2t1cCBvdmVyIGZpbmlzaGVkIHRhYmxlc1xuICAgICAgICBtYXNrID0gKDEgPDwgdykgLSAxOyAgICAgIC8vIG5lZWRlZCBvbiBIUCwgY2MgLU8gYnVnXG4gICAgICAgIHdoaWxlICgoaSAmIG1hc2spICE9IHRoaXMueFtoXSl7XG4gICAgICAgICAgaC0tOyAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgbmVlZCB0byB1cGRhdGUgcVxuICAgICAgICAgIHcgLT0gbDtcbiAgICAgICAgICBtYXNrID0gKDEgPDwgdykgLSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJldHVybiBaX0JVRl9FUlJPUiBpZiB3ZSB3ZXJlIGdpdmVuIGFuIGluY29tcGxldGUgdGFibGVcbiAgICByZXR1cm4geSAhPSAwICYmIGcgIT0gMSA/IFpfQlVGX0VSUk9SIDogWl9PSztcbn1cblxuSW5mVHJlZS5wcm90b3R5cGUuaW5mbGF0ZV90cmVlc19iaXRzID0gZnVuY3Rpb24oYywgYmIsIHRiLCBocCwgeikge1xuICAgIHZhciByZXN1bHQ7XG4gICAgdGhpcy5pbml0V29ya0FyZWEoMTkpO1xuICAgIHRoaXMuaG5bMF09MDtcbiAgICByZXN1bHQgPSB0aGlzLmh1ZnRfYnVpbGQoYywgMCwgMTksIDE5LCBudWxsLCBudWxsLCB0YiwgYmIsIGhwLCB0aGlzLmhuLCB0aGlzLnYpO1xuXG4gICAgaWYocmVzdWx0ID09IFpfREFUQV9FUlJPUil7XG4gICAgICB6Lm1zZyA9IFwib3ZlcnN1YnNjcmliZWQgZHluYW1pYyBiaXQgbGVuZ3RocyB0cmVlXCI7XG4gICAgfVxuICAgIGVsc2UgaWYocmVzdWx0ID09IFpfQlVGX0VSUk9SIHx8IGJiWzBdID09IDApe1xuICAgICAgei5tc2cgPSBcImluY29tcGxldGUgZHluYW1pYyBiaXQgbGVuZ3RocyB0cmVlXCI7XG4gICAgICByZXN1bHQgPSBaX0RBVEFfRVJST1I7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbkluZlRyZWUucHJvdG90eXBlLmluZmxhdGVfdHJlZXNfZHluYW1pYyA9IGZ1bmN0aW9uKG5sLCBuZCwgYywgYmwsIGJkLCB0bCwgdGQsIGhwLCB6KSB7XG4gICAgdmFyIHJlc3VsdDtcblxuICAgIC8vIGJ1aWxkIGxpdGVyYWwvbGVuZ3RoIHRyZWVcbiAgICB0aGlzLmluaXRXb3JrQXJlYSgyODgpO1xuICAgIHRoaXMuaG5bMF09MDtcbiAgICByZXN1bHQgPSB0aGlzLmh1ZnRfYnVpbGQoYywgMCwgbmwsIDI1NywgY3BsZW5zLCBjcGxleHQsIHRsLCBibCwgaHAsIHRoaXMuaG4sIHRoaXMudik7XG4gICAgaWYgKHJlc3VsdCAhPSBaX09LIHx8IGJsWzBdID09IDApe1xuICAgICAgaWYocmVzdWx0ID09IFpfREFUQV9FUlJPUil7XG4gICAgICAgIHoubXNnID0gXCJvdmVyc3Vic2NyaWJlZCBsaXRlcmFsL2xlbmd0aCB0cmVlXCI7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChyZXN1bHQgIT0gWl9NRU1fRVJST1Ipe1xuICAgICAgICB6Lm1zZyA9IFwiaW5jb21wbGV0ZSBsaXRlcmFsL2xlbmd0aCB0cmVlXCI7XG4gICAgICAgIHJlc3VsdCA9IFpfREFUQV9FUlJPUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gYnVpbGQgZGlzdGFuY2UgdHJlZVxuICAgIHRoaXMuaW5pdFdvcmtBcmVhKDI4OCk7XG4gICAgcmVzdWx0ID0gdGhpcy5odWZ0X2J1aWxkKGMsIG5sLCBuZCwgMCwgY3BkaXN0LCBjcGRleHQsIHRkLCBiZCwgaHAsIHRoaXMuaG4sIHRoaXMudik7XG5cbiAgICBpZiAocmVzdWx0ICE9IFpfT0sgfHwgKGJkWzBdID09IDAgJiYgbmwgPiAyNTcpKXtcbiAgICAgIGlmIChyZXN1bHQgPT0gWl9EQVRBX0VSUk9SKXtcbiAgICAgICAgei5tc2cgPSBcIm92ZXJzdWJzY3JpYmVkIGRpc3RhbmNlIHRyZWVcIjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHJlc3VsdCA9PSBaX0JVRl9FUlJPUikge1xuICAgICAgICB6Lm1zZyA9IFwiaW5jb21wbGV0ZSBkaXN0YW5jZSB0cmVlXCI7XG4gICAgICAgIHJlc3VsdCA9IFpfREFUQV9FUlJPUjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHJlc3VsdCAhPSBaX01FTV9FUlJPUil7XG4gICAgICAgIHoubXNnID0gXCJlbXB0eSBkaXN0YW5jZSB0cmVlIHdpdGggbGVuZ3Roc1wiO1xuICAgICAgICByZXN1bHQgPSBaX0RBVEFfRVJST1I7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBaX09LO1xufVxuLypcbiAgc3RhdGljIGludCBpbmZsYXRlX3RyZWVzX2ZpeGVkKGludFtdIGJsLCAgLy9saXRlcmFsIGRlc2lyZWQvYWN0dWFsIGJpdCBkZXB0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50W10gYmQsICAvL2Rpc3RhbmNlIGRlc2lyZWQvYWN0dWFsIGJpdCBkZXB0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50W11bXSB0bCwvL2xpdGVyYWwvbGVuZ3RoIHRyZWUgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRbXVtdIHRkLC8vZGlzdGFuY2UgdHJlZSByZXN1bHQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBaU3RyZWFtIHogIC8vZm9yIG1lbW9yeSBhbGxvY2F0aW9uXG5cdFx0XHRcdCApe1xuXG4qL1xuXG5mdW5jdGlvbiBpbmZsYXRlX3RyZWVzX2ZpeGVkKGJsLCBiZCwgdGwsIHRkLCB6KSB7XG4gICAgYmxbMF09Zml4ZWRfYmw7XG4gICAgYmRbMF09Zml4ZWRfYmQ7XG4gICAgdGxbMF09Zml4ZWRfdGw7XG4gICAgdGRbMF09Zml4ZWRfdGQ7XG4gICAgcmV0dXJuIFpfT0s7XG59XG5cbkluZlRyZWUucHJvdG90eXBlLmluaXRXb3JrQXJlYSA9IGZ1bmN0aW9uKHZzaXplKXtcbiAgICBpZih0aGlzLmhuPT1udWxsKXtcbiAgICAgICAgdGhpcy5obj1uZXcgSW50MzJBcnJheSgxKTtcbiAgICAgICAgdGhpcy52PW5ldyBJbnQzMkFycmF5KHZzaXplKTtcbiAgICAgICAgdGhpcy5jPW5ldyBJbnQzMkFycmF5KEJNQVgrMSk7XG4gICAgICAgIHRoaXMucj1uZXcgSW50MzJBcnJheSgzKTtcbiAgICAgICAgdGhpcy51PW5ldyBJbnQzMkFycmF5KEJNQVgpO1xuICAgICAgICB0aGlzLng9bmV3IEludDMyQXJyYXkoQk1BWCsxKTtcbiAgICB9XG4gICAgaWYodGhpcy52Lmxlbmd0aDx2c2l6ZSl7IFxuICAgICAgICB0aGlzLnY9bmV3IEludDMyQXJyYXkodnNpemUpOyBcbiAgICB9XG4gICAgZm9yKHZhciBpPTA7IGk8dnNpemU7IGkrKyl7dGhpcy52W2ldPTA7fVxuICAgIGZvcih2YXIgaT0wOyBpPEJNQVgrMTsgaSsrKXt0aGlzLmNbaV09MDt9XG4gICAgZm9yKHZhciBpPTA7IGk8MzsgaSsrKXt0aGlzLnJbaV09MDt9XG4vLyAgZm9yKGludCBpPTA7IGk8Qk1BWDsgaSsrKXt1W2ldPTA7fVxuICAgIGFycmF5Q29weSh0aGlzLmMsIDAsIHRoaXMudSwgMCwgQk1BWCk7XG4vLyAgZm9yKGludCBpPTA7IGk8Qk1BWCsxOyBpKyspe3hbaV09MDt9XG4gICAgYXJyYXlDb3B5KHRoaXMuYywgMCwgdGhpcy54LCAwLCBCTUFYKzEpO1xufVxuXG52YXIgdGVzdEFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG52YXIgaGFzU3ViYXJyYXkgPSAodHlwZW9mIHRlc3RBcnJheS5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyk7XG52YXIgaGFzU2xpY2UgPSBmYWxzZTsgLyogKHR5cGVvZiB0ZXN0QXJyYXkuc2xpY2UgPT09ICdmdW5jdGlvbicpOyAqLyAvLyBDaHJvbWUgc2xpY2UgcGVyZm9ybWFuY2UgaXMgc28gZGlyZSB0aGF0IHdlJ3JlIGN1cnJlbnRseSBub3QgdXNpbmcgaXQuLi5cblxuZnVuY3Rpb24gYXJyYXlDb3B5KHNyYywgc3JjT2Zmc2V0LCBkZXN0LCBkZXN0T2Zmc2V0LCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9IFxuICAgIGlmICghc3JjKSB7XG4gICAgICAgIHRocm93IFwiVW5kZWYgc3JjXCI7XG4gICAgfSBlbHNlIGlmICghZGVzdCkge1xuICAgICAgICB0aHJvdyBcIlVuZGVmIGRlc3RcIjtcbiAgICB9XG5cbiAgICBpZiAoc3JjT2Zmc2V0ID09IDAgJiYgY291bnQgPT0gc3JjLmxlbmd0aCkge1xuICAgICAgICBhcnJheUNvcHlfZmFzdChzcmMsIGRlc3QsIGRlc3RPZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoaGFzU3ViYXJyYXkpIHtcbiAgICAgICAgYXJyYXlDb3B5X2Zhc3Qoc3JjLnN1YmFycmF5KHNyY09mZnNldCwgc3JjT2Zmc2V0ICsgY291bnQpLCBkZXN0LCBkZXN0T2Zmc2V0KTsgXG4gICAgfSBlbHNlIGlmIChzcmMuQllURVNfUEVSX0VMRU1FTlQgPT0gMSAmJiBjb3VudCA+IDEwMCkge1xuICAgICAgICBhcnJheUNvcHlfZmFzdChuZXcgVWludDhBcnJheShzcmMuYnVmZmVyLCBzcmMuYnl0ZU9mZnNldCArIHNyY09mZnNldCwgY291bnQpLCBkZXN0LCBkZXN0T2Zmc2V0KTtcbiAgICB9IGVsc2UgeyBcbiAgICAgICAgYXJyYXlDb3B5X3Nsb3coc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQsIGNvdW50KTtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gYXJyYXlDb3B5X3Nsb3coc3JjLCBzcmNPZmZzZXQsIGRlc3QsIGRlc3RPZmZzZXQsIGNvdW50KSB7XG5cbiAgICAvLyBkbG9nKCdfc2xvdyBjYWxsOiBzcmNPZmZzZXQ9JyArIHNyY09mZnNldCArICc7IGRlc3RPZmZzZXQ9JyArIGRlc3RPZmZzZXQgKyAnOyBjb3VudD0nICsgY291bnQpO1xuXG4gICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuICAgICAgICBkZXN0W2Rlc3RPZmZzZXQgKyBpXSA9IHNyY1tzcmNPZmZzZXQgKyBpXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGFycmF5Q29weV9mYXN0KHNyYywgZGVzdCwgZGVzdE9mZnNldCkge1xuICAgIGRlc3Quc2V0KHNyYywgZGVzdE9mZnNldCk7XG59XG5cblxuICAvLyBsYXJnZXN0IHByaW1lIHNtYWxsZXIgdGhhbiA2NTUzNlxudmFyIEFETEVSX0JBU0U9NjU1MjE7IFxuICAvLyBOTUFYIGlzIHRoZSBsYXJnZXN0IG4gc3VjaCB0aGF0IDI1NW4obisxKS8yICsgKG4rMSkoQkFTRS0xKSA8PSAyXjMyLTFcbnZhciBBRExFUl9OTUFYPTU1NTI7XG5cbmZ1bmN0aW9uIGFkbGVyMzIoYWRsZXIsIC8qIGJ5dGVbXSAqLyBidWYsICBpbmRleCwgbGVuKXtcbiAgICBpZihidWYgPT0gbnVsbCl7IHJldHVybiAxOyB9XG5cbiAgICB2YXIgczE9YWRsZXImMHhmZmZmO1xuICAgIHZhciBzMj0oYWRsZXI+PjE2KSYweGZmZmY7XG4gICAgdmFyIGs7XG5cbiAgICB3aGlsZShsZW4gPiAwKSB7XG4gICAgICBrPWxlbjxBRExFUl9OTUFYP2xlbjpBRExFUl9OTUFYO1xuICAgICAgbGVuLT1rO1xuICAgICAgd2hpbGUoaz49MTYpe1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIHMxKz1idWZbaW5kZXgrK10mMHhmZjsgczIrPXMxO1xuICAgICAgICBzMSs9YnVmW2luZGV4KytdJjB4ZmY7IHMyKz1zMTtcbiAgICAgICAgay09MTY7XG4gICAgICB9XG4gICAgICBpZihrIT0wKXtcbiAgICAgICAgZG97XG4gICAgICAgICAgczErPWJ1ZltpbmRleCsrXSYweGZmOyBzMis9czE7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUoLS1rIT0wKTtcbiAgICAgIH1cbiAgICAgIHMxJT1BRExFUl9CQVNFO1xuICAgICAgczIlPUFETEVSX0JBU0U7XG4gICAgfVxuICAgIHJldHVybiAoczI8PDE2KXxzMTtcbn1cblxuXG5cbmZ1bmN0aW9uIGpzemxpYl9pbmZsYXRlX2J1ZmZlcihidWZmZXIsIHN0YXJ0LCBsZW5ndGgsIGFmdGVyVW5jT2Zmc2V0KSB7XG4gICAgaWYgKCFzdGFydCkge1xuICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIH0gZWxzZSBpZiAoIWxlbmd0aCkge1xuICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIsIHN0YXJ0LCBidWZmZXIuYnl0ZUxlbmd0aCAtIHN0YXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShidWZmZXIsIHN0YXJ0LCBsZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciB6ID0gbmV3IFpTdHJlYW0oKTtcbiAgICB6LmluZmxhdGVJbml0KERFRl9XQklUUywgdHJ1ZSk7XG4gICAgei5uZXh0X2luID0gYnVmZmVyO1xuICAgIHoubmV4dF9pbl9pbmRleCA9IDA7XG4gICAgei5hdmFpbF9pbiA9IGJ1ZmZlci5sZW5ndGg7XG5cbiAgICB2YXIgb0Jsb2NrTGlzdCA9IFtdO1xuICAgIHZhciB0b3RhbFNpemUgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBvYnVmID0gbmV3IFVpbnQ4QXJyYXkoMzIwMDApO1xuICAgICAgICB6Lm5leHRfb3V0ID0gb2J1ZjtcbiAgICAgICAgei5uZXh0X291dF9pbmRleCA9IDA7XG4gICAgICAgIHouYXZhaWxfb3V0ID0gb2J1Zi5sZW5ndGg7XG4gICAgICAgIHZhciBzdGF0dXMgPSB6LmluZmxhdGUoWl9OT19GTFVTSCk7XG4gICAgICAgIGlmIChzdGF0dXMgIT0gWl9PSyAmJiBzdGF0dXMgIT0gWl9TVFJFQU1fRU5EICYmIHN0YXR1cyAhPSBaX0JVRl9FUlJPUikge1xuICAgICAgICAgICAgdGhyb3cgei5tc2c7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHouYXZhaWxfb3V0ICE9IDApIHtcbiAgICAgICAgICAgIHZhciBuZXdvYiA9IG5ldyBVaW50OEFycmF5KG9idWYubGVuZ3RoIC0gei5hdmFpbF9vdXQpO1xuICAgICAgICAgICAgYXJyYXlDb3B5KG9idWYsIDAsIG5ld29iLCAwLCAob2J1Zi5sZW5ndGggLSB6LmF2YWlsX291dCkpO1xuICAgICAgICAgICAgb2J1ZiA9IG5ld29iO1xuICAgICAgICB9XG4gICAgICAgIG9CbG9ja0xpc3QucHVzaChvYnVmKTtcbiAgICAgICAgdG90YWxTaXplICs9IG9idWYubGVuZ3RoO1xuICAgICAgICBpZiAoc3RhdHVzID09IFpfU1RSRUFNX0VORCB8fCBzdGF0dXMgPT0gWl9CVUZfRVJST1IpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFmdGVyVW5jT2Zmc2V0KSB7XG4gICAgICAgIGFmdGVyVW5jT2Zmc2V0WzBdID0gKHN0YXJ0IHx8IDApICsgei5uZXh0X2luX2luZGV4O1xuICAgIH1cblxuICAgIGlmIChvQmxvY2tMaXN0Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIHJldHVybiBvQmxvY2tMaXN0WzBdLmJ1ZmZlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxTaXplKTtcbiAgICAgICAgdmFyIGN1cnNvciA9IDA7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb0Jsb2NrTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGIgPSBvQmxvY2tMaXN0W2ldO1xuICAgICAgICAgICAgYXJyYXlDb3B5KGIsIDAsIG91dCwgY3Vyc29yLCBiLmxlbmd0aCk7XG4gICAgICAgICAgICBjdXJzb3IgKz0gYi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dC5idWZmZXI7XG4gICAgfVxufVxuXG5pZiAodHlwZW9mKG1vZHVsZSkgIT09ICd1bmRlZmluZWQnKSB7XG4gIG1vZHVsZS5leHBvcnRzID0ge1xuICAgIGluZmxhdGVCdWZmZXI6IGpzemxpYl9pbmZsYXRlX2J1ZmZlcixcbiAgICBhcnJheUNvcHk6IGFycmF5Q29weVxuICB9O1xufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiJdfQ=="}